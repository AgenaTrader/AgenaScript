{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the official AgenaScript documentation!\n\n\nWant to learn more about the AgenaTrader scripting language? We've got the resources to help you get started. Start by browsing the documentation on the list below.\n\n\nIntroductory Words\n\n\nAgenaScript is AgenaTrader\u2019s integrated programming language. The syntax is derived from C# and thus closely resembles it.\n\n\nAgenaScript allows you to execute any ideas/methods that are too complex for the ConditionEscort. From simple indicators to entire applications where AgenaTrader is only required to run in the background, anything that can be written in .NET can be implemented.\n\n\nInformation contained in this help document:\n\n\nHandling bars and instruments\n\n\nYou will find a detailed explanation of how AgenaScript reacts and interacts with individual bars or candles as well as various trading instruments.\n\n\nEvents\n\n\nAgenaScript is event-based and -driven. When (for example) a candle closes or a new candle opens, then an event has occurred. When a new price value is delivered by your data provider or a new order is executed by your broker, then these too are considered events. AgenaScript allows you to react to these events. You can read about the exact methodology in this and the following chapters.\n\n\nStrategy programming\n\n\nAgenaScript allows you to create your own trading strategies and execute them live within the market. Information pertaining to prerequisites and how orders are sent to the broker and managed internally can be found here.\n\n\nKeywords\n\n\nLike every other programming language, AgenaTrader has a set of commands that can be converted and used via Scripts. You should be relatively well versed in these if you wish to create your own indicators or trading systems.\n\n\nDrawing objects\n\n\nAll drawing objects that can be used within the chart can also be accessed using AgenaScript. In this way, you can turn on/off certain lines, arrows, rectangles and other objects with specified conditions.\n\n\nHints and advice\n\n\nThis section provides solutions to problems of an unusual nature. To solve such problems, you need to be able to trace and understand source code and programming. More advanced programmers and users may find solutions and suggestions that could help them in their own programming.", 
            "title": "Lets start"
        }, 
        {
            "location": "/#welcome-to-the-official-agenascript-documentation", 
            "text": "Want to learn more about the AgenaTrader scripting language? We've got the resources to help you get started. Start by browsing the documentation on the list below.", 
            "title": "Welcome to the official AgenaScript documentation!"
        }, 
        {
            "location": "/#introductory-words", 
            "text": "AgenaScript is AgenaTrader\u2019s integrated programming language. The syntax is derived from C# and thus closely resembles it.  AgenaScript allows you to execute any ideas/methods that are too complex for the ConditionEscort. From simple indicators to entire applications where AgenaTrader is only required to run in the background, anything that can be written in .NET can be implemented.  Information contained in this help document:  Handling bars and instruments  You will find a detailed explanation of how AgenaScript reacts and interacts with individual bars or candles as well as various trading instruments.  Events  AgenaScript is event-based and -driven. When (for example) a candle closes or a new candle opens, then an event has occurred. When a new price value is delivered by your data provider or a new order is executed by your broker, then these too are considered events. AgenaScript allows you to react to these events. You can read about the exact methodology in this and the following chapters.  Strategy programming  AgenaScript allows you to create your own trading strategies and execute them live within the market. Information pertaining to prerequisites and how orders are sent to the broker and managed internally can be found here.  Keywords  Like every other programming language, AgenaTrader has a set of commands that can be converted and used via Scripts. You should be relatively well versed in these if you wish to create your own indicators or trading systems.  Drawing objects  All drawing objects that can be used within the chart can also be accessed using AgenaScript. In this way, you can turn on/off certain lines, arrows, rectangles and other objects with specified conditions.  Hints and advice  This section provides solutions to problems of an unusual nature. To solve such problems, you need to be able to trace and understand source code and programming. More advanced programmers and users may find solutions and suggestions that could help them in their own programming.", 
            "title": "Introductory Words"
        }, 
        {
            "location": "/handling_bars_and_instruments/", 
            "text": "Handling bars and instruments\n\n\nData is understood as information that is retrieved externally and uploaded to AgenaTrader, or as data series that are created by AgenaScripts.\n\n\nFurther detailed information can be found using the appropriate shortcuts:\n\n\nBars (Candles)\n\n\nData series\n\n\nInstruments\n\n\nBars (Candles)\n\n\nFunctionality\n\n\nA classical indicator calculates one or multiple values using an existing data series.\n\n\nData series can be anything from closing prices to daily lows or values of an hourly period etc.\n\n\nEvery period (meaning all candles of one day, one hour etc.) is assigned one or more indicator values.\nThe following example is based on an indicator value, such as with a moving average, for example.\nTo calculate a smoothed moving average, AgenaTrader needs a data series. In this example we will use the closing prices. All closing prices of a bar (candle) that are represented in the chart will be saved in a list and indexed.\n\n\nThe current closing price, meaning the closing price of the bar that is on the right-hand side of the chart, will be assigned an index of 0. The bar to the left of that will have an index of 1 and so on. The oldest bar displayed will have an index value of 500.\n\n\nWhenever a new bar is added within a session it will become the new index 0; the bar to the left of it, which previously had an index of 0, will become index 1 and so on. The oldest bar will become index 501.\nWithin a script (a self-created program/algorithm) the [\nClose\n] will be representative for the array (list) of all closing prices.\nThe last closing price is thus \nClose [0]\n; the closing price previous to this will become \nClose [1]\n, the value before that will become \nClose [2]\n and the oldest bar will be \nClose [501]\n. The number within the squared brackets represents the index. AgenaTrader allows you to use the \u201ebars ago\" expression for this in general cases.\n\n\nObviously, every bar will not only have a closing value but also a \nHigh\n, \nLow\n, \nOpen\n, \nMedian\n, \nTypical\n, \nWeighted\n, \nTime\n and \nVolume\n. Thus, the high of the candle that occurred 10 days ago will be \nHigh [10]\n, yesterday\u2019s low \nLow [1]\n...\n\n\nImportant tip:\n\n\nThe previous examples all assume that the calculations will occur at the end of a period. The value of the currently running index is not being taken into consideration.\n\n\nIf you wish to use the values of the currently forming candle then you will need to set the value of\n\n\n[\nCalculateOnBarClose\n] to \u201efalse\".\n\n\nIn this case the currently running bar will have the value 0, the bar next to the current bar will have the value 1 and so on. The oldest bar (as in the example above) would now have the value 502.\n\n\nWith close [0] you would receive the most recent value of the last price that your data provider transmitted to AgenaTrader. All values of the bar (high [0], low [0]\u2026) may still change as long as the bar is not yet finished/closed and a new bar has not yet started. Only the open [0] value will not change.\n\n\nProperties of Bars\n\n\nProperties of Bars\n\n\n\"Bars\" represents a list of all bars (candles) within a chart (see [\nFunctionality\n][\nBars\n]).\n\n\nBars (\npublic\n IBars Bars) can be used directly in a script and equates to BarsArray [0] (see Bars.GetNextBeginEnd for more information).\n\n\nThe list of bars itself has many properties that can be used in AgenaScript. Properties are always indicated by a dot before the objects (in this case bars, list of candles).\n\n\nBarsSinceSession\n\n\nBars.Count\n\n\nBars.FirstBarOfSession\n\n\nBars.GetBar\n\n\nBars.GetBarsAgo\n\n\nBars.GetByIndex\n\n\nBars.GetIndex\n\n\nBars.GetNextBeginEnd\n\n\nBars.GetOpen\n\n\nBars.GetHigh\n\n\nBars.GetLow\n\n\nBars.GetClose\n\n\nBars.GetTime\n\n\nBars.GetVolume\n\n\nBars.Instrument\n\n\nBars.IsIntraday\n\n\nBars.PercentComplete\n\n\nBars.SessionBegin\n\n\nBars.SessionEnd\n\n\nBars.SessionNextBegin\n\n\nBars.SessionNextEnd\n\n\nBars.TickCount\n\n\nBars.TimeFrame\n\n\nBars.TotalTicks\n\n\nWith the \nOnBarUpdate()\n method you can use any properties you want without having to test for a null reference.\nAs soon as the function \nOnBarUpdate()\n is called up by AgenaScript, it is assumed that an object is also available. If you wish to use these properties outside of \nOnBarUpdate()\n then you should first perform a test for null references using \nif\n (Bars != \nnull\n).\n\n\nBarsSinceSession\n\n\nDescription\n\n\nBars.BarsSinceSession outputs the amount of bars that have occurred since the beginning of the current trading session.\n\n\nSee further [\nProperties\n] of bars.\n\n\nReturn Value\n\n\nType int Amount of Bars\n\n\nA value of -1 indicates a problem with referencing the correct session beginning.\n\n\nUsage\n\n\nBars.BarsSinceSession\n\n\nFurther Information\n\n\nWithin \nOnBarUpdate()\n this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnBarUpdate() then you should test for a null reference before executing it. You can test using \nif\n (Bars!= \nnull\n) .\n\n\nExample\n\n\nPrint (\nSince the start of the last trading session there have been\n + Bars.BarsSinceSession + \nbars.\n);\n\n\n\n\nBars.Count\n\n\nDescription\n\n\nBars.Count gives you the amount of bars in a data series.\n\n\nSee [\nProperties\n] for additional information.\n\n\nReturn Value\n\n\nType int Amount of Bars\n\n\nUsage\n\n\nBars.Count\n\n\nMore Information\n\n\nThe value of \nCurrentBar\n can only be lesser than or equal to Bars.Count - 1\n\n\nWhen you specify how many bars are to be loaded within AgenaTrader, then the value of Bars.Count is equal to this setting. In the following example, Bars.Count would give back a value of 500.\n\n\n\n\nExample\n\n\nPrint (\nThere are a total of\n + Bars.Count + \nbars available.\n);\n\n\n\n\nBars.FirstBarOfSession\n\n\nDescription\n\n\nWith Bars.FirstBarOfSession you can determine whether the current bar is the first bar of the trading session.\n\n\nSee [\nProperties\n] of bars for more information.\n\n\nReturn Value\n\n\nType bool\n\n\ntrue\n: The bar is the first bar of the current trading session\n\nfalse\n: The bar is not the first bar of the current trading session\n\n\nUsage\n\n\nBars.FirstBarOfSession\n\n\nMore Information\n\n\nWith \nOnBarUpdate()\n this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up, an object will become available.\nIf this property is called up outside of OnBarUpdate() you should test for a null reference using if (Bars != null).\n\n\nExample\n\n\nif (Bars.FirstBarOfSession)\nPrint (\nThe current trading session started at\n + Time [0]);\n\n\n\n\nBars.GetBar\n\n\nDescription\n\n\nBars.GetBar outputs the first bars (from oldest to newest) that correspond to the specified date/time.\n\n\nSee [\nBars.GetBarsAgo\n], [\nBars.GetByIndex\n], [\nBars.GetIndex\n].\n\n\nParameter\n\n\nType DateTime\n\n\nReturn Value\n\n\nType IBar Bar Object, for the bars corresponding to the timestamp\n\n\nFor a timestamp older than the oldest bar: 0 (null)\nFor a timestamp younger than the newest bar: index of the last bar\n\n\nUsage\n\n\nBars.GetBar(DateTime time)\n\n\n\n\nMore Information\n\n\nFor the indexing of bars please see [\nFunctionality\n][\nBars\n]\n\n\nFor more information about using DateTime see [\nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n]\n\n\nExample\n\n\nPrint (\nThe closing price for 01.03.2012 at 18:00:00 was \n + Bars.GetBar(new DateTime(2012, 01, 03, 18, 0, 0)).Close);\n\n\n\n\nBars.GetBarsAgo\n\n\nDescription\n\n\nBars.GetBarsAgo outputs the index of the first bars (from oldest to newest) that correspond to the specified date/time.\n\n\nSee: [\nBars.GetBar\n], [\nBars.GetByIndex\n], [\nBars.GetIndex\n].\n\n\nParameter\n\n\nType DateTime\n\n\nReturn Value\n\n\nType int Index of the bar that corresponds to the timestamp\n\n\nWith a timestamp older than the oldest bar: 0 (null)\nWith a timestamp newer than the youngest bar: index of the last bar\n\n\nUsage\n\n\nBars.GetBarsAgo(DateTime time)\n\n\n\n\nMore Information\n\n\nFor more information about indexing please see [\nFunctionality\n][\nBars\n]\n\n\nFor more information about using DateTime see [\nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n]\n\n\nExample\n\n\nPrint(\nThe bar for 01.03.2012 at 18:00:00 O\u2019clock has an index of \n + Bars.GetBarsAgo(new DateTime(2012, 01, 03, 18, 0, 0)));\n\n\n\n\nBars.GetClose\n\n\nBars.GetClose(int index) \u2013 see [\nBars.GetOpen\n].\n\n\nBars.GetHigh\n\n\nBars.GetHigh(int index) \u2013 see [\nBars.GetOpen\n].\n\n\nBars.GetByIndex\n\n\nDescription\n\n\nBars.GetByIndex outputs the index for the specified bar object\n\n\nSee \nBars.GetBar\n, \nBars.GetBarsAgo\n, \nBars.GetIndex\n.\n\n\nParameter\n\n\nType int Index\n\n\nReturn Value\n\n\nType IBar Bar object for the specified index\n\n\nUsage\n\n\nBars.GetByIndex (int Index)\n\n\n\n\nMore Information\n\n\nFor indexing of bars see [\nFunctionality\n]\nBars\n\n\nExample\n\n\nPrint(Close[0] + \n and \n + Bars.GetByIndex(CurrentBar).Close + \n are equal in this example.\n);\n\n\n\n\nBars.GetIndex\n\n\nDescription\n\n\nBars.GetIndex outputs the index of a bar \u2013 you can input either a bar object or a date-time object using this method.\n\n\nSee \nBars.GetBar\n, \nBars.GetBarsAgo\n, \nBars.GetByIndex\n.\n\n\nParameter\n\n\nType IBar bar\nor\nType DateTime\n\n\nReturn Value\n\n\nType int The bar index of the specified bar object or DateTime object\n\n\nUsage\n\n\nBars.GetIndex (IBar bar)\nBars.GetIndex (DateTime dt)\n\n\n\n\nMore Information\n\n\nFor more information about indexing see [\nFunctionality\n][\nBars\n]\n\n\nExample\n\n\nint barsAgo = 5;\nIBar bar = Bars.GetBar(Time[barsAgo]);\nPrint(barsAgo + \n and \n + Bars.GetIndex(bar) + \n are equal in this example.\n);\n\n\n\n\nBars.GetLow\n\n\nBars.GetLow(int index) \u2013 see [\nBars.GetOpen\n].\n\n\nBars.GetNextBeginEnd\n\n\nDescription\n\n\nBars.GetNextBeginEnd outputs the date and time for the beginning and end of a trading session.\n\n\nSee \nBars.SessionBegin\n, \nBars.SessionEnd\n, \nBars.SessionNextBegin\n, \nBars.SessionNextEnd\n.\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDateTime\n\n\ntime\n\n\nDate or time for which the data of the following trading session will be scanned/searched.\n\n\n\n\n\n\niBars\n\n\nbars\n\n\nBar object for which the data will be scanned/searched.\n\n\n\n\n\n\nint\n\n\nbarsago\n\n\nNumber of days in the past for which the data will be searched/scanned.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nDateTime session begin\nDateTime session end\n\n\nNote:\n\nThe date for the beginning and the end of a trading session are connected components. If the specified date corresponds to the end date of the current trading session then the returned value for the beginning of a trading session may already be in the past. In this case the date for the following trading session cannot be returned.\n\n\nUsage\n\n\nBars.GetNextBeginEnd(Bars bars, int barsAgo, out DateTime sessionBegin, out DateTime sessionEnd)\nBars.GetNextBeginEnd(DateTime time, out DateTime sessionBegin, out DateTime sessionEnd)\n\n\n\n\nMore Information\n\n\nThe two signatures will not necessarily output the same result.\nWhen using the bar signature, the supplied bar will be inspected for its session template association. The beginning and end of the next session will be taken from this template.\n\n\nWhen using the time signature, the date and time of the supplied bar will be used to calculate the data for the current and the following sessions.\n\n\nWhen using the time signature, a timestamp is transmitted that corresponds exactly to the beginning or the end time of a session.\n\n\nMore information can be found here [\nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n]\n\n\nExample\n\n\nDateTime sessionBegin;\nDateTime sessionEnd;\nprotected override void OnBarUpdate()\n{\nBars.GetNextBeginEnd(Bars, 0, out sessionBegin, out sessionEnd);\nPrint(\nSession Start: \n + sessionBegin + \n Session End: \n + sessionEnd);\n}\n\n\n\n\nBars.GetSessionDate\n\n\nDescription\n\n\nBars.GetSessionDate provides the date and the time of the start of a particular trading session.\n\n\nThe date and time for the start of the current trading session are also displayed correctly even if the function is used on a bar in the past.\n\n\nBars.GetOpen\n\n\nDescription\n\n\nFor reasons of compatibility, the following methods are available.\n\n\n\n\nBars.GetOpen(int index) outputs the open for the bars referenced with \nindex\n.\n\n\nBars.GetHigh(int index) outputs the high for the bars referenced with \nindex\n.\n\n\nBars.GetLow(int index) outputs the low for the bars referenced with \nindex\n.\n\n\nBars.GetClose(int index) outputs the close for the bars referenced with \nindex\n.\n\n\nBars.GetTime(int index) outputs the timestamp for the bars referenced with \nindex\n.\n\n\nBars.GetVolume(int index) outputs the volume for the bars referenced with \nindex\n.\n\n\n\n\nCaution\n: The indexing will deviate from the [\nIndexing\n][\nBars\n] normally used.\nHere, the indexing will begin with 0 for the oldest bar (on the left of the chart) and end with the newest bar on the right of the chart (=Bars.Count-1).\n\n\nThe indexing can easily be recalculated:\n\n\nprivate int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnBarClose?1:0));\n}\n\n\n\n\nParameter\n\n\nint index (0 .. Bars.Count-1)\n\n\nReturn Value\n\n\nType double for GetOpen, GetHigh, GetLow, GetClose and GetVolume\n\n\nType DateTime for GetTime\n\n\nBars.GetTime\n\n\nBars.GetTime(int index) \u2013 see [\nBars.GetOpen\n].\n\n\nBars.GetVolume\n\n\nBars.GetVolume(int index) \u2013 see [\nBars.GetOpen\n].\n\n\nBars.Instrument\n\n\nDescription\n\n\nBars.Instrument outputs an instrument object for the trading instrument displayed within the chart.\n\n\nSee [\nProperties\n] for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType Instrument\n\n\nUsage\n\n\nBars.Instrument\n\n\nMore Information\n\n\nFor more information regarding the trading instruments please see [\nInstrument\n].\n\n\nExample\n\n\n// both outputs will provide the same result\nPrint(\nThe currently displayed trading instrument has the symbol: \n + Bars.Instrument);\nInstrument i = Bars.Instrument;\nPrint(\nThe currently displayed trading instrument has the symbol \n + i.Symbol);\n\n\n\n\nBars.IsIntraday\n\n\nDescription\n\n\nBars.IsIntraday returns a boolean which indicates if the TimeFrame is intra-day.\n\n\nReturn Value\n\n\nbool\n\n\nIt returns \"true\" if TimeFrame is intra-day (e.g. 1 min, 15 min, 1 hour, etc.) and \"false\" in other cases.\n\n\nUsage\n\n\nBars.IsIntraday\n\n\n\n\nExample\n\n\nif(Bars.IsIntraday) {\n    Print(\nTimeFrame is Intraday.\n);\n} else {\n    Print(\nTimeFrame is not Intraday.\n);\n}\n\n\n\n\nBars.PercentComplete\n\n\nDescription\n\n\nBars.PercentComplete outputs the value that displays what percentage a bar has already completed. A bar with a period of 10 minutes has completed 50% after 5 minutes.\n\n\nFor non-time-based charts (Kagi, LineBreak, Renko, Range, P\nF etc.) this will output 0 during backtesting.\n\n\nReturn Value\n\n\ndouble\n\n\nA percentage value; 30% will be outputted as 0.3\n\n\nUsage\n\n\nBars.PercentComplete\n\n\nMore Information\n\n\nWith [\nOnBarUpdate()\n] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnBarUpdate() you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\n// A 60 minute chart is looked at from an intraday perspective\n// every 5 minutes before the current bar closes\n// an acoustic signal shall be played\n// 55 min. equals 92%\nbool remind = false;\nprotected override void OnBarUpdate()\n{\nif (FirstTickOfBar) remind = true;\nif (remind \n Bars.PercentComplete \n= 0.92)\n{\nremind = false;\nPlaySound(\nAlert1\n);\n}\n}\n\n\n\n\nBars.SessionBegin\n\n\nDescription\n\n\nBars.SessionBegin outputs the date and time for the beginning of the current trading session.\n\n\nDate and time for the beginning of the current trading session will be displayed correctly when the function is used on a bar that has occurred in the past.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionBegin\n\n\nMore Information\n\n\nThe time for the returned value will equal the starting time defined in the Market Escort for the specified exchange. The value itself is set within the Instrument Escort and can be called up in AgenaScript using the function [\nInstrument.Exchange\n] .\n\n\n\n\nExample\n\n\nPrint(\nThe currently running trading session started at \n + Bars.SessionBegin );\n\n\n\n\nBars.SessionEnd\n\n\nDescription\n\n\nBars.SessionEnd outputs the time for the end of the currently running trading session.\nDate and time for the end of the current trading session will, in this case, also be outputted correctly when the function is used on a previous bar.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionEnd\n\n\nMore Information\n\n\nThe time for the returned value will correlate with the end time of the trading session defined in the Market Escort for the exchange. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the [\nInstrument.Exchange\n] function.\n\n\n\n\nExample\n\n\nPrint(\nThe current trading session will end at \n + Bars.SessionEnd);\n\n\n\n\nBars.SessionNextBegin\n\n\nDescription\n\n\nBars.SessionNextBegin outputs the date and time for the start of the next trading session.\nDate and time for the next session will be correctly outputted when the function is used on a bar in the past.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionNextBegin\n\n\nMore Information\n\n\nThe time for the returned value will correlate to the value displayed in the MarketEscort. The value can be set within the Instrument Escort and can be called up using the [\nInstrument.Exchange\n] function.\n\n\n\n\nExample\n\n\nPrint(\nThe next trading session starts at \n + Bars.SessionNextBegin);\n\n\n\n\nBars.SessionNextEnd\n\n\nDescription\n\n\nBars.SessionNextEnd outputs the date and time for the end of the next session.\nSee [\nProperties\n] for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionNextEnd\n\n\nMore Information\n\n\nThe time for the returned value will correlate with the value specified within the MarketEscort. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the [\nInstrument.Exchange\n] function.\n\n\n\n\nExample\n\n\nPrint(\nThe next trading session ends at \n + Bars.SessionNextEnd);\n\n\n\n\nBars.TickCount\n\n\nDescription\n\n\nBars.TickCount outputs the total numbers of ticks contained within a bar.\n\n\nMore information can be found in [\nProperties\n] of bars.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType int\n\n\nUsage\n\n\nBars.TickCount\n\n\nMore Information\n\n\nWith [\nOnBarUpdate()\n] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnBarUpdate(), you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\nPrint(\nThe current bar consists of \n + Bars.TickCount + \n Ticks.\n);\n\n\n\n\nBars.TimeFrame\n\n\nDescription\n\n\nBars.TimeFrame outputs the timeframe object containing information regarding the currently used timeframe.\n\n\nMore information can be found here: [\nProperties\n]\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType ITimeFrame\n\n\nUsage\n\n\nBars.TimeFrame\n\n\nMore Information\n\n\nFor more information about timeframe objects please see [\nTimeFrame\n].\n\n\nWith [\nOnBarUpdate()\n] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnBarUpdate(),you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\n//Usage within a 30 minute chart\nTimeFrame tf = (TimeFrame) Bars.TimeFrame;\nPrint(Bars.TimeFrame); // outputs \n30 Min\n\nPrint(tf.Periodicity); // outputs \nMinute\n\nPrint(tf.PeriodicityValue); // outputs \n30\n\n\n\n\n\nBars.TotalTicks\n\n\nDescription\n\n\nBars.TotalTicks outputs the total number of ticks from the moment the function is called up.\n\n\nMore information can be found here: [\nProperties\n].\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType int\n\n\nUsage\n\n\nBars.TotalTicks\n\n\nMore Information\n\n\nThe data type int has a positive value range of 2147483647. When you assume 10 ticks per second, there will be no overlaps within 2 trading months with a daily runtime of 24 hours.\n\n\nWith [\nOnBarUpdate()\n] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnBarUpdate(), you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\nPrint\n(\"The total amount of ticks is \" + Bars.TotalTicks);\n\n\nData Series\n\n\nDescription\n\n\nData series are interpreted as freely usable data storage containers for your programs. Additionally, they an integrated component of AgenaTrader that saves the price changes for individual bars. We will be focusing on the latter function here.\nIn the following section, the concept of data series will be explained in detail and understandably. All price data for the individual bars are organized and saved within data series.\nThe following are available:\n\n\nOpen\n \nOpens\n\n\nHigh\n \nHighs\n\n\nLow\n \nLows\n\n\nClose\n \nCloses\n\n\nMedian\n \nMedians\n\n\nTypical\n \nTypicals\n\n\nWeighted\n \nWeighteds\n\n\nTime\n \nTimes\n\n\nTimeFrame\n \nTimeFrames\n\n\nVolume\n \nVolumes\n\n\nOpen\n\n\nDescription\n\n\nOpen is a [\nDataSeries\n][\nData series\n] of the type [\nDataSeries\n], in which the historical opening prices are saved.\n\n\nParameter\n\n\nBarsAgo Index Value (see [\nBars\n])\n\n\nUsage\n\n\nOpen\nOpen[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of [\nCalculateOnBarClose\n].\n\n\nExample\n\n\n// Opening price for the current period\nPrint(Time[0] + \n \n + Open[0]);\n// Opening price for the bars of 5 periods ago\nPrint(Time[5] + \n \n + Open[5]);\n// Current value for the SMA 14 that is based on the opening prices (rounded)\nPrint(\nSMA(14) calculated using the opening prices: \n + Instrument.Round2TickSize(SMA(Open, 14)[0]));\n\n\n\n\nOpens\n\n\nDescription\n\n\nOpens is an array of data series that contains all open data series.\n\n\nThis array is only useful or meaningful for indicators or strategies that use multiple data from multiple timeframes.\nA new entry is entered into the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nOpens[0] The open data series of the chart timeframe\nOpens[1] The open data series of all bars in a daily timeframe\nOpens[2] The open data series of all bars in a weekly timeframe\n\n\nOpens[0][0] is equivalent to Open[0].\n\n\nIn addition, please see [\nMultiBars\n] for more information.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within the data series (see [\nBars\n])\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nOpens[int barSeriesIndex]\nOpens[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example: [\nMultibars\n][\nMultiBars\n].\n\n\nHigh\n\n\nDescription\n\n\nHigh is a \n[DataSerie][\nData series\n]s\n of the type [\nDataSeries\n], in which the historical high prices are saved.\n\n\nParameter\n\n\nbarsAgo IndexValue (see [\nBars\n])\n\n\nUsage\n\n\nHigh\nHigh[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of [\nCalculateOnBarClose\n].\n\n\nExample\n\n\n// High values of the current period\nPrint(Time[0] + \n \n + High[0]);\n// High values of the bar from 5 periods ago\nPrint(Time[5] + \n \n + High[5]);\n// the current value for the SMA 14 calculated on the basis of the high prices\nPrint(\nSMA(14) Calculated using the high prices: \n + Instrument.Round2TickSize(SMA(High, 14)[0]));\n\n\n\n\nHighs\n\n\nDescription\n\n\nHighs is an array of [\nDataSeries\n][1] that contains all high data series.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new time unit is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nHighs[0] the high data series of the chart timeframe\nHighs[1] the high data series of all bars in a daily timeframe\nHighs[2] the high data series of all bars in a weekly timeframe\n\n\nHighs[0][0] is equivalent to High[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within the data series (see [\nBars\n])\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nHighs[int barSeriesIndex]\nHighs[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nPlease see examples under [\nMultibars\n][\nMultiBars\n].\n\n\nLow\n\n\nDescription\n\n\nLow is a [\nDataSeries\n][\nData series\n] of the type [\nDataSeries\n], in which the historical low prices are saved.\n\n\nParameter\n\n\nbarsAgo IndexValue (see [\nBars\n])\n\n\nUsage\n\n\nLow\nLow[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of [\nCalculateOnBarClose\n].\n\n\nExample\n\n\n// Lowest value of the current period\nPrint(Time[0] + \n \n + Low[0]);\n// Lowest value of the bar from 5 periods ago\nPrint(Time[5] + \n \n + Low[5]);\n// The current value for the SMA 14 calculated on the basis of the low prices (smoothed)\nPrint(\nSMA(14) calculated using the high prices: \n + Instrument.Round2TickSize(SMA(Low, 14)[0]));\n\n\n\n\nLows\n\n\nDescription\n\n\nLows is an array of [\nDataSeries\n][1] that contains all [\nLow\n] data series.\n\n\nThis array is only of value to indicators or strategies that use data from multiple time units.\n\n\nA new entry is added whenever a new time unit is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nLows[0] the low data series for the chart timeframe\nLows[1] the low data series for all bars in a daily timeframe\nLows[2] the low data series for all bars in a weekly timeframe\n\n\nLows[0][0] is equivalent to Low[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nLows[int barSeriesIndex]\nLows[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example [\nMultibars\n][\nMultiBars\n].\n\n\nClose\n\n\nDescription\n\n\nClose is a [\nDataSeries\n][\nData series\n] of the type [\nDataSeries\n], in which the historical closing prices are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see [\nBars\n])\n\n\nUsage\n\n\nClose\nClose[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nIndicators are usually calculated using the closing prices.\n\n\nExample\n\n\n// Closing price of the current period\nPrint(Time[0] + \n \n + Close[0]);\n// Closing price of the bar from 5 periods ago\nPrint(Time[5] + \n \n + Close[5]);\n// Current value for the SMA 14 based on the closing prices\nPrint(\nSMA(14) calculated using the closing prices: \n + Instrument.Round2TickSize(SMA(Close, 14)[0]));\n// Close does not need to be mentioned since it is used by default\nPrint(\nSMA(14) calculated using the closing prices: \n + Instrument.Round2TickSize(SMA(14)[0]));\n\n\n\n\nCloses\n\n\nDescription\n\n\nCloses is an array of [\nDataSeries\n][1] that contains all [\nLow\n] data series.\n\n\nThis array is only of importance to indicators or strategies that use data from multiple time units.\n\n\nA new entry is added to the array whenever a timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nCloses[0] the close data series of the chart timeframe\nCloses[1] the close data series of all bars in a daily timeframe\nCloses[2] the close data series of all bars in a weekly timeframe\n\n\nCloses[0][0] is equivalent to Close[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nCloses[int barSeriesIndex]\nCloses[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example [\nMultibars\n][\nMultiBars\n].\n\n\nMedian\n\n\nDescription\n\n\nMedian is a [\nDataSeries\n][\nData series\n] of the type [\nDataSeries\n], in which the historical median values are saved.\n\n\nThe median price of a bar is calculated using (high + low) / 2\n\n\nSee [\nTypical\n] \n [\nWeighted\n].\n\n\nParameter\n\n\nbarsAgo Index value (see [\nBars\n])\n\n\nUsage\n\n\nMedian\nMedian[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nFurther information about median, typical und weighted:\n[\nhttp://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html\n]\n\n\nExample\n\n\n// Median price for the current period\nPrint(Time[0] + \n \n + Median[0]);\n// Median price of the bar from 5 periods ago\nPrint(Time[5] + \n \n + Median[5]);\n// Current value for the SMA 14 calculated using the median prices\nPrint(\nSMA(14) calculated using the median prices: \n + Instrument.Round2TickSize(SMA(Median, 14)[0]));\n\n\n\n\nMedians\n\n\nDescription\n\n\nMedians is an array of [\nDataSeries\n][1] that contains all [\nMedian\n] data series.\n\n\nThis array is only of value to indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new time frame is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nMedians[0] the median data series of the chart timeframe\nMedians[1] the median data series of all bars in a daily timeframe\nMedians[2] the median data series of all bars in a weekly timeframe\n\n\nMedians[0][0] is equivalent to Medians[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nMedians[int barSeriesIndex]\nMedians[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nFurther information on median: http://www.investopedia.com/terms/m/median.asp\n\n\nExample\n\n\nSee example in [\nMultibars\n][\nMultiBars\n].\n\n\nTypical\n\n\nDescription\n\n\nTypical is a \nDataSeries\n of the type [\nDataSeries\n], in which the historical typical values are saved.\n\n\nThe typical price of a bar is calculated using (high + low + close) / 3.\n\n\nSee [\nMedian\n] and [\nWeighted\n].\n\n\nParameter\n\n\nbarsAgo Index value (see [\nBars\n])\n\n\nUsage\n\n\nTypical\nTypical[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nFurther information on typical: \nhttps://technicianapp.com/resources/typical-price/\n\n\nExample\n\n\n// Typical price for the current period\nPrint(Time[0] + \n \n + Typical[0]);\n// Typical price of the bar from 5 periods ago\nPrint(Time[5] + \n \n + Typical[5]);\n// Current value for the SMA 14 calculated using the typical price\nPrint(\nSMA(14) calculated using the typical price: \n + Instrument.Round2TickSize(SMA(Typical, 14)[0]));\n\n\n\n\nTypicals\n\n\nDescription\n\n\nTypicals is an array of \nDataSeries\n that contains all [\nTypical\n] data series.\n\n\nThis array is only of value to indicators and strategies that make use of multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTypicals[0] the typical data series of the chart timeframe\nTypicals[1] the typical data series of all bars in a daily timeframe\nTypicals[2] the typical data series of all bars in a weekly timeframe\n\n\nTypicals[0][0] is equivalent to Typicals[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value of the various timeframes\n\n\nUsage\n\n\nTypicals[int barSeriesIndex]\nTypicals[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example [\nMultibars\n][\nMultiBars\n].\n\n\nWeighted\n\n\nDescription\n\n\nWeighted is a [\nDataSeries\n][\nData series\n] of the type [\nDataSeries\n], in which the historical weighted values are saved.\n\n\nThe weighted price of a bar is calculated using the formula (high + low + 2*close) / 4 and then weighted on the closing price.\n\n\nSee also [\nMedian\n] and [\nTypical\n].\n\n\nParameter\n\n\nbarsAgo Index value (see [\nBars\n])\n\n\nUsage\n\n\nWeighted\n\n\nWeighted[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nInformation regarding weighted: http://www.stock-trading-infocentre.com/pivot-points.html\n\n\nExample\n\n\n// Weighted price for the current period\nPrint(Time[0] + \n \n + Weighted[0]);\n// Weighted price of the bar from 5 periods ago\nPrint(Time[5] + \n \n + Weighted[5]);\n// Current value for the SMA 14 using the weighted price\nPrint(\nSMA(14) calculated using the weighted price: \n + Instrument.Round2TickSize(SMA(Weighted, 14)[0]));\n\n\n\n\nWeighteds\n\n\nDescription\n\n\nWeighteds is an array of [\nDataSeries\n][1] that contains all [\nWeighted\n] data series.\n\n\nThe array is only of value for indicators and strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nWeighteds[0] the weighted data series of the chart timeframe\nWeighteds[1] the weighted data series of all bars in a daily timeframe\nWeighteds[2] the weighted data series of all bars in a weekly timeframe\n\n\nWeighteds[0][0] is equivalent to Weighteds[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nWeighteds[int barSeriesIndex]\nWeighteds[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example under [\nMultibars\n][\nMultiBars\n].\n\n\nTime\n\n\nDescription\n\n\nTime is a [\nDataSeries\n][\nData series\n] of the type [\nDateTimeSeries\n], in which the timestamps of the individual bars are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see [\nBars\n])\n\n\nUsage\n\n\nTime\nTime[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\n// Timestamp of the current period\nPrint(Time[0]);\n// Timestamp of the bar from 5 periods ago\nPrint(Time[5]);\n\n\n\n\nTimes\n\n\nDescription\n\n\nTimes is an array of \nDataSeries\n that contains all [\nTime\n] data series.\n\n\nThis array is only of value to indicators and strategies that make use of multiple timeframes.\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTimes[0] the time data series of the chart timeframe\nTimes[1] the time data series of all bars in a daily timeframe\nTimes[2] the time data series of all bars in a weekly timeframe\n\n\nTimes[0][0] is equivalent to Times[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nTimes[int barSeriesIndex]\nTimes[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example [\nMultibars\n][\nMultiBars\n].\n\n\nVolume\n\n\nDescription\n\n\nVolume is a [\nDataSeries\n][\nData series\n] of the type [\nDataSeries\n], in which the historical volume information is saved.\n\n\nParameter\n\n\nbarsAgo Index value (see [\nBars\n])\n\n\nUsage\n\n\nVolume\n\n\nVolume[\nint\n barsAgo]\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nThe value returned by the [\nVOL()\n] indicator is identical with the volume described here;\nfor example, Vol()[3] will have the same value as Volume[3].\n\n\nExample\n\n\n// Volume for the current period\nPrint(Time[0] + \n \n + Volume[0]);\n// Volume of the bar from 5 periods ago\nPrint(Time[5] + \n \n + Volume[5]);\n// Current value for the SMA 14 calculated using the volume\nPrint(\nSMA(14) calculated using the volume: \n + Instrument.Round2TickSize(SMA(Volume, 14)[0]));\n\n\n\n\nVolumes\n\n\nDescription\n\n\nVolumes is an array of \nDataSeries\n that contains all [\nVolume\n] data series.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nVolumes[0] the volume data series of the chart timeframe\nVolumes[1] the volume data series of all bars in the daily timeframe\nVolumes[2] the volume data series of all bars in the weekly timeframe\n\n\nVolumes[0][0] is equivalent to Volumes[0].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\n\n\nbarSeriesIndex Index value of the various timeframes\n\n\nUsage\n\n\nVolumes[int barSeriesIndex]\nVolumes[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property [\nCalculateOnBarClose\n].\n\n\nExample\n\n\nSee example [\nMultibars\n][\nMultiBars\n].\n\n\nTimeFrame\n\n\nDescription\n\n\nTimeFrame is a timeframe object.\n\n\nUsage\n\n\nTimeFrame\n\n\n\n\nTimeFrames\n\n\nDescription\n\n\nTimeFrames is an array of timeframe objects that contains a timeframe object for each individual bar object.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTimeFrames [0] Timeframe of the primary data series (chart timeframe)\nTimeFrames [1] \nPrint\n(TimeFrames[1]); // returns \"1 Day\"\nTimeFrames [2] \nPrint\n(TimeFrames[2]); // returns \"1 Week\"\n\n\nTimeFrames [0] is equivalent to [\nTimeFrame\n].\n\n\nSee [\nMultiBars\n].\n\n\nParameter\n\n\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nTimeFrames [int barSeriesIndex]\n\n\n\n\nExample\n\n\nif (BarsInProgress == 0 \n CurrentBar == 0)\nfor (int i = BarsArray.Count-1; i \n= 0; i--)\nPrint(\nThe Indicator \n + this.Name + \n uses Bars of the Timeframe \n + TimeFrames[i]);\n\n\n\n\nInstruments\n\n\nThe term \"instrument\" denotes a tradable value such as a stock, ETF, future etc.\n\n\nAn instrument has various properties that can be used in AgenaScripts created by the user:\n\n\nInstrument.Compare\n\n\nInstrument.Currency\n\n\nInstrument.Digits\n\n\nInstrument.ETF\n\n\nInstrument.Exchange\n\n\nInstrument.Expiry\n\n\nInstrument.InstrumentType\n\n\nInstrument.Name\n\n\nInstrument.PointValue\n\n\nInstrument.Round2TickSize\n\n\nInstrument.Symbol\n\n\nInstrument.TickSize\n\n\nWith the \nOnBarUpdate()\n method you can use any properties you wish without having to test for a null reference.\nAs soon as the \nOnBarUpdate()\n function is called up by AgenaScript, an object will become available. If you wish to use these properties outside of \nOnBarUpdate()\n, you should first perform a test for null references using \nif\n (Bars != \nnull\n)\n\n\nInstrument.Compare\n\n\nDescription\n\n\nThe Instrument.Compare function compares two market prices whilst taking into account the correct number of decimal points. The smallest possible price change is displayed by the value TickSize. This function simplifies the otherwise time-consuming comparison using floating-point operations.\n\n\nParameter\n\n\ndouble value1\ndouble value2\n\n\nReturn value\n\n\nType int\n\n\n1 - Value1 is bigger than value2\n-1 - Value1 is smaller than value2\n0 - Value1 and value2 are equal\n\n\nUsage\n\n\nInstrument.Compare(double Value1, double Value2)\n\n\n\n\nMore Information\n\n\nBe aware this function compares prices based on TickSize. If the ticksize of your instrument is 0.01 these prices will be rounded and compared. If you want regular comparation of two numbers, you should use  operator greater than (\n) and smaller than (\n).\n\n\nIf the tick size is 0,00001 \u2013 as it usually is with FX values \u2013 then the following will be displayed:\n\n\nCompare(2, 1.99999) a 1, meaning 2 is bigger than 1.99999\nCompare(2, 2.000001) a 0, meaning the values are equal\nCompare(2, 1.999999) a 0, meaning the values are equal\nCompare(2, 2.00001) a -1, meaning 2 is smaller than 2.00001\n\n\nExample\n\n\nPrint(Instrument.Compare(2, 1.999999));\n\n\n\n\nInstrument.Currency\n\n\nDescription\n\n\nInstrument.Currency outputs a currency object that contains the corresponding currency in which the instrument is traded.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nA constant of the type \"public enum currencies\"\n\n\nUsage\n\n\nInstrument.Currency\n\n\nMore Information\n\n\nThe common currencies are: AUD, CAD, EUR, GBP, JPY or USD.\n\n\nExample\n\n\nPrint(Instrument.Name + \n is traded in \n + Instrument.Currency);\n\n\n\n\nInstrument.Digits\n\n\nDescription\n\n\nInstrument.Digits outputs the number of decimal points in which the market price of the instrument is traded.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nint Digits\n\n\nUsage\n\n\nInstrument.Digits\n\n\nMore Information\n\n\nStocks are usually traded to two decimal points. Forex can be traded (depending on the data provider) with 4 or 5 decimal places.\n\n\nThis function is especially useful when formatting the output of various instruments that need rounding. Also see [\nTickSize\n] and [\nInstrument.Round2Ticks\n][\nInstrument.Round2TickSize\n].\n\n\nMore information can be found here: [\nFormatting of Numbers\n].\n\n\nExample\n\n\nPrint(\nThe value of \n +Instrument.Name + \n is noted with a precision of \n + Instrument.Digits +\n Decimal points.\n);\n\n\n\n\nInstrument.ETF\n\n\nDescription\n\n\nInstrument.ETF is used to differentiate between a stock and an ETF. This is necessary since ETFs are considered to be \u201estocks\" by some exchanges.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nType bool\n\n\nUsage\n\n\nInstrument.ETF\n\n\nMore Information\n\n\nWhat is an ETF?\n\n\nWikipedia: [\nhttp://de.wikipedia.org/wiki/Exchange-traded_fund\n]\n\n\nExample\n\n\nif (Instrument.InstrumentType == InstrumentType.Stock)\nif (Instrument.ETF)\nPrint(\nThe value is an ETF.\n);\nelse\nPrint(\nThe value is a stock.\n);\n\n\n\n\nInstrument.Exchange\n\n\nDescription\n\n\nInstrument.Exchange outputs the description/definition of the current exchange for the current instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nAn exchange object of the type \"public enum exchanges\"\n\n\nUsage\n\n\nInstrument.Exchange\n\n\nMore Information\n\n\nAn overview of various exchange: \nhttps://en.wikipedia.org/wiki/List_of_stock_exchanges\n\n\nExample\n\n\nPrint(\nThe instrument \n + Instrument.Name +\n is traded on the \n + Instrument.Exchange + \n exchange.\n);\n\n\n\n\nInstrument.Expiry\n\n\nDescription\n\n\nInstrument.Expiry outputs the date (month and year) of the expiry of a financial instrument. Only derivative instruments such as options or futures will have an expiry date.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nFor instruments without an expiry date the returned value is set to DateTime.MaxValue(= 31.12.9999 23.59:59)\n\n\nUsage\n\n\nInstrument.Expiry\n\n\nMore Information\n\n\nThe expiry date (expiry) can also be seen within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\nThe instrument \n + Instrument.Name +\n will expire on \n + Instrument.Expiry);\n\n\n\n\nInstrument.InstrumentType\n\n\nDescription\n\n\nInstrument.InstrumentType outputs a type object of the trading instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nObject of the type \"public enum instrument\"\n\n\nUsage\n\n\nInstrument.InstrumentType\n\n\nMore Information\n\n\nPotential values are: future, stock, index, currency, option, CFD and unknown.\n\n\nThere is no ETF type. ETFs are considered to be of the type \"stock\" \u2013 see [\nInstrument.ETF\n].\n\n\nThe instrument type can also be viewed within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\nThe instrument \n + Instrument.Name + \n is of the type \n + Instrument.InstrumentType);\n\n\n\n\nInstrument.Name\n\n\nDescription\n\n\nInstrument.Name outputs the name/description of the trading instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nType string\n\n\nUsage\n\n\nInstrument.Name\n\n\nMore Information\n\n\nThe instrument name can also be seen within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\nThe currently loaded instrument inside the chart is named \n + Instrument.Name);\n\n\n\n\nInstrument.PointValue\n\n\nDescription\n\n\nInstrument.PointValue outputs the monetary value for a full point movement of the instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\ndouble \u2013 point value\n\n\nUsage\n\n\nInstrument.PointValue\n\n\nMore Information\n\n\nExample for various point values\n (per amount, CFD, futures contract, lot etc.)\n\n\nStock: generally 1.00 Euro or 1.00 USD.\nEUR/USD: 100,000 USD\nDAX future: 25.00 Euro\n\n\nTick Value\n\n\nThe tick value can be calculated by multiplying the point value with the tick size.\n\n\nFor example, the E-mini S\nP 500 has a point value of $50. The tick size equals 0.25. This means that there are 4 ticks in one full point for the E-mini S\nP 500.\nSince 50 * 0.25 = 50/4 this means that the tick value is $12.50.\n\n\nThe point value can also be viewed within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\nWhen \n + Instrument.Name + \n rises for one full point then this is equal to \n + Instrument.PointValue + \n \n + Instrument.Currency);\n\n\n\n\nInstrument.Round2TickSize\n\n\nDescription\n\n\nThe function Instrument.Round2TickSize rounds the supplied market price to the smallest value divisible by the tick size of the instrument.\n\n\nParameter\n\n\ndouble \u2013 market value\n\n\nReturn value\n\n\ndouble\n\n\nUsage\n\n\nInstrument.Round2TickSize(double MarketPrice)\n\n\n\n\nMore Information\n\n\nThe number of decimal places to which the price is rounded depends on the instrument.\nIf, for example, an instrument is a stock, then the rounding will be performed to 2 decimal places. For a Forex instrument, it may be carried out to 4 or 5 decimal places.\n\n\nSee [\nTickSize\n] and [\nInstrument.Digits\n].\n\n\nExample of professional [\nFormatting\n][\nFormatting of Numbers\n].\n\n\nExample\n\n\ndouble Price = 12.3456789;\nPrint(Price + \n rounded for a \n + Instrument.Name + \n valid value is \n + Instrument.Round2TickSize(Price));\n\n\n\n\nInstrument.Symbol\n\n\nDescription\n\n\nInstrument.Symbol outputs the symbol that identifies the trading instrument within AgenaTrader. Depending on the symbol, the mappings for the various data feed providers and brokers will be managed in different ways.\n\n\nParameter\n\n\nnone\n\n\nReturn value\n\n\nType string\n\n\nUsage\n\n\nInstrument.Symbol\n\n\nMore Information\n\n\nBy using symbols, identical stocks being traded on different exchanges can be identified and separated from each other. The symbol BMW.DE is the BMW stock on the XETRA exchange. BMW.CFG is the CFD for the BMW stock.\n\n\nThe instrument symbol can also be viewed within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\nThe instrument currently loaded within the chart has the symbol: \n + Instrument.Symbol);\n\n\n\n\nInstrument.TickSize\n\n\nDescription\n\n\nThe tick size is the smallest measurable unit that a financial instrument can move. This is usually called 1 tick.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\ndouble\n\n\nUsage\n\n\nInstrument.TickSize or simply TickSize\n\n\nMore Information\n\n\nThe keyword [\nTickSize\n] is equivalent to Instrument.TickSize. Both information requests will produce the same value and are thus interchangeable.\n\n\nExample\n\n\nStock: 0.01\nES future: 0.25\nEUR/USD: 0.00001\n\n\nSee [\nInstrument.PointValue\n] and [\nInstrument.Digits\n].\n\n\nExamples of professional [\nFormatting\n][\nFormatting of Numbers\n].\n\n\nExample\n\n\nPrint(\nThe value of \n + Instrument.Name + \n can change for a minimum of \n + Instrument.TickSize + \n Tick(s).\n);\n\n\n\n\nCollections\n\n\nDrawObjects\n\n\nDescription\n\n\nDrawObjects is a collection containing all drawing objects within the chart. The property hold all drawings which were generated by the script.\nThe index for DrawObjects is the explicit name for the drawing object (string tag).\n\n\nUsage\n\n\nDrawObjects [string tag]\n\n\nExample\n\n\nNote:\n To be able to use the interface definitions you must use the using method.\n\n\nusing AgenaTrader.Plugins;\n// Output number of drawing objects within the chart and their tags\nPrint(\nThe chart contains \n + DrawObjects.Count + \n drawing objects.\n);\nfor each (IDrawObject draw in DrawObjects) Print(draw.Tag);\n//Draw a black trend line...\nDrawLine(\nMyLine\n, true, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 3);\n// ... and change the color to red\nITrendLine line = (ITrendLine) DrawObjects[\nMyLine\n];\nif (line != null) line.Pen.Color = Color.Red;\n// Set all lines within the chart to a line strength of 3,\n// and lock it so that it cannot be edited or moved\nforeach (IDrawObject draw in DrawObjects)\nif (draw is IVerticalLine)\n{\nIVerticalLine vline = (IVerticalLine) draw;\nvline.Locked = true;\nvline.Editable = false;\nvline.Pen.Width = 3;\n}\n\n\n\n\nInput\n\n\nDescription\n\n\nInput is a [\nDataSeries\n] object in which the input data for an indicator or strategy is stored.\n\n\nIf the indicator is used without any explicit instructions for the input data, then the closing price for the current market prices will be used.\n\n\nWhen calling up the SMA(20) the smoothing average is calculated on the basis of the closing prices for the current chart price data (this is equivalent to SMA(close,20).\n\n\nInput[0] = Close[0].\n\n\nWhen calling up the SMA(high, 20) the high price values are loaded and used for the calculation of the smoothing average.\n\n\nInput[0] = High[0].\n\n\nThis way you can select which data series should be used for the calculation of the indicator.\n\n\ndouble\n d = \nRSI\n(\nSMA\n(20), 14, 3)[0]; calculates the 14 period RSI using the SMA(20) as the input data series.\nInput[0] = SMA(20)[0].\n\n\nUsage\n\n\nInput\nInput[int barsAgo]\n\n\n\n\nExample\n\n\nPrint(\nThe input data for the indicators are \n + Input[0]);\n\n\n\n\nLines\n\n\nDescription\n\n\nLines is a collection that contains all [\nLine\n] objects of an indicator.\n\n\nWhen a line object is added to the indicator using the [\nAdd()\n] method, this line is automatically added to the \"lines\" collection.\n\n\nThe order of the add commands determines how these lines are sorted. The first information request of Add() will create Lines[0], the next information request will be Lines[1] etc.\n\n\nSee [\nPlots\n].\n\n\nUsage\n\n\nLines[int index]\n\n\n\n\nExample\n\n\n// Add \nusing System.Drawing.Drawing2D;\n for DashStyle\nprotected override void Initialize()\n{\nAdd(new Line(Color.Blue, 70, \nUpper\n)); // saves into Lines[0]\nAdd(new Line(Color.Blue, 30, \nLower\n)); // saves into Lines[1]\n}\nprotected override void OnBarUpdate()\n{\n// When the RSI is above 70, properties of the lines will be changed\nif (RSI(14 ,3) \n= 70)\n{\nLines[0].Width = 3;\nLines[0].Color = Color.Red;\nLines[0].DashStyle = DashStyle.Dot;\n}\nelse\n{\nLines[0].Width = 1;\nLines[0].Color = Color.Blue;\nLines[0].DashStyle = DashStyle.Solid;\n}\n}\n\n\n\n\nPlotColors\n\n\nDescription\n\n\nPlotColors is a collection that contains all color series of all plot objects.\n\n\nWhen a plot is added using the [\nAdd()\n] method it automatically creates a color series object and is added to the PlotColors collection.\n\n\nThe order of the add commands determines how the plot colors are sorted. The first information request of Add() will create PlotColors[0], the following information request will create PlotColors[1] etc.\n\n\nUsage\n\n\nPlotColors[int PlotIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nMore information regarding the collection class:\n[\nhttp://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx\n]\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing AgenaTrader.API;\nnamespace AgenaTrader.UserCode\n{\n[Description(\nPlotColor Demo\n)]\npublic class PlotColorsDemo : UserIndicator\n{\npublic DataSeries SMA20 { get {return Values[0];} }\npublic DataSeries SMA50 { get {return Values[1];} }\npublic DataSeries SMA100 { get {return Values[2];} }\nprivate Pen pen;\nprotected override void Initialize()\n{\n// Set line strength (width) to 4\npen = new Pen(Color.Empty, 4);\n// Add three plots with the defined line strength to the chart\nAdd(new Plot(pen, PlotStyle.Line, \nSMA20\n )); //attached to PlotColors[0]\nAdd(new Plot(pen, PlotStyle.Line, \nSMA50\n )); //attached to PlotColors[1]\nAdd(new Plot(pen, PlotStyle.Line, \nSMA100\n)); //attached to PlotColors[2]\nOverlay = true;\n}\nprotected override void OnBarUpdate()\n{\n// Add values to the three plots\nSMA20.Set (SMA(20) [0]);\nSMA50.Set (SMA(50) [0]);\nSMA100.Set(SMA(100)[0]);\n// Change colors depending on the trend\nif (Rising(Close))\n{\nPlotColors[0][0] = Color.LightGreen;\nPlotColors[1][0] = Color.Green;\nPlotColors[2][0] = Color.DarkGreen;\n}\nelse if (Falling(Close))\n{\nPlotColors[0][0] = Color.LightSalmon;\nPlotColors[1][0] = Color.Red;\nPlotColors[2][0] = Color.DarkRed;\n}\nelse\n{\nPlotColors[0][0] = Color.LightGray;\nPlotColors[1][0] = Color.Gray;\nPlotColors[2][0] = Color.DarkGray;\n}\n}\n}\n}\n\n\n\n\nPlots\n\n\nDescription\n\n\nPlots is a collection that contains the plot objects of an indicator.\n\n\nWhen a plot object is added to an indicator using the Add() method, it is also automatically added to the \"plots\" collection.\n\n\nThe order of the add commands determines how the plots are sorted. The first Add() information request will create Plots[0], the following information request will create Plots[1] etc.\n\n\nSee [\nLines\n].\n\n\nUsage\n\n\nPlots[int index]\n\n\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Blue, \nMySMA 20\n)); // saved to Plots[0]\n}\nprotected override void OnBarUpdate()\n{\nValue.Set(SMA(20)[0]);\n// If the market price is above the SMA colorize it green, otherwise red\nif (Close[0] \n SMA(20)[0])\n    Plots[0].PlotColor = Color.Green;\nelse\n    Plots[0].PlotColor = Color.Red;\n}\n\n\n\n\nValues\n\n\nDescription\n\n\nValues is a collection that contains the data series objects of an indicator.\n\n\nWhen a plot is added to an indicator using the Add() method, a value object is automatically created and added to the \"values\" collection.\n\n\nThe order of the add commands determines how the values are sorted. The first information request will create Values[0], the next information request will create Values[1] etc.\n\n\nValue\n is always identical to Values[0].\n\n\nUsage\n\n\nValues[int index]\nValues[int index][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe methods known for a collection, Set() Reset() and Count(), are applicable for values.\n\n\nInformation on the class collection:\n[\nhttp://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx\n]\n\n\nExample\n\n\n// Check the second indicator value of one bar ago and set the value of the current indicator value based on it.\nif (Values[1][1] \n High[0] - Low[0])\nValue.Set(High[0] - Low[0]);\nelse\nValue.Set(High[0] - Close[0]);\n\n\n\n\nMultibars\n\n\nDescription\n\n\nAn indicator or a strategy will always have the same underlying timeframe-units as those units being displayed within the chart. The values of an SMA(14) indicator displayed in a 5 minute chart will be calculated based on the last fourteen 5 minute bars. A daily chart, on the other hand, would use the closing prices of the past 14 days in order to calculate this value.\nThe same method applies for your self-programmed indicators. A 5 minute chart will call up the [\nOnBarUpdate()\n] for each 5 minute bar.\nIf you want your self-created indicator to use a different timeframe, this is possible using multibars.\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n[Description(\nMultibar Demo\n)]\n// The indicator requires daily and weekly data\n[TimeFrameRequirements(\n1 Day\n, \n1 Week\n)]\npublic class MultiBarDemo : UserIndicator\n{\nprotected override void InitRequirements()\n\n {\n\n\n\n Add(DatafeedHistoryPeriodicity.Day, 1);\n\n\n\n Add(DatafeedHistoryPeriodicity.Week, 1);\n\n\n\n }\n\n\n\n protected override void Initialize()\n{\nCalculateOnBarClose = true;\n}\nprotected override void OnBarUpdate()\n{\n// The current value for the SMA 14 in a daily timeframe\nPrint(SMA(Closes[1], 14)[0]);\n// Current value for the SMA 14 in a weekly timeframe\nPrint(SMA(Closes[2], 14)[0]);\n}\n}\n}\n\n\n\n\nAdditional Notes\n\n\nWhen using additional timeframes, a further entry with the respective data series for the bars of the new timeframe will be added to the arrays [\nOpens\n], [\nHighs\n], [\nLows\n], [\nCloses\n], [\nMedians\n], [\nTypicals\n], [\nWeighteds\n], [\nTimes\n] and [\nVolumes\n]. The indexing will occur in the order of the addition of the new timeframes.\nCloses[0][0] is equivalent to Close[0].\nCloses[1][0] equals the current closing price for the daily data series\nCloses[2][0] equals the current closing price for the weekly data series\n\n\n\"Closes\" is, of course, interchangeable with Opens, Highs, Lows etc.\n\n\nSee [\nCurrentBars\n], [\nBarsInProgress\n], [\nTimeFrames\n], [\nTimeFrameRequirements\n].\n\n\nAdditional syntax methods are available for multibars:\n\n\n// Declare the variable TF_DAY and define it\nprivate static readonly TimeFrame TF_Day = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\nprivate static readonly TimeFrame TF_Week = new TimeFrame(DatafeedHistoryPeriodicity.Week, 1);\n// The following instruction is identical to double d = Closes[1][0];\ndouble d = MultiBars.GetBarsItem(TF_Day).Close[0];\n// The following instruction is identical to double w = Closes[2][0];\ndouble w = MultiBars.GetBarsItem(TF_Week).Close[0];\n\n\n\n\nCurrentBars\n\n\nDescription\n\n\nCurrentBars is an array of int values that contains the number of \n[CurrentBar]s\n for each bar.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nCurrentBars[0] Current bar for the primary data series (chart timeframe)\nCurrentBars[1] Current bar for the daily bars\nCurrentBars[2] Current bar for the weekly bars\n\n\nCurrentBars[0] is equivalent to [\nCurrentBar\n][CurrentBar].\n\n\nAlso see [\nMultiBars\n].\n\n\nParameter\n\n\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nCurrentBars[int barSeriesIndex]\n\n\n\n\nExample\n\n\n//Ensure that a minimum of 20 bars is loaded\nfor (int i=0; i\nCurrentBars.Count; i++)\nif (CurrentBars[i] \n 20) return;\n\n\n\n\nBarsInProgress\n\n\nDescription\n\n\nWithin a multibars script, multiple bars objects are available. The OnBarUpdate() method\nwill therefore also be called up for every bar within your script. In order to include/exclude events of specific data series, you can use the BarsInProgress method.\n\n\nBarsInProgress is only of value for indicators or strategies that use data from multiple timeframes.\nWith \n[TimeFrameRequirements(\"1 Day\", \"1 Week\")]\n two timeframes will be added to the primary chart timeframe.\n\n\nIf OnBarUpdate() is called up by the primary data series, then BarsInProgress will equal zero. If OnBarUpdate() is called up by the daily bars, then BarsInProgress will equal 1. Weekly bars will have a value of 2.\n\n\nSee [\nMultibars\n][\nMultiBars\n] and [\nCurrentBars\n].\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nBarsInProgress\n\n\nMore Information\n\n\nWithin a script that only works with primary timeframes, the value will always equal zero.\n\n\nExample\n\n\n// To demonstrate the methodology\n// set CalculateOnBarClose=false\nPrint(Time[0] + \n \n + BarsInProgress);\n// Calculate only for the chart timeframe\nprotected override void OnBarUpdate()\n{\nif (BarsInProgress \n 0) return;\n// Logic for the primary data series\n}", 
            "title": "Handling bars and instruments"
        }, 
        {
            "location": "/handling_bars_and_instruments/#handling-bars-and-instruments", 
            "text": "Data is understood as information that is retrieved externally and uploaded to AgenaTrader, or as data series that are created by AgenaScripts.  Further detailed information can be found using the appropriate shortcuts:  Bars (Candles)  Data series  Instruments", 
            "title": "Handling bars and instruments"
        }, 
        {
            "location": "/handling_bars_and_instruments/#bars-candles", 
            "text": "", 
            "title": "Bars (Candles)"
        }, 
        {
            "location": "/handling_bars_and_instruments/#functionality", 
            "text": "A classical indicator calculates one or multiple values using an existing data series.  Data series can be anything from closing prices to daily lows or values of an hourly period etc.  Every period (meaning all candles of one day, one hour etc.) is assigned one or more indicator values.\nThe following example is based on an indicator value, such as with a moving average, for example.\nTo calculate a smoothed moving average, AgenaTrader needs a data series. In this example we will use the closing prices. All closing prices of a bar (candle) that are represented in the chart will be saved in a list and indexed.  The current closing price, meaning the closing price of the bar that is on the right-hand side of the chart, will be assigned an index of 0. The bar to the left of that will have an index of 1 and so on. The oldest bar displayed will have an index value of 500.  Whenever a new bar is added within a session it will become the new index 0; the bar to the left of it, which previously had an index of 0, will become index 1 and so on. The oldest bar will become index 501.\nWithin a script (a self-created program/algorithm) the [ Close ] will be representative for the array (list) of all closing prices.\nThe last closing price is thus  Close [0] ; the closing price previous to this will become  Close [1] , the value before that will become  Close [2]  and the oldest bar will be  Close [501] . The number within the squared brackets represents the index. AgenaTrader allows you to use the \u201ebars ago\" expression for this in general cases.  Obviously, every bar will not only have a closing value but also a  High ,  Low ,  Open ,  Median ,  Typical ,  Weighted ,  Time  and  Volume . Thus, the high of the candle that occurred 10 days ago will be  High [10] , yesterday\u2019s low  Low [1] ...  Important tip:  The previous examples all assume that the calculations will occur at the end of a period. The value of the currently running index is not being taken into consideration.  If you wish to use the values of the currently forming candle then you will need to set the value of  [ CalculateOnBarClose ] to \u201efalse\".  In this case the currently running bar will have the value 0, the bar next to the current bar will have the value 1 and so on. The oldest bar (as in the example above) would now have the value 502.  With close [0] you would receive the most recent value of the last price that your data provider transmitted to AgenaTrader. All values of the bar (high [0], low [0]\u2026) may still change as long as the bar is not yet finished/closed and a new bar has not yet started. Only the open [0] value will not change.", 
            "title": "Functionality"
        }, 
        {
            "location": "/handling_bars_and_instruments/#properties-of-bars", 
            "text": "", 
            "title": "Properties of Bars"
        }, 
        {
            "location": "/handling_bars_and_instruments/#properties-of-bars_1", 
            "text": "\"Bars\" represents a list of all bars (candles) within a chart (see [ Functionality ][ Bars ]).  Bars ( public  IBars Bars) can be used directly in a script and equates to BarsArray [0] (see Bars.GetNextBeginEnd for more information).  The list of bars itself has many properties that can be used in AgenaScript. Properties are always indicated by a dot before the objects (in this case bars, list of candles).  BarsSinceSession  Bars.Count  Bars.FirstBarOfSession  Bars.GetBar  Bars.GetBarsAgo  Bars.GetByIndex  Bars.GetIndex  Bars.GetNextBeginEnd  Bars.GetOpen  Bars.GetHigh  Bars.GetLow  Bars.GetClose  Bars.GetTime  Bars.GetVolume  Bars.Instrument  Bars.IsIntraday  Bars.PercentComplete  Bars.SessionBegin  Bars.SessionEnd  Bars.SessionNextBegin  Bars.SessionNextEnd  Bars.TickCount  Bars.TimeFrame  Bars.TotalTicks  With the  OnBarUpdate()  method you can use any properties you want without having to test for a null reference.\nAs soon as the function  OnBarUpdate()  is called up by AgenaScript, it is assumed that an object is also available. If you wish to use these properties outside of  OnBarUpdate()  then you should first perform a test for null references using  if  (Bars !=  null ).", 
            "title": "Properties of Bars"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barssincesession", 
            "text": "", 
            "title": "BarsSinceSession"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description", 
            "text": "Bars.BarsSinceSession outputs the amount of bars that have occurred since the beginning of the current trading session.  See further [ Properties ] of bars.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value", 
            "text": "Type int Amount of Bars  A value of -1 indicates a problem with referencing the correct session beginning.", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage", 
            "text": "Bars.BarsSinceSession", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#further-information", 
            "text": "Within  OnBarUpdate()  this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnBarUpdate() then you should test for a null reference before executing it. You can test using  if  (Bars!=  null ) .", 
            "title": "Further Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example", 
            "text": "Print ( Since the start of the last trading session there have been  + Bars.BarsSinceSession +  bars. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barscount", 
            "text": "", 
            "title": "Bars.Count"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_1", 
            "text": "Bars.Count gives you the amount of bars in a data series.  See [ Properties ] for additional information.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_1", 
            "text": "Type int Amount of Bars", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_1", 
            "text": "Bars.Count", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information", 
            "text": "The value of  CurrentBar  can only be lesser than or equal to Bars.Count - 1  When you specify how many bars are to be loaded within AgenaTrader, then the value of Bars.Count is equal to this setting. In the following example, Bars.Count would give back a value of 500.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_1", 
            "text": "Print ( There are a total of  + Bars.Count +  bars available. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsfirstbarofsession", 
            "text": "", 
            "title": "Bars.FirstBarOfSession"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_2", 
            "text": "With Bars.FirstBarOfSession you can determine whether the current bar is the first bar of the trading session.  See [ Properties ] of bars for more information.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_2", 
            "text": "Type bool  true : The bar is the first bar of the current trading session false : The bar is not the first bar of the current trading session", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_2", 
            "text": "Bars.FirstBarOfSession", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_1", 
            "text": "With  OnBarUpdate()  this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up, an object will become available.\nIf this property is called up outside of OnBarUpdate() you should test for a null reference using if (Bars != null).", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_2", 
            "text": "if (Bars.FirstBarOfSession)\nPrint ( The current trading session started at  + Time [0]);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetbar", 
            "text": "", 
            "title": "Bars.GetBar"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_3", 
            "text": "Bars.GetBar outputs the first bars (from oldest to newest) that correspond to the specified date/time.  See [ Bars.GetBarsAgo ], [ Bars.GetByIndex ], [ Bars.GetIndex ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter", 
            "text": "Type DateTime", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_3", 
            "text": "Type IBar Bar Object, for the bars corresponding to the timestamp  For a timestamp older than the oldest bar: 0 (null)\nFor a timestamp younger than the newest bar: index of the last bar", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_3", 
            "text": "Bars.GetBar(DateTime time)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_2", 
            "text": "For the indexing of bars please see [ Functionality ][ Bars ]  For more information about using DateTime see [ http://msdn.microsoft.com/de-de/library/system.datetime.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_3", 
            "text": "Print ( The closing price for 01.03.2012 at 18:00:00 was   + Bars.GetBar(new DateTime(2012, 01, 03, 18, 0, 0)).Close);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetbarsago", 
            "text": "", 
            "title": "Bars.GetBarsAgo"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_4", 
            "text": "Bars.GetBarsAgo outputs the index of the first bars (from oldest to newest) that correspond to the specified date/time.  See: [ Bars.GetBar ], [ Bars.GetByIndex ], [ Bars.GetIndex ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_1", 
            "text": "Type DateTime", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_4", 
            "text": "Type int Index of the bar that corresponds to the timestamp  With a timestamp older than the oldest bar: 0 (null)\nWith a timestamp newer than the youngest bar: index of the last bar", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_4", 
            "text": "Bars.GetBarsAgo(DateTime time)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_3", 
            "text": "For more information about indexing please see [ Functionality ][ Bars ]  For more information about using DateTime see [ http://msdn.microsoft.com/de-de/library/system.datetime.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_4", 
            "text": "Print( The bar for 01.03.2012 at 18:00:00 O\u2019clock has an index of   + Bars.GetBarsAgo(new DateTime(2012, 01, 03, 18, 0, 0)));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetclose", 
            "text": "Bars.GetClose(int index) \u2013 see [ Bars.GetOpen ].", 
            "title": "Bars.GetClose"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgethigh", 
            "text": "Bars.GetHigh(int index) \u2013 see [ Bars.GetOpen ].", 
            "title": "Bars.GetHigh"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetbyindex", 
            "text": "", 
            "title": "Bars.GetByIndex"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_5", 
            "text": "Bars.GetByIndex outputs the index for the specified bar object  See  Bars.GetBar ,  Bars.GetBarsAgo ,  Bars.GetIndex .", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_2", 
            "text": "Type int Index", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_5", 
            "text": "Type IBar Bar object for the specified index", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_5", 
            "text": "Bars.GetByIndex (int Index)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_4", 
            "text": "For indexing of bars see [ Functionality ] Bars", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_5", 
            "text": "Print(Close[0] +   and   + Bars.GetByIndex(CurrentBar).Close +   are equal in this example. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetindex", 
            "text": "", 
            "title": "Bars.GetIndex"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_6", 
            "text": "Bars.GetIndex outputs the index of a bar \u2013 you can input either a bar object or a date-time object using this method.  See  Bars.GetBar ,  Bars.GetBarsAgo ,  Bars.GetByIndex .", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_3", 
            "text": "Type IBar bar\nor\nType DateTime", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_6", 
            "text": "Type int The bar index of the specified bar object or DateTime object", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_6", 
            "text": "Bars.GetIndex (IBar bar)\nBars.GetIndex (DateTime dt)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_5", 
            "text": "For more information about indexing see [ Functionality ][ Bars ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_6", 
            "text": "int barsAgo = 5;\nIBar bar = Bars.GetBar(Time[barsAgo]);\nPrint(barsAgo +   and   + Bars.GetIndex(bar) +   are equal in this example. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetlow", 
            "text": "Bars.GetLow(int index) \u2013 see [ Bars.GetOpen ].", 
            "title": "Bars.GetLow"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetnextbeginend", 
            "text": "", 
            "title": "Bars.GetNextBeginEnd"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_7", 
            "text": "Bars.GetNextBeginEnd outputs the date and time for the beginning and end of a trading session.  See  Bars.SessionBegin ,  Bars.SessionEnd ,  Bars.SessionNextBegin ,  Bars.SessionNextEnd .", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_4", 
            "text": "DateTime  time  Date or time for which the data of the following trading session will be scanned/searched.    iBars  bars  Bar object for which the data will be scanned/searched.    int  barsago  Number of days in the past for which the data will be searched/scanned.", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_7", 
            "text": "DateTime session begin\nDateTime session end  Note: \nThe date for the beginning and the end of a trading session are connected components. If the specified date corresponds to the end date of the current trading session then the returned value for the beginning of a trading session may already be in the past. In this case the date for the following trading session cannot be returned.", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_7", 
            "text": "Bars.GetNextBeginEnd(Bars bars, int barsAgo, out DateTime sessionBegin, out DateTime sessionEnd)\nBars.GetNextBeginEnd(DateTime time, out DateTime sessionBegin, out DateTime sessionEnd)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_6", 
            "text": "The two signatures will not necessarily output the same result.\nWhen using the bar signature, the supplied bar will be inspected for its session template association. The beginning and end of the next session will be taken from this template.  When using the time signature, the date and time of the supplied bar will be used to calculate the data for the current and the following sessions.  When using the time signature, a timestamp is transmitted that corresponds exactly to the beginning or the end time of a session.  More information can be found here [ http://msdn.microsoft.com/de-de/library/system.datetime.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_7", 
            "text": "DateTime sessionBegin;\nDateTime sessionEnd;\nprotected override void OnBarUpdate()\n{\nBars.GetNextBeginEnd(Bars, 0, out sessionBegin, out sessionEnd);\nPrint( Session Start:   + sessionBegin +   Session End:   + sessionEnd);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetsessiondate", 
            "text": "", 
            "title": "Bars.GetSessionDate"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_8", 
            "text": "Bars.GetSessionDate provides the date and the time of the start of a particular trading session.  The date and time for the start of the current trading session are also displayed correctly even if the function is used on a bar in the past.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetopen", 
            "text": "", 
            "title": "Bars.GetOpen"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_9", 
            "text": "For reasons of compatibility, the following methods are available.   Bars.GetOpen(int index) outputs the open for the bars referenced with  index .  Bars.GetHigh(int index) outputs the high for the bars referenced with  index .  Bars.GetLow(int index) outputs the low for the bars referenced with  index .  Bars.GetClose(int index) outputs the close for the bars referenced with  index .  Bars.GetTime(int index) outputs the timestamp for the bars referenced with  index .  Bars.GetVolume(int index) outputs the volume for the bars referenced with  index .   Caution : The indexing will deviate from the [ Indexing ][ Bars ] normally used.\nHere, the indexing will begin with 0 for the oldest bar (on the left of the chart) and end with the newest bar on the right of the chart (=Bars.Count-1).  The indexing can easily be recalculated:  private int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnBarClose?1:0));\n}", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_5", 
            "text": "int index (0 .. Bars.Count-1)", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_8", 
            "text": "Type double for GetOpen, GetHigh, GetLow, GetClose and GetVolume  Type DateTime for GetTime", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgettime", 
            "text": "Bars.GetTime(int index) \u2013 see [ Bars.GetOpen ].", 
            "title": "Bars.GetTime"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsgetvolume", 
            "text": "Bars.GetVolume(int index) \u2013 see [ Bars.GetOpen ].", 
            "title": "Bars.GetVolume"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsinstrument", 
            "text": "", 
            "title": "Bars.Instrument"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_10", 
            "text": "Bars.Instrument outputs an instrument object for the trading instrument displayed within the chart.  See [ Properties ] for more information.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_6", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_9", 
            "text": "Type Instrument", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_8", 
            "text": "Bars.Instrument", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_7", 
            "text": "For more information regarding the trading instruments please see [ Instrument ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_8", 
            "text": "// both outputs will provide the same result\nPrint( The currently displayed trading instrument has the symbol:   + Bars.Instrument);\nInstrument i = Bars.Instrument;\nPrint( The currently displayed trading instrument has the symbol   + i.Symbol);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsisintraday", 
            "text": "", 
            "title": "Bars.IsIntraday"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_11", 
            "text": "Bars.IsIntraday returns a boolean which indicates if the TimeFrame is intra-day.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_10", 
            "text": "bool  It returns \"true\" if TimeFrame is intra-day (e.g. 1 min, 15 min, 1 hour, etc.) and \"false\" in other cases.", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_9", 
            "text": "Bars.IsIntraday", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_9", 
            "text": "if(Bars.IsIntraday) {\n    Print( TimeFrame is Intraday. );\n} else {\n    Print( TimeFrame is not Intraday. );\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barspercentcomplete", 
            "text": "", 
            "title": "Bars.PercentComplete"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_12", 
            "text": "Bars.PercentComplete outputs the value that displays what percentage a bar has already completed. A bar with a period of 10 minutes has completed 50% after 5 minutes.  For non-time-based charts (Kagi, LineBreak, Renko, Range, P F etc.) this will output 0 during backtesting.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_11", 
            "text": "double  A percentage value; 30% will be outputted as 0.3", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_10", 
            "text": "Bars.PercentComplete", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_8", 
            "text": "With [ OnBarUpdate() ] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnBarUpdate() you should test for a null reference before executing it. You can test using  if  (Bars !=  null )", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_10", 
            "text": "// A 60 minute chart is looked at from an intraday perspective\n// every 5 minutes before the current bar closes\n// an acoustic signal shall be played\n// 55 min. equals 92%\nbool remind = false;\nprotected override void OnBarUpdate()\n{\nif (FirstTickOfBar) remind = true;\nif (remind   Bars.PercentComplete  = 0.92)\n{\nremind = false;\nPlaySound( Alert1 );\n}\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barssessionbegin", 
            "text": "", 
            "title": "Bars.SessionBegin"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_13", 
            "text": "Bars.SessionBegin outputs the date and time for the beginning of the current trading session.  Date and time for the beginning of the current trading session will be displayed correctly when the function is used on a bar that has occurred in the past.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_7", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_12", 
            "text": "Type DateTime", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_11", 
            "text": "Bars.GetSessionBegin", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_9", 
            "text": "The time for the returned value will equal the starting time defined in the Market Escort for the specified exchange. The value itself is set within the Instrument Escort and can be called up in AgenaScript using the function [ Instrument.Exchange ] .", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_11", 
            "text": "Print( The currently running trading session started at   + Bars.SessionBegin );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barssessionend", 
            "text": "", 
            "title": "Bars.SessionEnd"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_14", 
            "text": "Bars.SessionEnd outputs the time for the end of the currently running trading session.\nDate and time for the end of the current trading session will, in this case, also be outputted correctly when the function is used on a previous bar.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_8", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_13", 
            "text": "Type DateTime", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_12", 
            "text": "Bars.GetSessionEnd", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_10", 
            "text": "The time for the returned value will correlate with the end time of the trading session defined in the Market Escort for the exchange. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the [ Instrument.Exchange ] function.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_12", 
            "text": "Print( The current trading session will end at   + Bars.SessionEnd);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barssessionnextbegin", 
            "text": "", 
            "title": "Bars.SessionNextBegin"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_15", 
            "text": "Bars.SessionNextBegin outputs the date and time for the start of the next trading session.\nDate and time for the next session will be correctly outputted when the function is used on a bar in the past.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_9", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_14", 
            "text": "Type DateTime", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_13", 
            "text": "Bars.GetSessionNextBegin", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_11", 
            "text": "The time for the returned value will correlate to the value displayed in the MarketEscort. The value can be set within the Instrument Escort and can be called up using the [ Instrument.Exchange ] function.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_13", 
            "text": "Print( The next trading session starts at   + Bars.SessionNextBegin);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barssessionnextend", 
            "text": "", 
            "title": "Bars.SessionNextEnd"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_16", 
            "text": "Bars.SessionNextEnd outputs the date and time for the end of the next session.\nSee [ Properties ] for more information.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_10", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_15", 
            "text": "Type DateTime", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_14", 
            "text": "Bars.GetSessionNextEnd", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_12", 
            "text": "The time for the returned value will correlate with the value specified within the MarketEscort. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the [ Instrument.Exchange ] function.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_14", 
            "text": "Print( The next trading session ends at   + Bars.SessionNextEnd);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barstickcount", 
            "text": "", 
            "title": "Bars.TickCount"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_17", 
            "text": "Bars.TickCount outputs the total numbers of ticks contained within a bar.  More information can be found in [ Properties ] of bars.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_11", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_16", 
            "text": "Type int", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_15", 
            "text": "Bars.TickCount", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_13", 
            "text": "With [ OnBarUpdate() ] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnBarUpdate(), you should test for a null reference before executing it. You can test using  if  (Bars !=  null )", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_15", 
            "text": "Print( The current bar consists of   + Bars.TickCount +   Ticks. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barstimeframe", 
            "text": "", 
            "title": "Bars.TimeFrame"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_18", 
            "text": "Bars.TimeFrame outputs the timeframe object containing information regarding the currently used timeframe.  More information can be found here: [ Properties ]", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_12", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_17", 
            "text": "Type ITimeFrame", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_16", 
            "text": "Bars.TimeFrame", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_14", 
            "text": "For more information about timeframe objects please see [ TimeFrame ].  With [ OnBarUpdate() ] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnBarUpdate(),you should test for a null reference before executing it. You can test using  if  (Bars !=  null )", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_16", 
            "text": "//Usage within a 30 minute chart\nTimeFrame tf = (TimeFrame) Bars.TimeFrame;\nPrint(Bars.TimeFrame); // outputs  30 Min \nPrint(tf.Periodicity); // outputs  Minute \nPrint(tf.PeriodicityValue); // outputs  30", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barstotalticks", 
            "text": "", 
            "title": "Bars.TotalTicks"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_19", 
            "text": "Bars.TotalTicks outputs the total number of ticks from the moment the function is called up.  More information can be found here: [ Properties ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_13", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_18", 
            "text": "Type int", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_17", 
            "text": "Bars.TotalTicks", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_15", 
            "text": "The data type int has a positive value range of 2147483647. When you assume 10 ticks per second, there will be no overlaps within 2 trading months with a daily runtime of 24 hours.  With [ OnBarUpdate() ] this property can be used without having to test for a null reference. As soon as the OnBarUpdate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnBarUpdate(), you should test for a null reference before executing it. You can test using  if  (Bars !=  null )", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_17", 
            "text": "Print (\"The total amount of ticks is \" + Bars.TotalTicks);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#data-series", 
            "text": "", 
            "title": "Data Series"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_20", 
            "text": "Data series are interpreted as freely usable data storage containers for your programs. Additionally, they an integrated component of AgenaTrader that saves the price changes for individual bars. We will be focusing on the latter function here.\nIn the following section, the concept of data series will be explained in detail and understandably. All price data for the individual bars are organized and saved within data series.\nThe following are available:  Open   Opens  High   Highs  Low   Lows  Close   Closes  Median   Medians  Typical   Typicals  Weighted   Weighteds  Time   Times  TimeFrame   TimeFrames  Volume   Volumes", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#open", 
            "text": "", 
            "title": "Open"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_21", 
            "text": "Open is a [ DataSeries ][ Data series ] of the type [ DataSeries ], in which the historical opening prices are saved.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_14", 
            "text": "BarsAgo Index Value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_18", 
            "text": "Open\nOpen[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_16", 
            "text": "The returned value is dependent upon the property of [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_18", 
            "text": "// Opening price for the current period\nPrint(Time[0] +     + Open[0]);\n// Opening price for the bars of 5 periods ago\nPrint(Time[5] +     + Open[5]);\n// Current value for the SMA 14 that is based on the opening prices (rounded)\nPrint( SMA(14) calculated using the opening prices:   + Instrument.Round2TickSize(SMA(Open, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#opens", 
            "text": "", 
            "title": "Opens"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_22", 
            "text": "Opens is an array of data series that contains all open data series.  This array is only useful or meaningful for indicators or strategies that use multiple data from multiple timeframes.\nA new entry is entered into the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Opens[0] The open data series of the chart timeframe\nOpens[1] The open data series of all bars in a daily timeframe\nOpens[2] The open data series of all bars in a weekly timeframe  Opens[0][0] is equivalent to Open[0].  In addition, please see [ MultiBars ] for more information.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_15", 
            "text": "barsAgo Index value for the individual bars within the data series (see [ Bars ])\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_19", 
            "text": "Opens[int barSeriesIndex]\nOpens[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_17", 
            "text": "The returned value is dependent upon the property of [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_19", 
            "text": "See example: [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#high", 
            "text": "", 
            "title": "High"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_23", 
            "text": "High is a  [DataSerie][ Data series ]s  of the type [ DataSeries ], in which the historical high prices are saved.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_16", 
            "text": "barsAgo IndexValue (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_20", 
            "text": "High\nHigh[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_18", 
            "text": "The returned value is dependent upon the property of [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_20", 
            "text": "// High values of the current period\nPrint(Time[0] +     + High[0]);\n// High values of the bar from 5 periods ago\nPrint(Time[5] +     + High[5]);\n// the current value for the SMA 14 calculated on the basis of the high prices\nPrint( SMA(14) Calculated using the high prices:   + Instrument.Round2TickSize(SMA(High, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#highs", 
            "text": "", 
            "title": "Highs"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_24", 
            "text": "Highs is an array of [ DataSeries ][1] that contains all high data series.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new time unit is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Highs[0] the high data series of the chart timeframe\nHighs[1] the high data series of all bars in a daily timeframe\nHighs[2] the high data series of all bars in a weekly timeframe  Highs[0][0] is equivalent to High[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_17", 
            "text": "barsAgo Index value for the individual bars within the data series (see [ Bars ])\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_21", 
            "text": "Highs[int barSeriesIndex]\nHighs[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_19", 
            "text": "The returned value is dependent upon the property of [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_21", 
            "text": "Please see examples under [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#low", 
            "text": "", 
            "title": "Low"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_25", 
            "text": "Low is a [ DataSeries ][ Data series ] of the type [ DataSeries ], in which the historical low prices are saved.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_18", 
            "text": "barsAgo IndexValue (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_22", 
            "text": "Low\nLow[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_20", 
            "text": "The returned value is dependent upon the property of [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_22", 
            "text": "// Lowest value of the current period\nPrint(Time[0] +     + Low[0]);\n// Lowest value of the bar from 5 periods ago\nPrint(Time[5] +     + Low[5]);\n// The current value for the SMA 14 calculated on the basis of the low prices (smoothed)\nPrint( SMA(14) calculated using the high prices:   + Instrument.Round2TickSize(SMA(Low, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#lows", 
            "text": "", 
            "title": "Lows"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_26", 
            "text": "Lows is an array of [ DataSeries ][1] that contains all [ Low ] data series.  This array is only of value to indicators or strategies that use data from multiple time units.  A new entry is added whenever a new time unit is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Lows[0] the low data series for the chart timeframe\nLows[1] the low data series for all bars in a daily timeframe\nLows[2] the low data series for all bars in a weekly timeframe  Lows[0][0] is equivalent to Low[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_19", 
            "text": "barsAgo Index value for the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_23", 
            "text": "Lows[int barSeriesIndex]\nLows[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_21", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_23", 
            "text": "See example [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#close", 
            "text": "", 
            "title": "Close"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_27", 
            "text": "Close is a [ DataSeries ][ Data series ] of the type [ DataSeries ], in which the historical closing prices are saved.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_20", 
            "text": "barsAgo Index value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_24", 
            "text": "Close\nClose[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_22", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].  Indicators are usually calculated using the closing prices.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_24", 
            "text": "// Closing price of the current period\nPrint(Time[0] +     + Close[0]);\n// Closing price of the bar from 5 periods ago\nPrint(Time[5] +     + Close[5]);\n// Current value for the SMA 14 based on the closing prices\nPrint( SMA(14) calculated using the closing prices:   + Instrument.Round2TickSize(SMA(Close, 14)[0]));\n// Close does not need to be mentioned since it is used by default\nPrint( SMA(14) calculated using the closing prices:   + Instrument.Round2TickSize(SMA(14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#closes", 
            "text": "", 
            "title": "Closes"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_28", 
            "text": "Closes is an array of [ DataSeries ][1] that contains all [ Low ] data series.  This array is only of importance to indicators or strategies that use data from multiple time units.  A new entry is added to the array whenever a timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Closes[0] the close data series of the chart timeframe\nCloses[1] the close data series of all bars in a daily timeframe\nCloses[2] the close data series of all bars in a weekly timeframe  Closes[0][0] is equivalent to Close[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_21", 
            "text": "barsAgo Index value of the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_25", 
            "text": "Closes[int barSeriesIndex]\nCloses[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_23", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_25", 
            "text": "See example [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#median", 
            "text": "", 
            "title": "Median"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_29", 
            "text": "Median is a [ DataSeries ][ Data series ] of the type [ DataSeries ], in which the historical median values are saved.  The median price of a bar is calculated using (high + low) / 2  See [ Typical ]   [ Weighted ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_22", 
            "text": "barsAgo Index value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_26", 
            "text": "Median\nMedian[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_24", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].  Further information about median, typical und weighted:\n[ http://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_26", 
            "text": "// Median price for the current period\nPrint(Time[0] +     + Median[0]);\n// Median price of the bar from 5 periods ago\nPrint(Time[5] +     + Median[5]);\n// Current value for the SMA 14 calculated using the median prices\nPrint( SMA(14) calculated using the median prices:   + Instrument.Round2TickSize(SMA(Median, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#medians", 
            "text": "", 
            "title": "Medians"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_30", 
            "text": "Medians is an array of [ DataSeries ][1] that contains all [ Median ] data series.  This array is only of value to indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new time frame is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Medians[0] the median data series of the chart timeframe\nMedians[1] the median data series of all bars in a daily timeframe\nMedians[2] the median data series of all bars in a weekly timeframe  Medians[0][0] is equivalent to Medians[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_23", 
            "text": "barsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_27", 
            "text": "Medians[int barSeriesIndex]\nMedians[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_25", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].  Further information on median: http://www.investopedia.com/terms/m/median.asp", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_27", 
            "text": "See example in [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#typical", 
            "text": "", 
            "title": "Typical"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_31", 
            "text": "Typical is a  DataSeries  of the type [ DataSeries ], in which the historical typical values are saved.  The typical price of a bar is calculated using (high + low + close) / 3.  See [ Median ] and [ Weighted ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_24", 
            "text": "barsAgo Index value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_28", 
            "text": "Typical\nTypical[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_26", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].  Further information on typical:  https://technicianapp.com/resources/typical-price/", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_28", 
            "text": "// Typical price for the current period\nPrint(Time[0] +     + Typical[0]);\n// Typical price of the bar from 5 periods ago\nPrint(Time[5] +     + Typical[5]);\n// Current value for the SMA 14 calculated using the typical price\nPrint( SMA(14) calculated using the typical price:   + Instrument.Round2TickSize(SMA(Typical, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#typicals", 
            "text": "", 
            "title": "Typicals"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_32", 
            "text": "Typicals is an array of  DataSeries  that contains all [ Typical ] data series.  This array is only of value to indicators and strategies that make use of multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Typicals[0] the typical data series of the chart timeframe\nTypicals[1] the typical data series of all bars in a daily timeframe\nTypicals[2] the typical data series of all bars in a weekly timeframe  Typicals[0][0] is equivalent to Typicals[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_25", 
            "text": "barsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value of the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_29", 
            "text": "Typicals[int barSeriesIndex]\nTypicals[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_27", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_29", 
            "text": "See example [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#weighted", 
            "text": "", 
            "title": "Weighted"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_33", 
            "text": "Weighted is a [ DataSeries ][ Data series ] of the type [ DataSeries ], in which the historical weighted values are saved.  The weighted price of a bar is calculated using the formula (high + low + 2*close) / 4 and then weighted on the closing price.  See also [ Median ] and [ Typical ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_26", 
            "text": "barsAgo Index value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_30", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#weighted_1", 
            "text": "Weighted[int barsAgo]", 
            "title": "Weighted"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_28", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].  Information regarding weighted: http://www.stock-trading-infocentre.com/pivot-points.html", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_30", 
            "text": "// Weighted price for the current period\nPrint(Time[0] +     + Weighted[0]);\n// Weighted price of the bar from 5 periods ago\nPrint(Time[5] +     + Weighted[5]);\n// Current value for the SMA 14 using the weighted price\nPrint( SMA(14) calculated using the weighted price:   + Instrument.Round2TickSize(SMA(Weighted, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#weighteds", 
            "text": "", 
            "title": "Weighteds"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_34", 
            "text": "Weighteds is an array of [ DataSeries ][1] that contains all [ Weighted ] data series.  The array is only of value for indicators and strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Weighteds[0] the weighted data series of the chart timeframe\nWeighteds[1] the weighted data series of all bars in a daily timeframe\nWeighteds[2] the weighted data series of all bars in a weekly timeframe  Weighteds[0][0] is equivalent to Weighteds[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_27", 
            "text": "barsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_31", 
            "text": "Weighteds[int barSeriesIndex]\nWeighteds[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_29", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_31", 
            "text": "See example under [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_35", 
            "text": "Time is a [ DataSeries ][ Data series ] of the type [ DateTimeSeries ], in which the timestamps of the individual bars are saved.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_28", 
            "text": "barsAgo Index value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_32", 
            "text": "Time\nTime[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_30", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_32", 
            "text": "// Timestamp of the current period\nPrint(Time[0]);\n// Timestamp of the bar from 5 periods ago\nPrint(Time[5]);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#times", 
            "text": "", 
            "title": "Times"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_36", 
            "text": "Times is an array of  DataSeries  that contains all [ Time ] data series.  This array is only of value to indicators and strategies that make use of multiple timeframes.\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Times[0] the time data series of the chart timeframe\nTimes[1] the time data series of all bars in a daily timeframe\nTimes[2] the time data series of all bars in a weekly timeframe  Times[0][0] is equivalent to Times[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_29", 
            "text": "barsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_33", 
            "text": "Times[int barSeriesIndex]\nTimes[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_31", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_33", 
            "text": "See example [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#volume", 
            "text": "", 
            "title": "Volume"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_37", 
            "text": "Volume is a [ DataSeries ][ Data series ] of the type [ DataSeries ], in which the historical volume information is saved.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_30", 
            "text": "barsAgo Index value (see [ Bars ])", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_34", 
            "text": "Volume  Volume[ int  barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_32", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].  The value returned by the [ VOL() ] indicator is identical with the volume described here;\nfor example, Vol()[3] will have the same value as Volume[3].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_34", 
            "text": "// Volume for the current period\nPrint(Time[0] +     + Volume[0]);\n// Volume of the bar from 5 periods ago\nPrint(Time[5] +     + Volume[5]);\n// Current value for the SMA 14 calculated using the volume\nPrint( SMA(14) calculated using the volume:   + Instrument.Round2TickSize(SMA(Volume, 14)[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#volumes", 
            "text": "", 
            "title": "Volumes"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_38", 
            "text": "Volumes is an array of  DataSeries  that contains all [ Volume ] data series.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Volumes[0] the volume data series of the chart timeframe\nVolumes[1] the volume data series of all bars in the daily timeframe\nVolumes[2] the volume data series of all bars in the weekly timeframe  Volumes[0][0] is equivalent to Volumes[0].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_31", 
            "text": "barsAgo Index value of the individual bars within a data series  barSeriesIndex Index value of the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_35", 
            "text": "Volumes[int barSeriesIndex]\nVolumes[int barSeriesIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_33", 
            "text": "The returned value is dependent upon the property [ CalculateOnBarClose ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_35", 
            "text": "See example [ Multibars ][ MultiBars ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#timeframe", 
            "text": "", 
            "title": "TimeFrame"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_39", 
            "text": "TimeFrame is a timeframe object.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_36", 
            "text": "TimeFrame", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#timeframes", 
            "text": "", 
            "title": "TimeFrames"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_40", 
            "text": "TimeFrames is an array of timeframe objects that contains a timeframe object for each individual bar object.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  TimeFrames [0] Timeframe of the primary data series (chart timeframe)\nTimeFrames [1]  Print (TimeFrames[1]); // returns \"1 Day\"\nTimeFrames [2]  Print (TimeFrames[2]); // returns \"1 Week\"  TimeFrames [0] is equivalent to [ TimeFrame ].  See [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_32", 
            "text": "barSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_37", 
            "text": "TimeFrames [int barSeriesIndex]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_36", 
            "text": "if (BarsInProgress == 0   CurrentBar == 0)\nfor (int i = BarsArray.Count-1; i  = 0; i--)\nPrint( The Indicator   + this.Name +   uses Bars of the Timeframe   + TimeFrames[i]);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instruments", 
            "text": "The term \"instrument\" denotes a tradable value such as a stock, ETF, future etc.  An instrument has various properties that can be used in AgenaScripts created by the user:  Instrument.Compare  Instrument.Currency  Instrument.Digits  Instrument.ETF  Instrument.Exchange  Instrument.Expiry  Instrument.InstrumentType  Instrument.Name  Instrument.PointValue  Instrument.Round2TickSize  Instrument.Symbol  Instrument.TickSize  With the  OnBarUpdate()  method you can use any properties you wish without having to test for a null reference.\nAs soon as the  OnBarUpdate()  function is called up by AgenaScript, an object will become available. If you wish to use these properties outside of  OnBarUpdate() , you should first perform a test for null references using  if  (Bars !=  null )", 
            "title": "Instruments"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentcompare", 
            "text": "", 
            "title": "Instrument.Compare"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_41", 
            "text": "The Instrument.Compare function compares two market prices whilst taking into account the correct number of decimal points. The smallest possible price change is displayed by the value TickSize. This function simplifies the otherwise time-consuming comparison using floating-point operations.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_33", 
            "text": "double value1\ndouble value2", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_19", 
            "text": "Type int  1 - Value1 is bigger than value2\n-1 - Value1 is smaller than value2\n0 - Value1 and value2 are equal", 
            "title": "Return value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_38", 
            "text": "Instrument.Compare(double Value1, double Value2)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_34", 
            "text": "Be aware this function compares prices based on TickSize. If the ticksize of your instrument is 0.01 these prices will be rounded and compared. If you want regular comparation of two numbers, you should use  operator greater than ( ) and smaller than ( ).  If the tick size is 0,00001 \u2013 as it usually is with FX values \u2013 then the following will be displayed:  Compare(2, 1.99999) a 1, meaning 2 is bigger than 1.99999\nCompare(2, 2.000001) a 0, meaning the values are equal\nCompare(2, 1.999999) a 0, meaning the values are equal\nCompare(2, 2.00001) a -1, meaning 2 is smaller than 2.00001", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_37", 
            "text": "Print(Instrument.Compare(2, 1.999999));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentcurrency", 
            "text": "", 
            "title": "Instrument.Currency"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_42", 
            "text": "Instrument.Currency outputs a currency object that contains the corresponding currency in which the instrument is traded.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_34", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_20", 
            "text": "A constant of the type \"public enum currencies\"", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_39", 
            "text": "Instrument.Currency", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_35", 
            "text": "The common currencies are: AUD, CAD, EUR, GBP, JPY or USD.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_38", 
            "text": "Print(Instrument.Name +   is traded in   + Instrument.Currency);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentdigits", 
            "text": "", 
            "title": "Instrument.Digits"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_43", 
            "text": "Instrument.Digits outputs the number of decimal points in which the market price of the instrument is traded.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_35", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_21", 
            "text": "int Digits", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_40", 
            "text": "Instrument.Digits", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_36", 
            "text": "Stocks are usually traded to two decimal points. Forex can be traded (depending on the data provider) with 4 or 5 decimal places.  This function is especially useful when formatting the output of various instruments that need rounding. Also see [ TickSize ] and [ Instrument.Round2Ticks ][ Instrument.Round2TickSize ].  More information can be found here: [ Formatting of Numbers ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_39", 
            "text": "Print( The value of   +Instrument.Name +   is noted with a precision of   + Instrument.Digits +  Decimal points. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentetf", 
            "text": "", 
            "title": "Instrument.ETF"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_44", 
            "text": "Instrument.ETF is used to differentiate between a stock and an ETF. This is necessary since ETFs are considered to be \u201estocks\" by some exchanges.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_36", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_22", 
            "text": "Type bool", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_41", 
            "text": "Instrument.ETF", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_37", 
            "text": "What is an ETF?  Wikipedia: [ http://de.wikipedia.org/wiki/Exchange-traded_fund ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_40", 
            "text": "if (Instrument.InstrumentType == InstrumentType.Stock)\nif (Instrument.ETF)\nPrint( The value is an ETF. );\nelse\nPrint( The value is a stock. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentexchange", 
            "text": "", 
            "title": "Instrument.Exchange"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_45", 
            "text": "Instrument.Exchange outputs the description/definition of the current exchange for the current instrument.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_37", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_23", 
            "text": "An exchange object of the type \"public enum exchanges\"", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_42", 
            "text": "Instrument.Exchange", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_38", 
            "text": "An overview of various exchange:  https://en.wikipedia.org/wiki/List_of_stock_exchanges", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_41", 
            "text": "Print( The instrument   + Instrument.Name +  is traded on the   + Instrument.Exchange +   exchange. );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentexpiry", 
            "text": "", 
            "title": "Instrument.Expiry"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_46", 
            "text": "Instrument.Expiry outputs the date (month and year) of the expiry of a financial instrument. Only derivative instruments such as options or futures will have an expiry date.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_38", 
            "text": "None", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_24", 
            "text": "Type DateTime  For instruments without an expiry date the returned value is set to DateTime.MaxValue(= 31.12.9999 23.59:59)", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_43", 
            "text": "Instrument.Expiry", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_39", 
            "text": "The expiry date (expiry) can also be seen within the Instrument Escort:", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_42", 
            "text": "Print( The instrument   + Instrument.Name +  will expire on   + Instrument.Expiry);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentinstrumenttype", 
            "text": "", 
            "title": "Instrument.InstrumentType"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_47", 
            "text": "Instrument.InstrumentType outputs a type object of the trading instrument.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_39", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_25", 
            "text": "Object of the type \"public enum instrument\"", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_44", 
            "text": "Instrument.InstrumentType", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_40", 
            "text": "Potential values are: future, stock, index, currency, option, CFD and unknown.  There is no ETF type. ETFs are considered to be of the type \"stock\" \u2013 see [ Instrument.ETF ].  The instrument type can also be viewed within the Instrument Escort:", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_43", 
            "text": "Print( The instrument   + Instrument.Name +   is of the type   + Instrument.InstrumentType);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentname", 
            "text": "", 
            "title": "Instrument.Name"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_48", 
            "text": "Instrument.Name outputs the name/description of the trading instrument.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_40", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_26", 
            "text": "Type string", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_45", 
            "text": "Instrument.Name", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_41", 
            "text": "The instrument name can also be seen within the Instrument Escort:", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_44", 
            "text": "Print( The currently loaded instrument inside the chart is named   + Instrument.Name);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentpointvalue", 
            "text": "", 
            "title": "Instrument.PointValue"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_49", 
            "text": "Instrument.PointValue outputs the monetary value for a full point movement of the instrument.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_41", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_27", 
            "text": "double \u2013 point value", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_46", 
            "text": "Instrument.PointValue", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_42", 
            "text": "Example for various point values  (per amount, CFD, futures contract, lot etc.)  Stock: generally 1.00 Euro or 1.00 USD.\nEUR/USD: 100,000 USD\nDAX future: 25.00 Euro  Tick Value  The tick value can be calculated by multiplying the point value with the tick size.  For example, the E-mini S P 500 has a point value of $50. The tick size equals 0.25. This means that there are 4 ticks in one full point for the E-mini S P 500.\nSince 50 * 0.25 = 50/4 this means that the tick value is $12.50.  The point value can also be viewed within the Instrument Escort:", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_45", 
            "text": "Print( When   + Instrument.Name +   rises for one full point then this is equal to   + Instrument.PointValue +     + Instrument.Currency);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentround2ticksize", 
            "text": "", 
            "title": "Instrument.Round2TickSize"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_50", 
            "text": "The function Instrument.Round2TickSize rounds the supplied market price to the smallest value divisible by the tick size of the instrument.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_42", 
            "text": "double \u2013 market value", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_28", 
            "text": "double", 
            "title": "Return value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_47", 
            "text": "Instrument.Round2TickSize(double MarketPrice)", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_43", 
            "text": "The number of decimal places to which the price is rounded depends on the instrument.\nIf, for example, an instrument is a stock, then the rounding will be performed to 2 decimal places. For a Forex instrument, it may be carried out to 4 or 5 decimal places.  See [ TickSize ] and [ Instrument.Digits ].  Example of professional [ Formatting ][ Formatting of Numbers ].", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_46", 
            "text": "double Price = 12.3456789;\nPrint(Price +   rounded for a   + Instrument.Name +   valid value is   + Instrument.Round2TickSize(Price));", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentsymbol", 
            "text": "", 
            "title": "Instrument.Symbol"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_51", 
            "text": "Instrument.Symbol outputs the symbol that identifies the trading instrument within AgenaTrader. Depending on the symbol, the mappings for the various data feed providers and brokers will be managed in different ways.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_43", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_29", 
            "text": "Type string", 
            "title": "Return value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_48", 
            "text": "Instrument.Symbol", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_44", 
            "text": "By using symbols, identical stocks being traded on different exchanges can be identified and separated from each other. The symbol BMW.DE is the BMW stock on the XETRA exchange. BMW.CFG is the CFD for the BMW stock.  The instrument symbol can also be viewed within the Instrument Escort:", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_47", 
            "text": "Print( The instrument currently loaded within the chart has the symbol:   + Instrument.Symbol);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#instrumentticksize", 
            "text": "", 
            "title": "Instrument.TickSize"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_52", 
            "text": "The tick size is the smallest measurable unit that a financial instrument can move. This is usually called 1 tick.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_44", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#return-value_30", 
            "text": "double", 
            "title": "Return Value"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_49", 
            "text": "Instrument.TickSize or simply TickSize", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_45", 
            "text": "The keyword [ TickSize ] is equivalent to Instrument.TickSize. Both information requests will produce the same value and are thus interchangeable.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_48", 
            "text": "Stock: 0.01\nES future: 0.25\nEUR/USD: 0.00001  See [ Instrument.PointValue ] and [ Instrument.Digits ].  Examples of professional [ Formatting ][ Formatting of Numbers ].", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_49", 
            "text": "Print( The value of   + Instrument.Name +   can change for a minimum of   + Instrument.TickSize +   Tick(s). );", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#collections", 
            "text": "", 
            "title": "Collections"
        }, 
        {
            "location": "/handling_bars_and_instruments/#drawobjects", 
            "text": "", 
            "title": "DrawObjects"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_53", 
            "text": "DrawObjects is a collection containing all drawing objects within the chart. The property hold all drawings which were generated by the script.\nThe index for DrawObjects is the explicit name for the drawing object (string tag).", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_50", 
            "text": "DrawObjects [string tag]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_50", 
            "text": "Note:  To be able to use the interface definitions you must use the using method.  using AgenaTrader.Plugins;\n// Output number of drawing objects within the chart and their tags\nPrint( The chart contains   + DrawObjects.Count +   drawing objects. );\nfor each (IDrawObject draw in DrawObjects) Print(draw.Tag);\n//Draw a black trend line...\nDrawLine( MyLine , true, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 3);\n// ... and change the color to red\nITrendLine line = (ITrendLine) DrawObjects[ MyLine ];\nif (line != null) line.Pen.Color = Color.Red;\n// Set all lines within the chart to a line strength of 3,\n// and lock it so that it cannot be edited or moved\nforeach (IDrawObject draw in DrawObjects)\nif (draw is IVerticalLine)\n{\nIVerticalLine vline = (IVerticalLine) draw;\nvline.Locked = true;\nvline.Editable = false;\nvline.Pen.Width = 3;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#input", 
            "text": "", 
            "title": "Input"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_54", 
            "text": "Input is a [ DataSeries ] object in which the input data for an indicator or strategy is stored.  If the indicator is used without any explicit instructions for the input data, then the closing price for the current market prices will be used.  When calling up the SMA(20) the smoothing average is calculated on the basis of the closing prices for the current chart price data (this is equivalent to SMA(close,20).  Input[0] = Close[0].  When calling up the SMA(high, 20) the high price values are loaded and used for the calculation of the smoothing average.  Input[0] = High[0].  This way you can select which data series should be used for the calculation of the indicator.  double  d =  RSI ( SMA (20), 14, 3)[0]; calculates the 14 period RSI using the SMA(20) as the input data series.\nInput[0] = SMA(20)[0].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_51", 
            "text": "Input\nInput[int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_51", 
            "text": "Print( The input data for the indicators are   + Input[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#lines", 
            "text": "", 
            "title": "Lines"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_55", 
            "text": "Lines is a collection that contains all [ Line ] objects of an indicator.  When a line object is added to the indicator using the [ Add() ] method, this line is automatically added to the \"lines\" collection.  The order of the add commands determines how these lines are sorted. The first information request of Add() will create Lines[0], the next information request will be Lines[1] etc.  See [ Plots ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_52", 
            "text": "Lines[int index]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_52", 
            "text": "// Add  using System.Drawing.Drawing2D;  for DashStyle\nprotected override void Initialize()\n{\nAdd(new Line(Color.Blue, 70,  Upper )); // saves into Lines[0]\nAdd(new Line(Color.Blue, 30,  Lower )); // saves into Lines[1]\n}\nprotected override void OnBarUpdate()\n{\n// When the RSI is above 70, properties of the lines will be changed\nif (RSI(14 ,3)  = 70)\n{\nLines[0].Width = 3;\nLines[0].Color = Color.Red;\nLines[0].DashStyle = DashStyle.Dot;\n}\nelse\n{\nLines[0].Width = 1;\nLines[0].Color = Color.Blue;\nLines[0].DashStyle = DashStyle.Solid;\n}\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#plotcolors", 
            "text": "", 
            "title": "PlotColors"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_56", 
            "text": "PlotColors is a collection that contains all color series of all plot objects.  When a plot is added using the [ Add() ] method it automatically creates a color series object and is added to the PlotColors collection.  The order of the add commands determines how the plot colors are sorted. The first information request of Add() will create PlotColors[0], the following information request will create PlotColors[1] etc.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_53", 
            "text": "PlotColors[int PlotIndex][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_46", 
            "text": "More information regarding the collection class:\n[ http://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_53", 
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing AgenaTrader.API;\nnamespace AgenaTrader.UserCode\n{\n[Description( PlotColor Demo )]\npublic class PlotColorsDemo : UserIndicator\n{\npublic DataSeries SMA20 { get {return Values[0];} }\npublic DataSeries SMA50 { get {return Values[1];} }\npublic DataSeries SMA100 { get {return Values[2];} }\nprivate Pen pen;\nprotected override void Initialize()\n{\n// Set line strength (width) to 4\npen = new Pen(Color.Empty, 4);\n// Add three plots with the defined line strength to the chart\nAdd(new Plot(pen, PlotStyle.Line,  SMA20  )); //attached to PlotColors[0]\nAdd(new Plot(pen, PlotStyle.Line,  SMA50  )); //attached to PlotColors[1]\nAdd(new Plot(pen, PlotStyle.Line,  SMA100 )); //attached to PlotColors[2]\nOverlay = true;\n}\nprotected override void OnBarUpdate()\n{\n// Add values to the three plots\nSMA20.Set (SMA(20) [0]);\nSMA50.Set (SMA(50) [0]);\nSMA100.Set(SMA(100)[0]);\n// Change colors depending on the trend\nif (Rising(Close))\n{\nPlotColors[0][0] = Color.LightGreen;\nPlotColors[1][0] = Color.Green;\nPlotColors[2][0] = Color.DarkGreen;\n}\nelse if (Falling(Close))\n{\nPlotColors[0][0] = Color.LightSalmon;\nPlotColors[1][0] = Color.Red;\nPlotColors[2][0] = Color.DarkRed;\n}\nelse\n{\nPlotColors[0][0] = Color.LightGray;\nPlotColors[1][0] = Color.Gray;\nPlotColors[2][0] = Color.DarkGray;\n}\n}\n}\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#plots", 
            "text": "", 
            "title": "Plots"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_57", 
            "text": "Plots is a collection that contains the plot objects of an indicator.  When a plot object is added to an indicator using the Add() method, it is also automatically added to the \"plots\" collection.  The order of the add commands determines how the plots are sorted. The first Add() information request will create Plots[0], the following information request will create Plots[1] etc.  See [ Lines ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_54", 
            "text": "Plots[int index]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_54", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Blue,  MySMA 20 )); // saved to Plots[0]\n}\nprotected override void OnBarUpdate()\n{\nValue.Set(SMA(20)[0]);\n// If the market price is above the SMA colorize it green, otherwise red\nif (Close[0]   SMA(20)[0])\n    Plots[0].PlotColor = Color.Green;\nelse\n    Plots[0].PlotColor = Color.Red;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#values", 
            "text": "", 
            "title": "Values"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_58", 
            "text": "Values is a collection that contains the data series objects of an indicator.  When a plot is added to an indicator using the Add() method, a value object is automatically created and added to the \"values\" collection.  The order of the add commands determines how the values are sorted. The first information request will create Values[0], the next information request will create Values[1] etc.  Value  is always identical to Values[0].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_55", 
            "text": "Values[int index]\nValues[int index][int barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_47", 
            "text": "The methods known for a collection, Set() Reset() and Count(), are applicable for values.  Information on the class collection:\n[ http://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_55", 
            "text": "// Check the second indicator value of one bar ago and set the value of the current indicator value based on it.\nif (Values[1][1]   High[0] - Low[0])\nValue.Set(High[0] - Low[0]);\nelse\nValue.Set(High[0] - Close[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#multibars", 
            "text": "", 
            "title": "Multibars"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_59", 
            "text": "An indicator or a strategy will always have the same underlying timeframe-units as those units being displayed within the chart. The values of an SMA(14) indicator displayed in a 5 minute chart will be calculated based on the last fourteen 5 minute bars. A daily chart, on the other hand, would use the closing prices of the past 14 days in order to calculate this value.\nThe same method applies for your self-programmed indicators. A 5 minute chart will call up the [ OnBarUpdate() ] for each 5 minute bar.\nIf you want your self-created indicator to use a different timeframe, this is possible using multibars.", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_56", 
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n[Description( Multibar Demo )]\n// The indicator requires daily and weekly data\n[TimeFrameRequirements( 1 Day ,  1 Week )]\npublic class MultiBarDemo : UserIndicator\n{\nprotected override void InitRequirements()  {   Add(DatafeedHistoryPeriodicity.Day, 1);   Add(DatafeedHistoryPeriodicity.Week, 1);   }   protected override void Initialize()\n{\nCalculateOnBarClose = true;\n}\nprotected override void OnBarUpdate()\n{\n// The current value for the SMA 14 in a daily timeframe\nPrint(SMA(Closes[1], 14)[0]);\n// Current value for the SMA 14 in a weekly timeframe\nPrint(SMA(Closes[2], 14)[0]);\n}\n}\n}", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#additional-notes", 
            "text": "When using additional timeframes, a further entry with the respective data series for the bars of the new timeframe will be added to the arrays [ Opens ], [ Highs ], [ Lows ], [ Closes ], [ Medians ], [ Typicals ], [ Weighteds ], [ Times ] and [ Volumes ]. The indexing will occur in the order of the addition of the new timeframes.\nCloses[0][0] is equivalent to Close[0].\nCloses[1][0] equals the current closing price for the daily data series\nCloses[2][0] equals the current closing price for the weekly data series  \"Closes\" is, of course, interchangeable with Opens, Highs, Lows etc.  See [ CurrentBars ], [ BarsInProgress ], [ TimeFrames ], [ TimeFrameRequirements ].  Additional syntax methods are available for multibars:  // Declare the variable TF_DAY and define it\nprivate static readonly TimeFrame TF_Day = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\nprivate static readonly TimeFrame TF_Week = new TimeFrame(DatafeedHistoryPeriodicity.Week, 1);\n// The following instruction is identical to double d = Closes[1][0];\ndouble d = MultiBars.GetBarsItem(TF_Day).Close[0];\n// The following instruction is identical to double w = Closes[2][0];\ndouble w = MultiBars.GetBarsItem(TF_Week).Close[0];", 
            "title": "Additional Notes"
        }, 
        {
            "location": "/handling_bars_and_instruments/#currentbars", 
            "text": "", 
            "title": "CurrentBars"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_60", 
            "text": "CurrentBars is an array of int values that contains the number of  [CurrentBar]s  for each bar.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  CurrentBars[0] Current bar for the primary data series (chart timeframe)\nCurrentBars[1] Current bar for the daily bars\nCurrentBars[2] Current bar for the weekly bars  CurrentBars[0] is equivalent to [ CurrentBar ][CurrentBar].  Also see [ MultiBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_45", 
            "text": "barSeriesIndex Index value for the various timeframes", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_56", 
            "text": "CurrentBars[int barSeriesIndex]", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_57", 
            "text": "//Ensure that a minimum of 20 bars is loaded\nfor (int i=0; i CurrentBars.Count; i++)\nif (CurrentBars[i]   20) return;", 
            "title": "Example"
        }, 
        {
            "location": "/handling_bars_and_instruments/#barsinprogress", 
            "text": "", 
            "title": "BarsInProgress"
        }, 
        {
            "location": "/handling_bars_and_instruments/#description_61", 
            "text": "Within a multibars script, multiple bars objects are available. The OnBarUpdate() method\nwill therefore also be called up for every bar within your script. In order to include/exclude events of specific data series, you can use the BarsInProgress method.  BarsInProgress is only of value for indicators or strategies that use data from multiple timeframes.\nWith  [TimeFrameRequirements(\"1 Day\", \"1 Week\")]  two timeframes will be added to the primary chart timeframe.  If OnBarUpdate() is called up by the primary data series, then BarsInProgress will equal zero. If OnBarUpdate() is called up by the daily bars, then BarsInProgress will equal 1. Weekly bars will have a value of 2.  See [ Multibars ][ MultiBars ] and [ CurrentBars ].", 
            "title": "Description"
        }, 
        {
            "location": "/handling_bars_and_instruments/#parameter_46", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/handling_bars_and_instruments/#usage_57", 
            "text": "BarsInProgress", 
            "title": "Usage"
        }, 
        {
            "location": "/handling_bars_and_instruments/#more-information_48", 
            "text": "Within a script that only works with primary timeframes, the value will always equal zero.", 
            "title": "More Information"
        }, 
        {
            "location": "/handling_bars_and_instruments/#example_58", 
            "text": "// To demonstrate the methodology\n// set CalculateOnBarClose=false\nPrint(Time[0] +     + BarsInProgress);\n// Calculate only for the chart timeframe\nprotected override void OnBarUpdate()\n{\nif (BarsInProgress   0) return;\n// Logic for the primary data series\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/", 
            "text": "Events\n\n\nAgenaTrader is an \nevent-oriented\n application by definition.\n\n\nProgramming in AgenaTrader using the various application programming interface ([\nAPI\n]) methods is based initially on the [\nOverwriting\n] of routines predefined for event handling.\n\n\nThe following methods can be used and therefore overwritten:\n\n\n\n\n[\nOnBarUpdate()\n]\n\n\n[\nOnExecution()\n]\n\n\n[\nOnMarketData()\n]\n\n\n[\nOnMarketDepth()\n]\n\n\n[\nOnOrderUpdate()\n]\n\n\n[\nOnStartUp()\n]\n\n\n[\nOnTermination()\n]\n\n\n\n\nOnBarUpdate()\n\n\nDescription\n\n\nThe OnBarUpdate() method is called up whenever a bar changes; depending on the variables of \nCalculateOnBarClose\n, this will happen upon every incoming tick or when the bar has completed/closed.\nOnBarUpdate is the most important method and also, in most cases, contains the largest chunk of code for your self-created indicators or strategies.\nThe editing begins with the oldest bar and goes up to the newest bar within the chart. The oldest bar has the number 0. The indexing and numbering will continue to happen; in order to obtain the numbering of the bars you can use the current bar variable. You can see an example illustrating this below.\n\n\nCaution: the numbering/indexing is different from the bar index \u2013 see \nBars\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnBarUpdate()\n\n\n\n\nExample\n\n\nprotected override void OnBarUpdate()\n{\n    Print(\nCalling of OnBarUpdate for the bar number \n + CurrentBar + \n from \n +Time[0]);\n}\n\n\n\n\nOnExecution()\n\n\nDescription\n\n\nThe OnExecution() method is called up when an order is executed (filled).\nThe status of a strategy can be changed by a strategy-managed order. This status change can be initiated by the changing of a volume, price or the status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for all events.\n\n\nOnExecution() will always be executed AFTER [\nOnOrderUpdate()\n].\n\n\nMore information can be found here: [\nEvents\n]\n\n\nParameter\n\n\nAn execution object of the type IExecution\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnExecution(IExecution execution)\n\n\n\n\nExample\n\n\nprivate IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n    if (entryOrder == null \n Close[0] \n Open[0])\n    entryOrder = EnterLong();\n}\nprotected override void OnExecution(IExecution execution)\n{\n    // Example 1\n    if (entryOrder != null \n execution.Order == entryOrder)\n    Print(execution.ToString());\n    // Example 2\n    if (execution.Order != null \n execution.Order.OrderState == OrderState.Filled)\n    Print(execution.ToString());\n}\n\n\n\n\nOnMarketData()\n\n\nDescription\n\n\nThe OnMarketData() method is called up when a change in level 1 data has occurred, meaning whenever there is a change in the bid price, ask price, bid volume, or ask volume, and of course in the last price after a real turnover has occurred.\nIn a multibar indicator, the BarsInProgress method identifies the data series that was used for an information request for OnMarketData().\nOnMarketData() will not be called up for historical data.\nMore information can be found here: \nEvents\n.\n\n\nNotes regarding data from Yahoo (YFeed)\n\n\nThe field \"LastPrice\" equals \u2013 as usual \u2013 either the bid price or the ask price, depending on the last revenue turnover.\n\n\nThe \u201eMarketDataType\u201c field always equals the \u201elast\" value\n\n\nThe fields \"Volume\", \"BidSize\" and \"AskSize\" are always 0.\n\n\nUsage\n\n\nprotected override void OnMarketData(MarketDataEventArgs e)\n\n\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\n[\nMarketDataEventArgs\n] e\n\n\nExample\n\n\nprotected override void OnMarketData(MarketDataEventArgs e)\n{\n    Print(\nAskPrice \n+e.AskPrice);\n    Print(\nAskSize \n+e.AskSize);\n    Print(\nBidPrice \n+e.BidPrice);\n    Print(\nBidSize \n+e.BidSize);\n    Print(\nInstrument \n+e.Instrument);\n    Print(\nLastPrice \n+e.LastPrice);\n    Print(\nMarketDataType \n+e.MarketDataType);\n    Print(\nPrice \n+e.Price);\n    Print(\nTime \n+e.Time);\n    Print(\nVolume \n+e.Volume);\n}\n\n\n\n\nOnMarketDepth()\n\n\nDescription\n\n\nThe OnMarketDepth() method is called up whenever there is a change in the level 2 data (market depth).\nIn a multibar indicator, the BarsInProgress method identifies the data series for which the OnMarketDepth() method is called up.\nOnMarketDepth is not called up for historical data.\n\n\nMore information can be found here: \nEvents\n.\n\n\nUsage\n\n\nprotected override void OnMarketDepth(MarketDepthEventArgs e)\n\n\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\n[\nMarketDepthEventArgs\n] e\n\n\nExample\n\n\nprotected override void OnMarketDepth(MarketDepthEventArgs e)\n{\n    // Output for the current ask price\n    if (e.MarketDataType == MarketDataType.Ask \n e.Operation == Operation.Update)\n    Print(\nThe current ask is + e.Price + \n \n + e.Volume);\n}\n\n\n\n\nOnOrderUpdate()\n\n\nDescription\n\n\nThe OnOrderUpdate() method is called up whenever the status is changed by a strategy-managed order.\nA status change can therefore occur due to a change in the volume, price or status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for the relevant events.\n\n\nImportant note:\n\nIf a strategy is to be controlled by order executions, we highly recommend that you use OnExecution() instead of OnOrderUpdate(). Otherwise there may be problems with partial executions.\n\n\nMore information can be found here: [\nEvents\n].\n\n\nParameter\n\n\nAn order object of the type IOrder\n\n\nReturn Value\n\n\nNone\n\n\nUsage\n\n\nprotected override void OnOrderUpdate(IOrder order)\n\n\n\n\nExample\n\n\nprivate IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n    if (entryOrder == null \n Close[0] \n Open[0])\n    entryOrder = EnterLong();\n}\nprotected override void OnOrderUpdate(IOrder order)\n{\n    if (entryOrder != null \n entryOrder == order)\n    {\n        Print(order.ToString());\n        if (order.OrderState == OrderState.Cancelled)\n        {\n            Print(\nOrder was canceled.\n);\n            entryOrder = null;\n        }\n    }\n}\n\n\n\n\nOnStartUp()\n\n\nDescription\n\n\nThe OnStartUp() method can be overridden to initialize your own variables, perform license checks or call up user forms etc.\nOnStartUp() is only called up once at the beginning of the script, after [\nInitialize()\n] and before [\nOnBarUpdate()\n] are called up.\n\n\nSee [\nOnTermination()\n].\n\n\nMore information can be found here: [\nEvents\n] .\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnStartUp()\n\n\n\n\nExample\n\n\nprivate myForm Window;\nprotected override void OnStartUp()\n{\n    if (ChartControl != null)\n    {\n    Window = new myForm();\n    Window.Show();\n    }\n}\n\n\n\n\nOnTermination()\n\n\nDescription\n\n\nThe OnTermination() method can also be overridden in order to once again free up all the resources used in the script.\n\n\nSee \nInitialize()\n and \nOnStartUp()\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnTermination()\n\n\n\n\nMore Information\n\n\nCaution:\n\nPlease do not override the Dispose() method since this can only be used much later within the script. This would lead to resources being used and held for an extended period and thus potentially causing unexpected consequences for the entire application.\n\n\nExample\n\n\nprotected override void OnTermination()\n{\n    if (Window != null)\n    {\n        Window.Dispose();\n        Window = null;\n    }\n}", 
            "title": "Events"
        }, 
        {
            "location": "/events/#events", 
            "text": "AgenaTrader is an  event-oriented  application by definition.  Programming in AgenaTrader using the various application programming interface ([ API ]) methods is based initially on the [ Overwriting ] of routines predefined for event handling.  The following methods can be used and therefore overwritten:   [ OnBarUpdate() ]  [ OnExecution() ]  [ OnMarketData() ]  [ OnMarketDepth() ]  [ OnOrderUpdate() ]  [ OnStartUp() ]  [ OnTermination() ]", 
            "title": "Events"
        }, 
        {
            "location": "/events/#onbarupdate", 
            "text": "", 
            "title": "OnBarUpdate()"
        }, 
        {
            "location": "/events/#description", 
            "text": "The OnBarUpdate() method is called up whenever a bar changes; depending on the variables of  CalculateOnBarClose , this will happen upon every incoming tick or when the bar has completed/closed.\nOnBarUpdate is the most important method and also, in most cases, contains the largest chunk of code for your self-created indicators or strategies.\nThe editing begins with the oldest bar and goes up to the newest bar within the chart. The oldest bar has the number 0. The indexing and numbering will continue to happen; in order to obtain the numbering of the bars you can use the current bar variable. You can see an example illustrating this below.  Caution: the numbering/indexing is different from the bar index \u2013 see  Bars .  More information can be found here:  Events .", 
            "title": "Description"
        }, 
        {
            "location": "/events/#parameter", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#return-value", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#usage", 
            "text": "protected override void OnBarUpdate()", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#example", 
            "text": "protected override void OnBarUpdate()\n{\n    Print( Calling of OnBarUpdate for the bar number   + CurrentBar +   from   +Time[0]);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/#onexecution", 
            "text": "", 
            "title": "OnExecution()"
        }, 
        {
            "location": "/events/#description_1", 
            "text": "The OnExecution() method is called up when an order is executed (filled).\nThe status of a strategy can be changed by a strategy-managed order. This status change can be initiated by the changing of a volume, price or the status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for all events.  OnExecution() will always be executed AFTER [ OnOrderUpdate() ].  More information can be found here: [ Events ]", 
            "title": "Description"
        }, 
        {
            "location": "/events/#parameter_1", 
            "text": "An execution object of the type IExecution", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#return-value_1", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#usage_1", 
            "text": "protected override void OnExecution(IExecution execution)", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#example_1", 
            "text": "private IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n    if (entryOrder == null   Close[0]   Open[0])\n    entryOrder = EnterLong();\n}\nprotected override void OnExecution(IExecution execution)\n{\n    // Example 1\n    if (entryOrder != null   execution.Order == entryOrder)\n    Print(execution.ToString());\n    // Example 2\n    if (execution.Order != null   execution.Order.OrderState == OrderState.Filled)\n    Print(execution.ToString());\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/#onmarketdata", 
            "text": "", 
            "title": "OnMarketData()"
        }, 
        {
            "location": "/events/#description_2", 
            "text": "The OnMarketData() method is called up when a change in level 1 data has occurred, meaning whenever there is a change in the bid price, ask price, bid volume, or ask volume, and of course in the last price after a real turnover has occurred.\nIn a multibar indicator, the BarsInProgress method identifies the data series that was used for an information request for OnMarketData().\nOnMarketData() will not be called up for historical data.\nMore information can be found here:  Events .  Notes regarding data from Yahoo (YFeed)  The field \"LastPrice\" equals \u2013 as usual \u2013 either the bid price or the ask price, depending on the last revenue turnover.  The \u201eMarketDataType\u201c field always equals the \u201elast\" value  The fields \"Volume\", \"BidSize\" and \"AskSize\" are always 0.", 
            "title": "Description"
        }, 
        {
            "location": "/events/#usage_2", 
            "text": "protected override void OnMarketData(MarketDataEventArgs e)", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#return-value_2", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#parameter_2", 
            "text": "[ MarketDataEventArgs ] e", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#example_2", 
            "text": "protected override void OnMarketData(MarketDataEventArgs e)\n{\n    Print( AskPrice  +e.AskPrice);\n    Print( AskSize  +e.AskSize);\n    Print( BidPrice  +e.BidPrice);\n    Print( BidSize  +e.BidSize);\n    Print( Instrument  +e.Instrument);\n    Print( LastPrice  +e.LastPrice);\n    Print( MarketDataType  +e.MarketDataType);\n    Print( Price  +e.Price);\n    Print( Time  +e.Time);\n    Print( Volume  +e.Volume);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/#onmarketdepth", 
            "text": "", 
            "title": "OnMarketDepth()"
        }, 
        {
            "location": "/events/#description_3", 
            "text": "The OnMarketDepth() method is called up whenever there is a change in the level 2 data (market depth).\nIn a multibar indicator, the BarsInProgress method identifies the data series for which the OnMarketDepth() method is called up.\nOnMarketDepth is not called up for historical data.  More information can be found here:  Events .", 
            "title": "Description"
        }, 
        {
            "location": "/events/#usage_3", 
            "text": "protected override void OnMarketDepth(MarketDepthEventArgs e)", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#return-value_3", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#parameter_3", 
            "text": "[ MarketDepthEventArgs ] e", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#example_3", 
            "text": "protected override void OnMarketDepth(MarketDepthEventArgs e)\n{\n    // Output for the current ask price\n    if (e.MarketDataType == MarketDataType.Ask   e.Operation == Operation.Update)\n    Print( The current ask is + e.Price +     + e.Volume);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/#onorderupdate", 
            "text": "", 
            "title": "OnOrderUpdate()"
        }, 
        {
            "location": "/events/#description_4", 
            "text": "The OnOrderUpdate() method is called up whenever the status is changed by a strategy-managed order.\nA status change can therefore occur due to a change in the volume, price or status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for the relevant events.  Important note: If a strategy is to be controlled by order executions, we highly recommend that you use OnExecution() instead of OnOrderUpdate(). Otherwise there may be problems with partial executions.  More information can be found here: [ Events ].", 
            "title": "Description"
        }, 
        {
            "location": "/events/#parameter_4", 
            "text": "An order object of the type IOrder", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#return-value_4", 
            "text": "None", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#usage_4", 
            "text": "protected override void OnOrderUpdate(IOrder order)", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#example_4", 
            "text": "private IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n    if (entryOrder == null   Close[0]   Open[0])\n    entryOrder = EnterLong();\n}\nprotected override void OnOrderUpdate(IOrder order)\n{\n    if (entryOrder != null   entryOrder == order)\n    {\n        Print(order.ToString());\n        if (order.OrderState == OrderState.Cancelled)\n        {\n            Print( Order was canceled. );\n            entryOrder = null;\n        }\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/#onstartup", 
            "text": "", 
            "title": "OnStartUp()"
        }, 
        {
            "location": "/events/#description_5", 
            "text": "The OnStartUp() method can be overridden to initialize your own variables, perform license checks or call up user forms etc.\nOnStartUp() is only called up once at the beginning of the script, after [ Initialize() ] and before [ OnBarUpdate() ] are called up.  See [ OnTermination() ].  More information can be found here: [ Events ] .", 
            "title": "Description"
        }, 
        {
            "location": "/events/#parameter_5", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#return-value_5", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#usage_5", 
            "text": "protected override void OnStartUp()", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#example_5", 
            "text": "private myForm Window;\nprotected override void OnStartUp()\n{\n    if (ChartControl != null)\n    {\n    Window = new myForm();\n    Window.Show();\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/events/#ontermination", 
            "text": "", 
            "title": "OnTermination()"
        }, 
        {
            "location": "/events/#description_6", 
            "text": "The OnTermination() method can also be overridden in order to once again free up all the resources used in the script.  See  Initialize()  and  OnStartUp() .  More information can be found here:  Events .", 
            "title": "Description"
        }, 
        {
            "location": "/events/#parameter_6", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/events/#return-value_6", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/events/#usage_6", 
            "text": "protected override void OnTermination()", 
            "title": "Usage"
        }, 
        {
            "location": "/events/#more-information", 
            "text": "Caution: \nPlease do not override the Dispose() method since this can only be used much later within the script. This would lead to resources being used and held for an extended period and thus potentially causing unexpected consequences for the entire application.", 
            "title": "More Information"
        }, 
        {
            "location": "/events/#example_6", 
            "text": "protected override void OnTermination()\n{\n    if (Window != null)\n    {\n        Window.Dispose();\n        Window = null;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/", 
            "text": "Strategy Programming\n\n\nAccount\n\n\nDescription\n\n\nAccount is an object containing information about the account with which the current strategy is working.\n\n\nThe individual properties are:\n\n\n\n\n\n\nAccount.AccountConnection\n\n    Name for the broker connection used (the name assigned under the account connection submenu)\n\n\n\n\n\n\nAccount.AccountType\n\n    Type of account (live account, simulated account etc.)\n\n\n\n\n\n\nAccount.Broker\n\n    Name/definition for the broker\n\n\n\n\n\n\nAccount.BuyingPower\n\n    The current account equity in consideration of the leverage provided by the broker (IB leverages your account equity by a factor of 4, meaning that with 10000\u20ac your buying power is equal to 40000\u20ac)\n\n\n\n\n\n\nAccount.CashValue\n\n    Amount (double)\n\n\n\n\n\n\nAccount.Currency\n\n    Currency in which the account is held\n\n\n\n\n\n\nAccount.ExcessEquity\n\n    Excess\n\n\n\n\n\n\nAccount.InitialMargin\n\n    Initial margin (depends on the broker, double)\n\n\n\n\n\n\nAccount.InstrumentType\n\n    Type of trading instrument (type AgenaTrader.Plugins.InstrumentTypes)\n\n\n\n\n\n\nAccount.IsDemo\n\n    True, if the account is a demo account\n\n\n\n\n\n\nAccount.Name\n\n    Name of the account (should be identical to Account.AccountConnection)\n\n\n\n\n\n\nAccount.OverNightMargin\n\n    Overnight margin (depends on the broker, double)\n\n\n\n\n\n\nAccount.RealizedProfitLoss\n\n    Realized profits and losses (double)\n\n\n\n\n\n\nExample\n\n\nPrint(\nAccountConnection \n + Account.AccountConnection);\nPrint(\nAccountType \n + Account.AccountType);\nPrint(\nBroker \n + Account.Broker);\nPrint(\nBuyingPower \n + Account.BuyingPower);\nPrint(\nCashValue \n + Account.CashValue);\nPrint(\nCurrency \n + Account.Currency);\nPrint(\nExcessEquity \n + Account.ExcessEquity);\nPrint(\nInitialMargin \n + Account.InitialMargin);\nPrint(\nInstrumentTypes \n + Account.InstrumentTypes);\nPrint(\nIsDemo \n + Account.IsDemo);\nPrint(\nName \n + Account.Name);\nPrint(\nOverNightMargin \n + Account.OverNightMargin);\nPrint(\nRealizedProfitLoss \n + Account.RealizedProfitLoss);\n\n\n\n\nBarsSinceEntry()\n\n\nDescription\n\n\nThe property \u201cBarsSinceEntry\u201d returns the number of bars that have occurred since the last entry into the market.\n\n\nUsage\n\n\nBarsSinceEntry()\nBarsSinceEntry(string signalName)\n\n\n\n\nFor multi-bar strategies\n\n\nBarsSinceEntry(int barsInProgressIndex, string signalName, int entriesAgo)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nThe signal name (string) that has been used to clearly label the entry within an entry method.\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\n\n\n                   Index for the data series for which the entry order was executed.                                          \n                   See *[BarsInProgress][*BarsInProgress*].*                                                                  |\n\n\n\n| entriesAgo          | Number of entries in the past. A zero indicates the number of bars that have formed after the last entry. |\n\n\nExample\n\n\nPrint(\nThe last entry was \n + BarsSinceEntry() + \n bars ago.\n);\n\n\n\n\nBarsSinceExit()\n\n\nDescription\n\n\nThe property \u201cBarsSinceExit\u201d outputs the number of bars that have occurred since the last exit from the market.\n\n\nUsage\n\n\nBarsSinceExit()\nBarsSinceExit(string signalName)\n\n\n\n\nFor multi-bar strategies\n\n\nBarsSinceExit(int barsInProgressIndex, string signalName, int exitsAgo)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nThe signal name (string) that has been used to clearly label the exit within the exit method.\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\n\n\n                   Index of the data series for which the exit order has been executed.                                                       \n                   See [*BarsInProgress*].                                                                                                    |\n\n\n\n| exitsAgo            | Number of exits that have occurred in the past. A zero indicates the number of bars that have formed after the last exit. |\n\n\nExample\n\n\nPrint(\nThe last exit was \n + BarsSinceExit() + \n bars ago.\n);\n\n\n\n\nCancelOrder()\n\n\nDescription\n\n\nCancel order deletes an order.\n\n\nA cancel request is sent to the broker. There is no guarantee that the order will actually be deleted there. It may occur that the order receives a partial execution before it is deleted. Therefore we recommend that you check the status of the order with [\nOnOrderUpdate()\n].\n\n\nUsage\n\n\nCancelOrder(IOrder order)\n\n\n\n\nParameter\n\n\nAn order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\nprivate IOrder myEntryOrder = null;\nprivate int barNumberOfOrder = 0;\nprotected override void OnBarUpdate()\n{\n// Place an entry stop at the high of the current bar\nif (myEntryOrder == null)\n{\nmyEntryOrder = EnterLongStop(High[0], \nstop long\n);\nbarNumberOfOrder = CurrentBar;\n}\n// Delete the order after 3 bars\nif (Position.MarketPosition == PositionType.Flat \n\nCurrentBar \n barNumberOfOrder + 3)\nCancelOrder(myEntryOrder);\n}\n\n\n\n\nChangeOrder()\n\n\nDescription\n\n\nChange order, as the name suggests, changes an order.\n\n\nUsage\n\n\nChangeOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\niOrder\n\n\nAn order object of the type \u201cIOrder\u201d\n\n\n\n\n\n\nquantity\n\n\nNumber of units to be ordered\n\n\n\n\n\n\nlimitPrice\n\n\nLimit price. Set this to 0 if not needed\n\n\n\n\n\n\nstopPrice\n\n\nStop price. Set this to 0 if not needed\n\n\n\n\n\n\n\n\nExample\n\n\nprivate IOrder stopOrder = null;\nprotected override void OnBarUpdate()\n{\n// If the position is profiting by 4 ticks then set the stop to break-even\nif (stopOrder != null \n stopOrder.StopPrice \n Position.AvgPrice \n Close[0] \n= Position.AvgPrice + 4 * TickSize)\nChangeOrder(stopOrder, stopOrder.Quantity, stopOrder.LimitPrice, Position.AvgPrice);\n}\n\n\n\n\nDataSeriesConfigurable\n\n\nDefaultQuantity\n\n\nDescription\n\n\nChange order changes an order.\n\n\nDefault quantity defines the amount to be used in a strategy. Default quantity is set within the [\nInitialize()\n] method.\n\n\nUsage\n\n\nChangeOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)\n\n\n\n\nParameter\n\n\nan int value containing the amount (stocks, contracts etc.)\n\n\nExample\n\n\nprotected override void Initialize()\n{\nDefaultQuantity = 100;\n}\n\n\n\n\nEnterLong()\n\n\nDescription\n\n\nEnter long creates a long position (buy).\n\n\nIf a signature not containing an amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterLongLimit()\n], [\nEnterLongStop()\n], [\nEnterLongStopLimit()\n].\n\n\nUsage\n\n\nEnterLong()\nEnterLong(string signalName)\nEnterLong(int quantity)\nEnterLong(int quantity, string signalName)\n\n//For multi-bar strategies\nEnterLong(int barsInProgressIndex, int quantity, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nThe amount of stocks/contracts\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the entry order is to be executed. See [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter a long position if the last entry is 10 bars in the past\n// and if two SMAs have crossed\nif (BarsSinceEntry() \n 10 \n CrossAbove(SMA(10), SMA(20), 1))\nEnterLong(\nSMA cross entry\n);\n\n\n\n\nEnterLongLimit()\n\n\nDescription\n\n\nEnter long limit creates a limit order for entering a long position (buy).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterLong()\n], [\nEnterLongStop()\n], [\nEnterLongStopLimit()\n].\n\n\nUsage\n\n\nEnterLongLimit(double limitPrice)\nEnterLongLimit(double limitPrice, string signalName)\nEnterLongLimit(int quantity, double limitPrice)\nEnterLongLimit(int quantity, double limitPrice, string signalName)\n\n\n\n\nFor Multibar-Strategies\n\n\nEnterLongLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount of stocks/contracts/etc.\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the entry order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until removed with [\nCancelOrder\n] or until it reaches its expiry (see [\nTimeInForce\n]).\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// A long position is placed if the last entry was 10 bars ago and the two SMAs have crossed each other\nif (BarsSinceEntry() \n 10 \n CrossAbove(SMA(10), SMA(20), 1))\nEnterLongLimit(\nSMA cross entry\n);\n\n\n\n\nEnterLongStop()\n\n\nDescription\n\n\nEnter long stop creates a limit order for entering a long position (buy).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterLong()\n], [\nEnterLongLimit()\n], [\nEnterLongStopLimit()\n].\n\n\nUsage\n\n\nEnterLongStop(double stopPrice)\nEnterLongStop(double stopPrice, string signalName)\nEnterLongStop(int quantity, double stopPrice)\nEnterLongStop(int quantity, double stopPrice, string signalName)\n\n\n\n\nFor multi-bar strategies\n\n\nEnterLongStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount of stocks or contracts etc.\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies\n\n\n\n\n\n\nIndex of the data series for which an entry order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted with the [\nCancelOrder\n] command or until it reaches its expiry time (see [\nTimeInForce\n]).\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\nprivate IOrder myEntryOrder = null;\n// Place an entry order at the high of the current bar\nif (myEntryOrder == null)\nmyEntryOrder = EnterLongStop(High[0], \nStop Long\n);\n\n\n\n\nEnterLongStopLimit()\n\n\nDescription\n\n\nEnter long stop limit creates a buy stop limit order for entering a long position.\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterLong()\n], [\nEnterLongLimit()\n], [\nEnterLongStop()\n].\n\n\nUsage\n\n\nEnterLongStopLimit(double limitPrice, double stopPrice)\nEnterLongStopLimit(double limitPrice, double stopPrice, string signalName)\nEnterLongStopLimit(int quantity, double limitPrice, double stopPrice)\nEnterLongStopLimit(int quantity, double limitPrice, double stopPrice, string signalName)\n\n\n\n\nFor multi-bar strategies\n\n\nEnterLongStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount of stocks or contracts to be ordered\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the entry order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until canceled with the CancelOrder command or until it reaches its expiry (see [\nTimeInForce\n]).\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\nprivate IOrder myEntryOrder = null;\n// Place an entry stop at the high of the current bar\n// if the high is reached, a limit order will be placed 2 ticks above the high\nif (myEntryOrder == null)\nmyEntryOrder = EnterLongStopLimit(High[0]+2*TickSize, High[0], \nStop Long\n);\n\n\n\n\nEnterShort()\n\n\nDescription\n\n\nEnter short creates a market order for entering a short position (naked sell).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterShortLimit()\n], [\nEnterShortStop()\n], [\nEnterShortStopLimit()\n].\n\n\nUsage\n\n\nEnterShort()\nEnterShort(string signalName)\nEnterShort(int quantity)\nEnterShort(int quantity, string signalName)\nFor multi-bar strategies\nEnterShort(int barsInProgressIndex, int quantity, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount of stocks/contracts etc.\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies\n\n\n\n\n\n\nIndex of the data series for which the entry order is to be executed\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// A short position will be placed if the last entry is 10 bars in the past and two SMAs have crossed each other\nif (BarsSinceEntry() \n 10 \n CrossBelow(SMA(10), SMA(20), 1))\nEnterShort(\nSMA cross entry\n);\n\n\n\n\nEnterShortLimit()\n\n\nDescription\n\n\nEnter short limit creates a limit order for entering a short position (naked short).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterShort()\n], [\nEnterShortStop()\n], [\nEnterShortStopLimit()\n].\n\n\nUsage\n\n\nEnterShortLimit(double limitPrice)\nEnterShortLimit(double limitPrice, string signalName)\nEnterShortLimit(int quantity, double limitPrice)\nEnterShortLimit(int quantity, double limitPrice, string signalName)\n\n\n\n\nFor Multibar-Strategies\n\n\nEnterShortLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount to be ordered\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the entry order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted with the CancelOrder command or until it reaches its expiry (see [\nTimeInForce\n]).\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter a short position if the last entry is 10 bars in the past and two SMAs have crossed each other\nif (BarsSinceEntry() \n 10 \n CrossBelow(SMA(10), SMA(20), 1))\nEnterShortLimit(\nSMA cross entry\n);\n\n\n\n\nEnterShortStop()\n\n\nDescription\n\n\nEnter short stop creates a limit order for entering a short position.\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\nSee [\nEnterShort()\n], [\nEnterShortLimit()\n], [\nEnterShortStopLimit()\n].\n\n\nUsage\n\n\nEnterShortStop(double stopPrice)\nEnterShortStop(double stopPrice, string signalName)\nEnterShortStop(int quantity, double stopPrice)\nEnterShortStop(int quantity, double stopPrice, string signalName)\n\n\n\n\nFor multi-bar strategies\n\n\nEnterShortStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount to be ordered\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the entry order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will remain active until canceled using the CancelOrder command or until it reaches its expiry time\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\nprivate IOrder myEntryOrder = null;\n// Place an entry stop at the low of the current bar\nif (myEntryOrder == null)\nmyEntryOrder = EnterShortStop(Low[0], \nstop short\n);\n\n\n\n\nEnterShortStopLimit()\n\n\nDescription\n\n\nEnter short stop limit creates a sell stop limit order for entering a short position.\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nEnterShort()\n], [\nEnterShortLimit()\n], [\nEnterShortStop()\n].\n\n\nUsage\n\n\nEnterShortStopLimit(double limitPrice, double stopPrice)\nEnterShortStopLimit(double limitPrice, double stopPrice, string signalName)\nEnterShortStopLimit(int quantity, double limitPrice, double stopPrice)\nEnterShortStopLimit(int quantity, double limitPrice, double stopPrice, string signalName)\n\n\n\n\nFor multi-bar strategies\n\n\nEnterShortStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nAmount to be ordered\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which an entry order is to be placed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nAn order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\nprivate IOrder myEntryOrder = null;\n// Place an entry stop at the low of the current bar; if the low is reached then place a limit order 2 ticks below the low\nif (myEntryOrder == null)\nmyEntryOrder = EnterShortStopLimit(Low[0]-2*TickSize, Low[0], \nstop short\n);\n\n\n\n\nEntriesPerDirection\n\n\nDescription\n\n\nEntries per direction defines the maximum number of entries permitted in one direction (long or short).\n\n\nWhether the name of the entry signal is taken into consideration or not is defined within [\nEntryHandling\n].\n\n\nEntries per direction is defined with the [\nInitialize()\n] method.\n\n\nUsage\n\n\nEntriesPerDirection\n\n\nParameter\n\n\nAn int value for the maximum entries permitted in one direction.\n\n\nExample\n\n\n// Example 1\n// If one of the two entry conditions is true and a long position is opened, then the other entry signal will be ignored\nprotected override void Initialize()\n{\nEntriesPerDirection = 1;\nEntryHandling = EntryHandling.AllEntries;\n}\nprotected override void OnBarUpdate()\n{\nif (CrossAbove(SMA(10), SMA(20), 1)\nEnterLong(\nSMA Cross Entry\n);\nif (CrossAbove(RSI(14, 3), 30, 1)\nEnterLong(\nRSI Cross Entry);\n}\n// Example 2\n// For each differently named entry signal, a long position will be opened\nprotected override void Initialize()\n{\nEntriesPerDirection = 1;\nEntryHandling = EntryHandling.UniqueEntries;\n}\nprotected override void OnBarUpdate()\n{\nif (CrossAbove(SMA(10), SMA(20), 1)\nEnterLong(\nSMA Cross Entry\n);\nif (CrossAbove(RSI(14, 3), 30, 1)\nEnterLong(\nRSI Cross Entry);\n}\n\n\n\n\nEntryHandling\n\n\nDescription\n\n\nEntry handling decides how the maximum number of entries permitted in one direction is interpreted ([\nEntriesPerDirection\n]).\n\n\nEntry handling is defined with the [\nInitialize()\n] method.\n\n\nEntryHandling.AllEntries\n\n\nAgenaTrader continues to create entry orders until the maximum number of entries permitted (defined in [\nEntriesPerDirection\n]) per direction (long or short) is reached, regardless of how the entry signals are named.\n\n\nIf entries per direction = 2, then enter long (\"SMA crossover\") and enter long (\"range breakout\") combined will reach the maximum number of long entries permitted.\n\n\nEntryHandling.UniqueEntries\n\n\nAgenaTrader continues to generate entry orders until the maximum number of entries (defined in entries per direction) in one direction (long or short) for the differently named entry signals has been reached.\nIf entries per direction = 2, then it is possible for two signals for enter long (\"SMA crossover\") \nand\n 2 signals for enter long (\"range breakout\") to be traded.\n\n\nUsage\n\n\nEntryHandling\n\n\nExample\n\n\nSee [\nEntriesPerDirection\n].\n\n\nExcludeTradeHistoryInBacktest\n\n\nExitLong()\n\n\nDescription\n\n\nExit long creates a sell market order for closing a long position (sell).\n\n\nIf a signature not containing a set amount is used, the amount is set by [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nExitLong()\n], [\nExitLongLimit()\n], [\nExitLongStop()\n], [\nExitLongStopLimit()\n].\n\n\nUsage\n\n\nExitLong()\nExitLong(int quantity)\nExitLong(string fromEntry signal)\nExitLong(string signalName, string fromEntry signal)\nExitLong(int quantity, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitLong(int barsInProgressIndex, int quantity, string signalName, string fromEntry signal)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nquantity\n\n\nThe quantity to be sold\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the attached entry signal\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong(\nSMA Cross Entry\n);\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLong();\n\n\n\n\nExitLongLimit()\n\n\nDescription\n\n\nExit long limit creates a sell limit order for closing a long position (i.e. for selling).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\nSee [\nExitLong()\n], [\nExitLongLimit()\n], [\nExitLongStop()\n], [\nExitLongStopLimit()\n].\n\n\nUsage\n\n\nExitLongLimit(double limitPrice)\nExitLongLimit(int quantity, double limitPrice)\nExitLongLimit(double limitPrice, string fromEntry signal)\nExitLongLimit(double limitPrice, string signalName, string fromEntry signal)\nExitLongLimit(int quantity, double limitPrice, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitLongLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName, string fromEntry signal)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the attached entry signal\n\n\n\n\n\n\nquantity\n\n\nOrder quantity to be sold\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong(\nSMA Cross Entry\n);\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLongLimit(GetCurrentBid());\n\n\n\n\nExitLongStop()\n\n\nDescription\n\n\nExit long stop creates a sell stop order for closing a long position (short).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\nSee [\nExitLong()\n], [\nExitLongLimit()\n], [\nExitLongStop()\n], [\nExitLongStopLimit()\n].\n\n\nUsage\n\n\nExitLongStop(int quantity, double stopPrice)\nExitLongStop(double stopPrice, string fromEntry signal)\nExitLongStop(double stopPrice, string signalName, string fromEntry signal)\nExitLongStop(int quantity, double stopPrice, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitLongStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName, string fromEntry signal)ExitLongStop\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the associated entry signal\n\n\n\n\n\n\nquantity\n\n\nThe quantity to be sold\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong(\nSMA Cross Entry\n);\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLongStop(Low[0]);\n\n\n\n\nExitLongStopLimit()\n\n\nDescription\n\n\nExit long stop limit creates a sell stop limit order for closing a long position (i.e. selling).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nExitLong()\n], [\nExitLongLimit()\n], [\nExitLongStop()\n], [\nExitLongStopLimit()\n].\n\n\nUsage\n\n\nExitLongStopLimit(double limitPrice, double stopPrice)\nExitLongStopLimit(int quantity, double limitPrice, double stopPrice)\nExitLongStopLimit(double limitPrice, double stopPrice, string fromEntry signal)\nExitLongStopLimit(double limitPrice, double stopPrice, string signalName, string fromEntry signal)\nExitLongStopLimit(int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)\n\n\n\n\nFor Multibar-Strategies\n\n\nExitLongStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the associated entry signal\n\n\n\n\n\n\nquantity\n\n\nThe quantity to be sold\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong(\nSMA Cross Entry\n);\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLongStopLimit(Low[0]-10*TickSize, Low[0]);\n\n\n\n\nExitOnClose\n\n\nExitOnCloseSeconds\n\n\nExitShort()\n\n\nDescription\n\n\nExit short creates a buy-to-cover market order for closing a short position (buy).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\nSee [\nExitShort()\n], [\nExitShortLimit()\n], [\nExitShortStop()\n], [\nExitShortStopLimit()\n].\n\n\nUsage\n\n\nExitShort()\nExitShort(int quantity)\nExitShort(string fromEntry signal)\nExitShort(string signalName, string fromEntry signal)\nExitShort(int quantity, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitShort(int barsInProgressIndex, int quantity, string signalName, string fromEntry signal)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nQuantity\n\n\nOrder quantity to be bought\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the associated entry signal\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross each other\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort(\nSMA cross entry\n);\n// Close position\nif (CrossAbove(SMA(10), SMA(20), 1))\nExitShort();\n\n\n\n\nExitShortLimit()\n\n\nDescription\n\n\nExit short limit creates a buy-to-cover limit order for closing a short position (buy).\n\n\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nExitShort()\n], [\nExitShortLimit()\n], [\nExitShortStop()\n], [\nExitShortStopLimit()\n].\n\n\nUsage\n\n\nExitShortLimit(double limitPrice)\nExitShortLimit(int quantity, double limitPrice)\nExitShortLimit(double limitPrice, string fromEntry signal)\nExitShortLimit(double limitPrice, string signalName, string fromEntry signal)\nExitShortLimit(int quantity, double limitPrice, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitShortLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName, string fromEntry signal)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the associated entry signal\n\n\n\n\n\n\nquantity\n\n\nOrder quantity to be bought\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort(\nSMA cross entry\n);\n// Close position\nif (CrossAbove(SMA(10), SMA(20), 1))\nExitShortLimit(GetCurrentAsk());\n\n\n\n\nExitShortStop()\n\n\nDescription\n\n\nExit short stop creates a buy-to-cover stop order for closing a short position.\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nExitShort()\n], [\nExitShortLimit()\n], [\nExitShortStop()\n], [\nExitShortStopLimit()\n].\n\n\nUsage\n\n\nExitShortStop(int quantity, double stopPrice)\nExitShortStop(double stopPrice, string fromEntry signal)\nExitShortStop(double stopPrice, string signalName, string fromEntry signal)\nExitShortStop(int quantity, double stopPrice, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitShortStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName, string fromEntry signal)ExitLongStop\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the associated entry signal\n\n\n\n\n\n\nquantity\n\n\nOrder quantity to be bought\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs have crossed\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort(\nSMA cross entry\n);\n// Close position\nif (CrossAbove (SMA(10), SMA(20), 1))\nExitShortStop(High[0]);\n\n\n\n\nExitShortStopLimit()\n\n\nDescription\n\n\nExit short stop limit creates a buy-to-cover stop limit order for closing a short position.\nIf a signature not containing a set amount is used, the amount is set by the [\nDefaultQuantity\n] or taken from the strategy dialog window.\n\n\nSee [\nExitLong()\n], [\nExitLongLimit()\n], [\nExitLongStop()\n], [\nExitLongStopLimit()\n].\n\n\nUsage\n\n\nExitShortStopLimit(double limitPrice, double stopPrice)\nExitShortStopLimit(int quantity, double limitPrice, double stopPrice)\nExitShortStopLimit(double limitPrice, double stopPrice, string fromEntry signal)\nExitShortStopLimit(double limitPrice, double stopPrice, string signalName, string fromEntry signal)\nExitShortStopLimit(int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)\n\n\n\n\nFor multi-bar strategies\n\n\nExitShortStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsignalName\n\n\nAn unambiguous name\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the associated entry signal\n\n\n\n\n\n\nquantity\n\n\nOrder quantity to be bought\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor [\nMultibar\n][\nMultiBars\n] strategies.\n\n\n\n\n\n\nIndex of the data series for which the exit order is to be executed.\n\n\n\n\n\n\n\n\nSee [\nBarsInProgress\n].\n\n\n\n\n\n\n\n\nlimitPrice\n\n\nA double value for the limit price\n\n\n\n\n\n\nstopPrice\n\n\nA double value for the stop price\n\n\n\n\n\n\nliveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\n// Enter if two SMAs cross each other\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort(\nSMA cross entry\n);\n// Close position\nif (CrossAbove(SMA(10), SMA(20), 1))\nExitShortStopLimit(High[0]+10*TickSize, High[0]);\n\n\n\n\nGetAccountValue()\n\n\nDescription\n\n\nGet account value outputs information regarding the account for which the current strategy is being carried out.\n\n\nSee [\nGetProfitLoss()\n].\n\n\nUsage\n\n\nGetAccountValue(AccountItem accountItem)\n\n\n\n\nParameter\n\n\nPossible values for account item are:\n\n\nAccountItem.BuyingPower\n\n\nAccountItem.CashValue\n\n\nAccountItem.RealizedProfitLoss\n\n\nReturn Value\n\n\na double value for the account item\n\n\nfor historical bars, a zero (0) is returned\n\n\nExample\n\n\nPrint(\nThe current account cash value is \n + GetAccountValue(AccountItem.CashValue));\nPrint(\nThe current account cash value with the leverage provided by the broker is \n + GetAccountValue(AccountItem.BuyingPower));\nPrint(\nThe current P/L already realized is \n + GetAccountValue(AccountItem.RealizedProfitLoss));\n\n\n\n\nGetProfitLoss()\n\n\nDescription\n\n\nGet profit loss outputs the currently unrealized profit or loss for a running position.\n\n\nSee [\nGetAccountValue()\n].\n\n\nUsage\n\n\nGetProfitLoss(int pLType);\n\n\n\n\nParameter\n\n\nPotential values for the P/L type are:\n\n\n0 \u2013 Amount: P/L as a currency amount\n\n\n1 \u2013 Percent: P/L in percent\n\n\n2 \u2013 Risk: P/L in Van Tharp R-multiples ([\nhttp://www.vantharp.com/tharp-concepts/risk-and-r-multiples.asp\n])\n\n\n3 \u2013 P/L in ticks\n\n\nReturn Value\n\n\na double value for the unrealized profit or loss\n\n\nExample\n\n\nPrint(\nThe current risk for the strategy \n + this.Name + \n is \n + GetProfitLoss(1) + \n \n + Instrument.Currency);\nPrint(\nThis equals \n+ string.Format( \n{0:F1} R.\n, GetProfitLoss(3)));\n\n\n\n\nMarketPosition\n\n\nSee [\nPosition.MarketPosition\n].\n\n\nPerformance\n\n\nDescription\n\n\nPerformance is an object containing information regarding all trades that have been generated by a strategy.\n\n\nThe trades are sorted into multiple lists. With the help of these lists it is easier to create a performance evaluation.\n\n\nSee Performance Characteristics.\n\n\nThe individual lists are:\n\n\n\n\n\n\nPerformance.AllTrades\n    \nA [\nTrade\n] collection object containing all trades generated by a strategy\n\n\n\n\n\n\nPerformance.LongTrades\n    \nA [\nTrade\n] collection object containing all long trades generated by a strategy\n\n\n\n\n\n\nPerformance.ShortTrades\n    \nA [\nTrade\n] collection object containing all short trades generated by a strategy\n\n\n\n\n\n\nPerformance.WinningTrades\n    \nA [\nTrade\n] collection object containing all profitable trades generated by a strategy\n\n\n\n\n\n\nPerformance.LosingTrades\n    \nA [\nTrade\n] collection object containing all loss trades generated by a strategy\n\n\n\n\n\n\nExample\n\n\n// When exiting a strategy, create a performance evaluation\nprotected override void OnTermination()\n{\nPrint(\nPerformance evaluation of the strategy : \n + this.Name);\nPrint(\n----------------------------------------------------\n);\nPrint(\nAmount of all trades: \n + Performance.AllTrades.Count);\nPrint(\nAmount of winning trades: \n + Performance.WinningTrades.Count);\nPrint(\nAmount of all loss trades: \n + Performance.LosingTrades.Count);\nPrint(\nAmount of all long trades: \n + Performance.LongTrades.Count);\nPrint(\nAmount of short trades: \n + Performance.ShortTrades.Count);\nPrint(\nResult: \n + Account.RealizedProfitLoss + \n \n + Account.Currency);\n}\n\n\n\n\nPosition\n\n\nDescription\n\n\nPosition is an object containing information regarding the position currently being managed by a strategy.\n\n\nThe individual properties are:\n\n\n\n\n\n\nPosition.AvgPrice\n    \nThe average buy or sell price of a position.\n    For positions without partial executions, this is equal to the entry price.\n\n\n\n\n\n\nPosition.CreatedDateTime\n    \nDate and time at which the position was opened.\n\n\n\n\n\n\nPosition.Instrument\n    \nThe trading instrument in which the position exists.\n    See \nInstruments\n.\n\n\n\n\n\n\nPosition.MarketPosition\n    \nOne of three possible positions in the market:\n\n\n\n\nPositionType.Flat\n\n\nPositionType.Long\n\n\nPositionType.Short\n\n\n\n\n\n\n\n\nPosition.OpenProfitLoss\n    \nThe currently not yet realized profit or loss.\n    See [\nGetProfitLoss()\n].\n\n\n\n\n\n\nPosition.ProfitCurrency\n    \nProfit (or loss) displayed as a currency amount.\n\n\n\n\n\n\nPosition.ProfitPercent\n    \nProfit (or loss) displayed in percent.\n\n\n\n\n\n\nPosition.ProfitPoints\n    \nProfit (or loss) displayed in points or pips.\n\n\n\n\n\n\nPosition.Quantity\n    \nAmount of stocks, contracts, CFDs etc. within a position.\n\n\n\n\n\n\nExample\n\n\nif (Position.MarketPosition != PositionType.Flat)\n{\nPrint(\nAverage price \n + Position.AvgPrice);\nPrint(\nOpening time \n + Position.CreatedDateTime);\nPrint(\nInstrument \n + Position.Instrument);\nPrint(\nCurrent positioning \n + Position.MarketPosition);\nPrint(\nUnrealized P/L \n + Position.OpenProfitLoss);\nPrint(\nP/L (currency) \n + Position.ProfitCurrency);\nPrint(\nP/L (in percent) \n + Position.ProfitPercent);\nPrint(\nP/L (in points) \n + Position.ProfitPoints);\nPrint(\nPieces \n + Position.Quantity);\n}\n\n\n\n\nQuantity\n\n\nSee [\nPosition.Quantity\n][\nPosition.MarketPosition\n].\n\n\nSetProfitTarget()\n\n\nDescription\n\n\nSet profit target immediately creates a \u201ctake profit\u201d order after an entry order is generated. The order is sent directly to the broker and becomes active immediately.\nIf the profit target is static, you can also define SetProfitTarget() with the Initialize() method.\n\n\nSee [\nSetStopLoss()\n], [\nSetTrailStop()\n].\n\n\nUsage\n\n\nSetProfitTarget(double currency)\nSetProfitTarget(CalculationMode mode, double value)\nSetProfitTarget(string fromEntry signal, CalculationMode mode, double value)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncurrency\n\n\nSets the profit target in a currency, for example 500\u20ac.\n\n\n\n\n\n\nmode\n\n\nPossible values are:\n\n\n\n\n\n\n\n\n                - CalculationMode.Percent (display in percent)                                                                                                                     \n                - CalculationMode.Price (display as price value)                                                                                                                   \n                - CalculationMode.Ticks (display in ticks or pips)                                                                                                                 |\n\n\n\n| value            | The distance between entry price and profit target. This is dependent upon the \u201emode\u201c but generally refers to a monetary value, a percentage or a value in ticks. |\n| fromEntry signal | The name of the entry signal for which the profit target is to be generated. The amount is taken from the entry order referenced.                                 |\n\n\nExample\n\n\nprotected override void Initialize()\n{\n// Creates a profit target order 10 ticks above break-even\nSetProfitTarget(CalculationMode.Ticks, 10);\n}\n\n\n\n\nSetStopLoss()\n\n\nDescription\n\n\nSet stop loss creates a stop loss order after an entry order is placed. The order is sent directly to the broker and becomes effective immediately.\n\n\nIf the stop loss is static, then SetStopLoss() can be defined with the Initialize() method.\n\n\nSee [\nSetProfitTarget()\n], [\nSetTrailStop()\n].\n\n\nUsage\n\n\nSetStopLoss(double currency)\nSetStopLoss(double currency, bool simulated)\nSetStopLoss(CalculationMode mode, double value)\nSetStopLoss(string fromEntry signal, CalculationMode mode, double value, bool simulated)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncurrency\n\n\nThe difference between the stop loss and the entry price (=risk) in a currency, such as 500\u20ac\n\n\n\n\n\n\nmode\n\n\nPotential values can be:\n\n\n\n\n\n\n\n\n                - CalculationMode.Percent (display in percent)                                                                                                                                                               \n                - CalculationMode.Price (display as price value)                                                                                                                                                             \n                - CalculationMode.Ticks (display in ticks or pips)                                                                                                                                                           |\n\n\n\n| simulated        | When set to \u201ctrue,\u201d the stop order does not go live (as a market order) until the price has \u201etouched\u201c it for the first time (meaning that it is executed just as it would be under real market conditions). |\n| value            | The distance between stop price and profit target. This is dependent upon the \u201emode\u201c but generally refers to a monetary value, a percentage or a value in ticks.                                            |\n| fromEntry signal | The name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.                                                                              |\n\n\nExample\n\n\nprotected override void Initialize()\n{\n// Sets a stop of 500\u20ac\nSetStopLoss(500);\n}\n\n\n\n\nSetTrailStop()\n\n\nDescription\n\n\nSet trail stop creates a trail stop order after an entry order is generated. Its purpose is to protect you from losses, and after reaching break-even, to protect your gains.\n\n\nThe order is sent directly to the broker and becomes effective immediately.\n\n\nIf the stop loss price and the offset value are static, you can define SetTrailStop() with the Initialize() method.\n\n\nIf you use SetTrailStop() within the [\nOnBarUpdate()\n] method, you must make sure that the parameters are readjusted to the initial value, otherwise the most recently used settings will be used for the new position.\n\n\nFunctionality:\n\n\nAssuming that you have SetTrailStop(CalculationMode.Ticks, 30) selected:\n\n\nIn a long position, the stop will be 30 ticks from the previously reached high. If the market makes a new high, the stop will be adjusted. However, the stop will no longer be moved downwards.\n\n\nIn a short position, this behavior starts with the most recent low.\n\n\nTips:\n\n\nIt is not possible to use SetStopLoss and SetTrailStop for the same position at the same time within one strategy. The SetStopLoss() method will always have precedence over the other methods.\n\n\nHowever, it is possible to use both variants parallel to each other in the same strategy if they are referencing different entry signals.\n\n\nPartial executions of a single order will cause a separate trading stop for each partial position.\n\n\nIf a SetProfitTarget() is used in addition to a SetTrailStop(), then both orders will be automatically linked to form an OCO order.\n\n\nIt is always a stop market order that is generated, and not a stop limit order.\n\n\nIf a position is closed by a different exit order within the strategy, then the TrailingStopOrder is automatically deleted.\n\n\nSee [\nSetStopLoss()\n], [\nSetProfitTarget()\n].\n\n\nUsage\n\n\nSetTrailStop(double currency)\nSetTrailStop(double currency, bool simulated)\nSetTrailStop(CalculationMode mode, double value)\nSetTrailStop(string fromEntry signal, CalculationMode mode, double value, bool simulated)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncurrency\n\n\nThe distance between the stop loss and the entry price\n\n\n\n\n\n\nmode\n\n\nPossible values are:\n\n\n\n\n\n\n\n\n                - CalculationMode.Percent                                                                                                                                                                                    \n                - CalculationMode.Ticks                                                                                                                                                                                      |\n\n\n\n| simulated        | When set to \u201ctrue,\u201d the stop order does not go live (as a market order) until the price has \u201etouched\u201c it for the first time (meaning that it is executed just as it would be under real market conditions). |\n| value            | The distance between stop price and profit target. This is dependent upon the \u201emode\u201c but generally refers to a monetary value, a percentage or a value in ticks.                                            |\n| fromEntry signal | The name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.                                                                              |\n\n\nExample\n\n\nprotected override void Initialize()\n{\n// Sets a trailing stop of 30 ticks\nSetTrailStop(CalculationMode.Ticks, 30);\n}\n\n\n\n\nSubmitOrder()\n\n\nDescription\n\n\nSubmit order creates a user-defined order. For this order, no stop or limit order is placed in the market. All AgenaTrader control mechanisms are switched off for this order type. The user is responsible for managing the various stop and target orders, including partial executions.\n\n\nSee [\nOnOrderUpdate()\n], [\nOnExecution()\n].\n\n\nUsage\n\n\nSubmitOrder(int barsInProgressIndex, OrderAction orderAction, OrderType orderType, int quantity, double limitPrice, double stopPrice, string ocoId, string signalName)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbarsInProgressIndex\n\n\nFor multi-bar strategies.\n\n\n\n\n\n\nIndex of the data series for which the order is to be executed.\n\n\n\n\n\n\n\n\nSee BarsInProgress.\n\n\n\n\n\n\n\n\norderAction\n\n\nPossible values are:\n\n\n\n\n\n\n\n\n                   OrderAction.Buy                                                     \n                   Buy order for a long entry\n\n                   OrderAction.Sell                                                    \n                   Sell order for closing a long position\n\n                   OrderAction.SellShort                                               \n                   Sell order for a short entry\n\n                   OrderAction.BuyToCover                                              \n                   Buy order for closing a short position                              |\n\n\n\n| orderType           | Possible values:                                                 \n\n                       OrderType.Limit                                                   \n\n                       OrderType.Market                                                  \n\n                       OrderType.Stop                                                    \n\n                       OrderType.StopLimit                                                 |\n| quantity            | Amount                                                             |\n| limitPrice          | Limit value. Inputting a 0 makes this parameter irrelevant         |\n| stopPrice           | Stop value. Inputting a 0 makes this parameter irrelevant          |\n| ocoId               | A unique ID (string) for linking multiple orders into an OCO group |\n| signalName          | An unambiguous signal name (string)                                |\n\n\nReturn Value\n\n\nan order object of the type \u201cIOrder\u201d\n\n\nExample\n\n\nprivate IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n// Entry conditions\nif (Close[0] \n SMA(20)[0] \n entryOrder == null)\nentryOrder = SubmitOrder(0, OrderAction.Buy, OrderType.Market, 1, 0, 0, \n, \nEnter long\n);\n}\n\n\n\n\nTimeInForce\n\n\nDescription\n\n\nThe time in force property determines how long an order is valid for. The validity period is dependent upon which values are accepted by a broker.\n\n\nTimeInForce is specified with the [\nInitialize()\n] method.\n\n\nPermitted values are:\nTimeInForce.day\nTimeInForce.loc\nTimeInForce.gtc (GTC = good till canceled)\nTimeInForce.gtd\n\n\nDefault:\n TimeInForce.GTC\n\n\nUsage\n\n\nTimeInForce\n\n\nExample\n\n\nprotected override void Initialize()\n{\nTimeInForce = TimeInForce.Day;\n}\n\n\n\n\nTraceOrders\n\n\nDescription\n\n\nThe trace orders property is especially useful for keeping track of orders generated by strategies. It also provides an overview of which orders were generated by which strategies.\nTrace orders can be specified with the [\nInitialize()\n] method.\n\n\nWhen TraceOrders is activated, each order will display the following values in the output window:\n\n\n\n\nInstrument\n\n\nTime frame\n\n\nAction\n\n\nType\n\n\nLimit price\n\n\nStop price\n\n\nQuantity\n\n\nName\n\n\n\n\nThis information is useful when creating and debugging strategies.\n\n\nUsage\n\n\nTraceOrders\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\ntrue\n Tracing is currently switched on\n\nfalse\n Tracing is switched off\n\n\nExample\n\n\nprotected override void Initialize()\n{\nClearOutputWindow();\nTraceOrders = true;\n}\n\n\n\n\nTrade\n\n\nDescription\n\n\nTrade is an object containing information about trades that have been executed by a strategy or are currently running.\n\n\nThe individual properties are:\n\n\n\n\n\n\nTrade.AvgPrice\n\n    Average entry price\n\n\n\n\n\n\nTrade.ClosedProfitLoss\n\n    Profit or loss already realized\n\n\n\n\n\n\nTrade.Commission\n\n    Commissions\n\n\n\n\n\n\nTrade.CreatedDateTime\n\n    Time at which the trade was created\n\n\n\n\n\n\nTrade.EntryReason\n\n    Description of the entry signal\n    For strategies: signal entry name\n\n\n\n\n\n\nTrade.ExitDateTime\n\n    Time at which the trade was closed\n\n\n\n\n\n\nTrade.ExitPrice\n\n    Exit price\n\n\n\n\n\n\nTrade.ExitReason\n\n    Description of the exit signal\n    For strategies: name of the strategy\n\n\n\n\n\n\nTrade.Instrument\n\n    Description of the trading instrument\n\n\n\n\n\n\nTrade.MarketPosition\n\n    Positioning within the market\n\n\n\n\nPositionType.Flat\n\n\nPositionType.Long\n\n\nPositionType.Short\n\n\n\n\n\n\n\n\nTrade.OpenProfitLoss\n\n    Unrealized profit/loss of a running position\n\n\n\n\n\n\nTrade.ProfitCurrency\n\n    Profit or loss in the currency that the account is held in\n\n\n\n\n\n\nTrade.ProfitLoss\n\n    Profit or loss\n\n\n\n\n\n\nTrade.ProfitPercent\n\n    Profit or loss in percent\n\n\n\n\n\n\nTrade.ProfitPercentWithCommission\n\n    Profit or loss in percent with commissions\n\n\n\n\n\n\nTrade.ProfitPoints\n\n    Profit or loss in points/pips\n\n\n\n\n\n\nTrade.Quantity\n\n    Quantity of stocks/contracts/ETFs/etc.\n\n\n\n\n\n\nTrade.TimeFrame\n\n    Timeframe in which the trade was opened\n\n\n\n\n\n\nTrade.Url\n\n    URL for the snapshot of the chart at the moment of creation\n\n\n\n\n\n\nExample\n\n\nprotected override void OnTermination()\n{\n  if (Performance.AllTrades.Count \n 1) return;\n  foreach (ITrade trade in Performance.AllTrades)\n  {\n    Print(\nTrade #\n+trade.Id);\n    Print(\n--------------------------------------------\n);\n    Print(\nAverage price \n + trade.AvgPrice);\n    Print(\nRealized P/L \n + trade.ClosedProfitLoss);\n    Print(\nCommissions \n + trade.Commission);\n    Print(\nTime of entry \n + trade.CreatedDateTime);\n    Print(\nEntry reason \n + trade.EntryReason);\n    Print(\nTime of exit \n + trade.ExitDateTime);\n    Print(\nExit price \n + trade.ExitPrice);\n    Print(\nExit reason \n + trade.ExitReason);\n    Print(\nInstrument \n + trade.Instrument);\n    Print(\nPositioning \n + trade.MarketPosition);\n    Print(\nUnrealized P/L \n + trade.OpenProfitLoss);\n    Print(\nP/L (currency) \n + trade.ProfitCurrency);\n    Print(\nP/L \n + trade.ProfitLoss);\n    Print(\nP/L (in percent) \n + trade.ProfitPercent);\n    Print(\nP/L (% with commission)\n + trade.ProfitPercentWithCommission);\n    Print(\nPL (in points) \n + trade.ProfitPoints);\n    Print(\nQuantity \n + trade.Quantity);\n    Print(\nTimeframe \n + trade.TimeFrame);\n    Print(\nURL for the snapshot \n + trade.Url);\n    Print(\n);\n  }\n}\n\n\n\n\nUnmanaged\n\n\nBacktesting and Optimization\n\n\nPerformance Characteristics\n\n\nPerformance characteristics are the various factors that can be calculated for a list of trades. The trades can be generated by a strategy in real-time or based on a backtest.\n\n\nThe following are available:\n\n\n\n\nall trades\n\n\nall long trades\n\n\nall short trades\n\n\nall winning trades\n\n\nall losing trades\n\n\n\n\nSee [\nPerformance\n].\n\n\nThe individual factors are:\n\n\n\n\nAvgEtd\n\n    The average drawdown at the end of a trade\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.AvgEtd\n    \ncs\n    Print(\"Average ETD of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgEtd);\n\n\nAvgMae\n\n    Average maximum adverse excursion\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.AvgMae\n    \ncs\n    Print(\"Average MAE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMae);\n\n\nAvgMfe\n\n    Average maximum favorable excursion\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.AvgMfe\n    \ncs\n    Print(\"Average MFE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMfe);\n\n\nAvgProfit\n\n    Average profit for all trades\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.AvgProfit\n    \ncs\n    Print(\"Average profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgProfit);\n\n\nCumProfit\n\n    The cumulative winnings over all trades\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.CumProfit\n    \ncs\n    Print(\"Average cumulative profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.CumProfit);\n\n\nDrawDown\n\n    The drawdown for all trades\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.DrawDow\n    \ncs\n    Print(\"Drawdown of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.DrawDown);\n\n\nLargestLoser\n\n    The largest losing trade\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.LargestLoser\n    \ncs\n    Print(\"Largest loss of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestLoser);\n\n\nLargestWinner\n\n    The largest winning trade\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.LargestWinner\n    \ncs\n    Print(\"Largest win of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestWinner);\n\n\nProfitPerMonth\n\n    The total performance (wins/losses) for the month (also in percent)\n    \nTradeCollection\n.TradesPerformance.\nTradesPerformanceValues\n.ProfitPerMonth\n    \ncs\n    Print(\"Profit per month of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.ProfitPerMonth);\n\n\nStdDev\n\n    The standard deviation for the wins/losses. With this, you are able to identify outliers. The smaller the standard deviation, the higher the expectation of winnings.\n\n\n\n\nAll factors are double values.", 
            "title": "Strategy programming"
        }, 
        {
            "location": "/strategy_programming/#strategy-programming", 
            "text": "", 
            "title": "Strategy Programming"
        }, 
        {
            "location": "/strategy_programming/#account", 
            "text": "", 
            "title": "Account"
        }, 
        {
            "location": "/strategy_programming/#description", 
            "text": "Account is an object containing information about the account with which the current strategy is working.  The individual properties are:    Account.AccountConnection \n    Name for the broker connection used (the name assigned under the account connection submenu)    Account.AccountType \n    Type of account (live account, simulated account etc.)    Account.Broker \n    Name/definition for the broker    Account.BuyingPower \n    The current account equity in consideration of the leverage provided by the broker (IB leverages your account equity by a factor of 4, meaning that with 10000\u20ac your buying power is equal to 40000\u20ac)    Account.CashValue \n    Amount (double)    Account.Currency \n    Currency in which the account is held    Account.ExcessEquity \n    Excess    Account.InitialMargin \n    Initial margin (depends on the broker, double)    Account.InstrumentType \n    Type of trading instrument (type AgenaTrader.Plugins.InstrumentTypes)    Account.IsDemo \n    True, if the account is a demo account    Account.Name \n    Name of the account (should be identical to Account.AccountConnection)    Account.OverNightMargin \n    Overnight margin (depends on the broker, double)    Account.RealizedProfitLoss \n    Realized profits and losses (double)", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#example", 
            "text": "Print( AccountConnection   + Account.AccountConnection);\nPrint( AccountType   + Account.AccountType);\nPrint( Broker   + Account.Broker);\nPrint( BuyingPower   + Account.BuyingPower);\nPrint( CashValue   + Account.CashValue);\nPrint( Currency   + Account.Currency);\nPrint( ExcessEquity   + Account.ExcessEquity);\nPrint( InitialMargin   + Account.InitialMargin);\nPrint( InstrumentTypes   + Account.InstrumentTypes);\nPrint( IsDemo   + Account.IsDemo);\nPrint( Name   + Account.Name);\nPrint( OverNightMargin   + Account.OverNightMargin);\nPrint( RealizedProfitLoss   + Account.RealizedProfitLoss);", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#barssinceentry", 
            "text": "", 
            "title": "BarsSinceEntry()"
        }, 
        {
            "location": "/strategy_programming/#description_1", 
            "text": "The property \u201cBarsSinceEntry\u201d returns the number of bars that have occurred since the last entry into the market.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage", 
            "text": "BarsSinceEntry()\nBarsSinceEntry(string signalName)  For multi-bar strategies  BarsSinceEntry(int barsInProgressIndex, string signalName, int entriesAgo)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter", 
            "text": "signalName  The signal name (string) that has been used to clearly label the entry within an entry method.    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.                        Index for the data series for which the entry order was executed.                                          \n                   See *[BarsInProgress][*BarsInProgress*].*                                                                  |  | entriesAgo          | Number of entries in the past. A zero indicates the number of bars that have formed after the last entry. |", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_1", 
            "text": "Print( The last entry was   + BarsSinceEntry() +   bars ago. );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#barssinceexit", 
            "text": "", 
            "title": "BarsSinceExit()"
        }, 
        {
            "location": "/strategy_programming/#description_2", 
            "text": "The property \u201cBarsSinceExit\u201d outputs the number of bars that have occurred since the last exit from the market.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_1", 
            "text": "BarsSinceExit()\nBarsSinceExit(string signalName)  For multi-bar strategies  BarsSinceExit(int barsInProgressIndex, string signalName, int exitsAgo)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_1", 
            "text": "signalName  The signal name (string) that has been used to clearly label the exit within the exit method.    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.                        Index of the data series for which the exit order has been executed.                                                       \n                   See [*BarsInProgress*].                                                                                                    |  | exitsAgo            | Number of exits that have occurred in the past. A zero indicates the number of bars that have formed after the last exit. |", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_2", 
            "text": "Print( The last exit was   + BarsSinceExit() +   bars ago. );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#cancelorder", 
            "text": "", 
            "title": "CancelOrder()"
        }, 
        {
            "location": "/strategy_programming/#description_3", 
            "text": "Cancel order deletes an order.  A cancel request is sent to the broker. There is no guarantee that the order will actually be deleted there. It may occur that the order receives a partial execution before it is deleted. Therefore we recommend that you check the status of the order with [ OnOrderUpdate() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_2", 
            "text": "CancelOrder(IOrder order)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_2", 
            "text": "An order object of the type \u201cIOrder\u201d", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_3", 
            "text": "private IOrder myEntryOrder = null;\nprivate int barNumberOfOrder = 0;\nprotected override void OnBarUpdate()\n{\n// Place an entry stop at the high of the current bar\nif (myEntryOrder == null)\n{\nmyEntryOrder = EnterLongStop(High[0],  stop long );\nbarNumberOfOrder = CurrentBar;\n}\n// Delete the order after 3 bars\nif (Position.MarketPosition == PositionType.Flat  \nCurrentBar   barNumberOfOrder + 3)\nCancelOrder(myEntryOrder);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#changeorder", 
            "text": "", 
            "title": "ChangeOrder()"
        }, 
        {
            "location": "/strategy_programming/#description_4", 
            "text": "Change order, as the name suggests, changes an order.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_3", 
            "text": "ChangeOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_3", 
            "text": "iOrder  An order object of the type \u201cIOrder\u201d    quantity  Number of units to be ordered    limitPrice  Limit price. Set this to 0 if not needed    stopPrice  Stop price. Set this to 0 if not needed", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_4", 
            "text": "private IOrder stopOrder = null;\nprotected override void OnBarUpdate()\n{\n// If the position is profiting by 4 ticks then set the stop to break-even\nif (stopOrder != null   stopOrder.StopPrice   Position.AvgPrice   Close[0]  = Position.AvgPrice + 4 * TickSize)\nChangeOrder(stopOrder, stopOrder.Quantity, stopOrder.LimitPrice, Position.AvgPrice);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#dataseriesconfigurable", 
            "text": "", 
            "title": "DataSeriesConfigurable"
        }, 
        {
            "location": "/strategy_programming/#defaultquantity", 
            "text": "", 
            "title": "DefaultQuantity"
        }, 
        {
            "location": "/strategy_programming/#description_5", 
            "text": "Change order changes an order.  Default quantity defines the amount to be used in a strategy. Default quantity is set within the [ Initialize() ] method.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_4", 
            "text": "ChangeOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_4", 
            "text": "an int value containing the amount (stocks, contracts etc.)", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_5", 
            "text": "protected override void Initialize()\n{\nDefaultQuantity = 100;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#enterlong", 
            "text": "", 
            "title": "EnterLong()"
        }, 
        {
            "location": "/strategy_programming/#description_6", 
            "text": "Enter long creates a long position (buy).  If a signature not containing an amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterLongLimit() ], [ EnterLongStop() ], [ EnterLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_5", 
            "text": "EnterLong()\nEnterLong(string signalName)\nEnterLong(int quantity)\nEnterLong(int quantity, string signalName)\n\n//For multi-bar strategies\nEnterLong(int barsInProgressIndex, int quantity, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_5", 
            "text": "signalName  An unambiguous name    quantity  The amount of stocks/contracts    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the entry order is to be executed. See [ BarsInProgress ].", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_6", 
            "text": "// Enter a long position if the last entry is 10 bars in the past\n// and if two SMAs have crossed\nif (BarsSinceEntry()   10   CrossAbove(SMA(10), SMA(20), 1))\nEnterLong( SMA cross entry );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#enterlonglimit", 
            "text": "", 
            "title": "EnterLongLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_7", 
            "text": "Enter long limit creates a limit order for entering a long position (buy).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterLong() ], [ EnterLongStop() ], [ EnterLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_6", 
            "text": "EnterLongLimit(double limitPrice)\nEnterLongLimit(double limitPrice, string signalName)\nEnterLongLimit(int quantity, double limitPrice)\nEnterLongLimit(int quantity, double limitPrice, string signalName)  For Multibar-Strategies  EnterLongLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_6", 
            "text": "signalName  An unambiguous name    quantity  Amount of stocks/contracts/etc.    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the entry order is to be executed.     See [ BarsInProgress ].     limitPrice  A double value for the limit price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until removed with [ CancelOrder ] or until it reaches its expiry (see [ TimeInForce ]).", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_1", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_7", 
            "text": "// A long position is placed if the last entry was 10 bars ago and the two SMAs have crossed each other\nif (BarsSinceEntry()   10   CrossAbove(SMA(10), SMA(20), 1))\nEnterLongLimit( SMA cross entry );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#enterlongstop", 
            "text": "", 
            "title": "EnterLongStop()"
        }, 
        {
            "location": "/strategy_programming/#description_8", 
            "text": "Enter long stop creates a limit order for entering a long position (buy).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterLong() ], [ EnterLongLimit() ], [ EnterLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_7", 
            "text": "EnterLongStop(double stopPrice)\nEnterLongStop(double stopPrice, string signalName)\nEnterLongStop(int quantity, double stopPrice)\nEnterLongStop(int quantity, double stopPrice, string signalName)  For multi-bar strategies  EnterLongStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_7", 
            "text": "signalName  An unambiguous name    quantity  Amount of stocks or contracts etc.    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies    Index of the data series for which an entry order is to be executed.     See [ BarsInProgress ].     stopPrice  A double value for the stop price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted with the [ CancelOrder ] command or until it reaches its expiry time (see [ TimeInForce ]).", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_2", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_8", 
            "text": "private IOrder myEntryOrder = null;\n// Place an entry order at the high of the current bar\nif (myEntryOrder == null)\nmyEntryOrder = EnterLongStop(High[0],  Stop Long );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#enterlongstoplimit", 
            "text": "", 
            "title": "EnterLongStopLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_9", 
            "text": "Enter long stop limit creates a buy stop limit order for entering a long position.  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterLong() ], [ EnterLongLimit() ], [ EnterLongStop() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_8", 
            "text": "EnterLongStopLimit(double limitPrice, double stopPrice)\nEnterLongStopLimit(double limitPrice, double stopPrice, string signalName)\nEnterLongStopLimit(int quantity, double limitPrice, double stopPrice)\nEnterLongStopLimit(int quantity, double limitPrice, double stopPrice, string signalName)  For multi-bar strategies  EnterLongStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_8", 
            "text": "signalName  An unambiguous name    quantity  Amount of stocks or contracts to be ordered    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the entry order is to be executed.     See [ BarsInProgress ].     stopPrice  A double value for the stop price    limitPrice  A double value for the limit price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until canceled with the CancelOrder command or until it reaches its expiry (see [ TimeInForce ]).", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_3", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_9", 
            "text": "private IOrder myEntryOrder = null;\n// Place an entry stop at the high of the current bar\n// if the high is reached, a limit order will be placed 2 ticks above the high\nif (myEntryOrder == null)\nmyEntryOrder = EnterLongStopLimit(High[0]+2*TickSize, High[0],  Stop Long );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#entershort", 
            "text": "", 
            "title": "EnterShort()"
        }, 
        {
            "location": "/strategy_programming/#description_10", 
            "text": "Enter short creates a market order for entering a short position (naked sell).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterShortLimit() ], [ EnterShortStop() ], [ EnterShortStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_9", 
            "text": "EnterShort()\nEnterShort(string signalName)\nEnterShort(int quantity)\nEnterShort(int quantity, string signalName)\nFor multi-bar strategies\nEnterShort(int barsInProgressIndex, int quantity, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_9", 
            "text": "signalName  An unambiguous name    quantity  Amount of stocks/contracts etc.    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies    Index of the data series for which the entry order is to be executed     See [ BarsInProgress ].", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_4", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_10", 
            "text": "// A short position will be placed if the last entry is 10 bars in the past and two SMAs have crossed each other\nif (BarsSinceEntry()   10   CrossBelow(SMA(10), SMA(20), 1))\nEnterShort( SMA cross entry );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#entershortlimit", 
            "text": "", 
            "title": "EnterShortLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_11", 
            "text": "Enter short limit creates a limit order for entering a short position (naked short).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterShort() ], [ EnterShortStop() ], [ EnterShortStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_10", 
            "text": "EnterShortLimit(double limitPrice)\nEnterShortLimit(double limitPrice, string signalName)\nEnterShortLimit(int quantity, double limitPrice)\nEnterShortLimit(int quantity, double limitPrice, string signalName)  For Multibar-Strategies  EnterShortLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_10", 
            "text": "signalName  An unambiguous name    quantity  Amount to be ordered    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the entry order is to be executed.     See [ BarsInProgress ].     limitPrice  A double value for the limit price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted with the CancelOrder command or until it reaches its expiry (see [ TimeInForce ]).", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_5", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_11", 
            "text": "// Enter a short position if the last entry is 10 bars in the past and two SMAs have crossed each other\nif (BarsSinceEntry()   10   CrossBelow(SMA(10), SMA(20), 1))\nEnterShortLimit( SMA cross entry );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#entershortstop", 
            "text": "", 
            "title": "EnterShortStop()"
        }, 
        {
            "location": "/strategy_programming/#description_12", 
            "text": "Enter short stop creates a limit order for entering a short position.\nIf a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.\nSee [ EnterShort() ], [ EnterShortLimit() ], [ EnterShortStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_11", 
            "text": "EnterShortStop(double stopPrice)\nEnterShortStop(double stopPrice, string signalName)\nEnterShortStop(int quantity, double stopPrice)\nEnterShortStop(int quantity, double stopPrice, string signalName)  For multi-bar strategies  EnterShortStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_11", 
            "text": "signalName  An unambiguous name    quantity  Amount to be ordered    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the entry order is to be executed.     See [ BarsInProgress ].     stopPrice  A double value for the stop price    liveUntilCancelled  The order will remain active until canceled using the CancelOrder command or until it reaches its expiry time", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_6", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_12", 
            "text": "private IOrder myEntryOrder = null;\n// Place an entry stop at the low of the current bar\nif (myEntryOrder == null)\nmyEntryOrder = EnterShortStop(Low[0],  stop short );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#entershortstoplimit", 
            "text": "", 
            "title": "EnterShortStopLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_13", 
            "text": "Enter short stop limit creates a sell stop limit order for entering a short position.  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ EnterShort() ], [ EnterShortLimit() ], [ EnterShortStop() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_12", 
            "text": "EnterShortStopLimit(double limitPrice, double stopPrice)\nEnterShortStopLimit(double limitPrice, double stopPrice, string signalName)\nEnterShortStopLimit(int quantity, double limitPrice, double stopPrice)\nEnterShortStopLimit(int quantity, double limitPrice, double stopPrice, string signalName)  For multi-bar strategies  EnterShortStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_12", 
            "text": "signalName  An unambiguous name    quantity  Amount to be ordered    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which an entry order is to be placed.     See [ BarsInProgress ].     stopPrice  A double value for the stop price    limitPrice  A double value for the limit price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_7", 
            "text": "An order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_13", 
            "text": "private IOrder myEntryOrder = null;\n// Place an entry stop at the low of the current bar; if the low is reached then place a limit order 2 ticks below the low\nif (myEntryOrder == null)\nmyEntryOrder = EnterShortStopLimit(Low[0]-2*TickSize, Low[0],  stop short );", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#entriesperdirection", 
            "text": "", 
            "title": "EntriesPerDirection"
        }, 
        {
            "location": "/strategy_programming/#description_14", 
            "text": "Entries per direction defines the maximum number of entries permitted in one direction (long or short).  Whether the name of the entry signal is taken into consideration or not is defined within [ EntryHandling ].  Entries per direction is defined with the [ Initialize() ] method.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_13", 
            "text": "EntriesPerDirection", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_13", 
            "text": "An int value for the maximum entries permitted in one direction.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_14", 
            "text": "// Example 1\n// If one of the two entry conditions is true and a long position is opened, then the other entry signal will be ignored\nprotected override void Initialize()\n{\nEntriesPerDirection = 1;\nEntryHandling = EntryHandling.AllEntries;\n}\nprotected override void OnBarUpdate()\n{\nif (CrossAbove(SMA(10), SMA(20), 1)\nEnterLong( SMA Cross Entry );\nif (CrossAbove(RSI(14, 3), 30, 1)\nEnterLong( RSI Cross Entry);\n}\n// Example 2\n// For each differently named entry signal, a long position will be opened\nprotected override void Initialize()\n{\nEntriesPerDirection = 1;\nEntryHandling = EntryHandling.UniqueEntries;\n}\nprotected override void OnBarUpdate()\n{\nif (CrossAbove(SMA(10), SMA(20), 1)\nEnterLong( SMA Cross Entry );\nif (CrossAbove(RSI(14, 3), 30, 1)\nEnterLong( RSI Cross Entry);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#entryhandling", 
            "text": "", 
            "title": "EntryHandling"
        }, 
        {
            "location": "/strategy_programming/#description_15", 
            "text": "Entry handling decides how the maximum number of entries permitted in one direction is interpreted ([ EntriesPerDirection ]).  Entry handling is defined with the [ Initialize() ] method.  EntryHandling.AllEntries  AgenaTrader continues to create entry orders until the maximum number of entries permitted (defined in [ EntriesPerDirection ]) per direction (long or short) is reached, regardless of how the entry signals are named.  If entries per direction = 2, then enter long (\"SMA crossover\") and enter long (\"range breakout\") combined will reach the maximum number of long entries permitted.  EntryHandling.UniqueEntries  AgenaTrader continues to generate entry orders until the maximum number of entries (defined in entries per direction) in one direction (long or short) for the differently named entry signals has been reached.\nIf entries per direction = 2, then it is possible for two signals for enter long (\"SMA crossover\")  and  2 signals for enter long (\"range breakout\") to be traded.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_14", 
            "text": "EntryHandling", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#example_15", 
            "text": "See [ EntriesPerDirection ].", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#excludetradehistoryinbacktest", 
            "text": "", 
            "title": "ExcludeTradeHistoryInBacktest"
        }, 
        {
            "location": "/strategy_programming/#exitlong", 
            "text": "", 
            "title": "ExitLong()"
        }, 
        {
            "location": "/strategy_programming/#description_16", 
            "text": "Exit long creates a sell market order for closing a long position (sell).  If a signature not containing a set amount is used, the amount is set by [ DefaultQuantity ] or taken from the strategy dialog window.  See [ ExitLong() ], [ ExitLongLimit() ], [ ExitLongStop() ], [ ExitLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_15", 
            "text": "ExitLong()\nExitLong(int quantity)\nExitLong(string fromEntry signal)\nExitLong(string signalName, string fromEntry signal)\nExitLong(int quantity, string signalName, string fromEntry signal)  For multi-bar strategies  ExitLong(int barsInProgressIndex, int quantity, string signalName, string fromEntry signal)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_14", 
            "text": "signalName  An unambiguous name    quantity  The quantity to be sold    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     fromEntry signal  The name of the attached entry signal", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_8", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_16", 
            "text": "// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong( SMA Cross Entry );\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLong();", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitlonglimit", 
            "text": "", 
            "title": "ExitLongLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_17", 
            "text": "Exit long limit creates a sell limit order for closing a long position (i.e. for selling).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.\nSee [ ExitLong() ], [ ExitLongLimit() ], [ ExitLongStop() ], [ ExitLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_16", 
            "text": "ExitLongLimit(double limitPrice)\nExitLongLimit(int quantity, double limitPrice)\nExitLongLimit(double limitPrice, string fromEntry signal)\nExitLongLimit(double limitPrice, string signalName, string fromEntry signal)\nExitLongLimit(int quantity, double limitPrice, string signalName, string fromEntry signal)  For multi-bar strategies  ExitLongLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName, string fromEntry signal)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_15", 
            "text": "signalName  An unambiguous name    fromEntry signal  The name of the attached entry signal    quantity  Order quantity to be sold    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     limitPrice  A double value for the limit price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_9", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_17", 
            "text": "// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong( SMA Cross Entry );\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLongLimit(GetCurrentBid());", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitlongstop", 
            "text": "", 
            "title": "ExitLongStop()"
        }, 
        {
            "location": "/strategy_programming/#description_18", 
            "text": "Exit long stop creates a sell stop order for closing a long position (short).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.\nSee [ ExitLong() ], [ ExitLongLimit() ], [ ExitLongStop() ], [ ExitLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_17", 
            "text": "ExitLongStop(int quantity, double stopPrice)\nExitLongStop(double stopPrice, string fromEntry signal)\nExitLongStop(double stopPrice, string signalName, string fromEntry signal)\nExitLongStop(int quantity, double stopPrice, string signalName, string fromEntry signal)  For multi-bar strategies  ExitLongStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName, string fromEntry signal)ExitLongStop", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_16", 
            "text": "signalName  An unambiguous name    fromEntry signal  The name of the associated entry signal    quantity  The quantity to be sold    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     stopPrice  A double value for the stop price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_10", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_18", 
            "text": "// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong( SMA Cross Entry );\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLongStop(Low[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitlongstoplimit", 
            "text": "", 
            "title": "ExitLongStopLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_19", 
            "text": "Exit long stop limit creates a sell stop limit order for closing a long position (i.e. selling).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ ExitLong() ], [ ExitLongLimit() ], [ ExitLongStop() ], [ ExitLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_18", 
            "text": "ExitLongStopLimit(double limitPrice, double stopPrice)\nExitLongStopLimit(int quantity, double limitPrice, double stopPrice)\nExitLongStopLimit(double limitPrice, double stopPrice, string fromEntry signal)\nExitLongStopLimit(double limitPrice, double stopPrice, string signalName, string fromEntry signal)\nExitLongStopLimit(int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)  For Multibar-Strategies  ExitLongStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_17", 
            "text": "signalName  An unambiguous name    fromEntry signal  The name of the associated entry signal    quantity  The quantity to be sold    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     limitPrice  A double value for the limit price    stopPrice  A double value for the stop price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_11", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_19", 
            "text": "// Enter if two SMAs cross each other\nif (CrossAbove(SMA(10), SMA(20), 1))\nEnterLong( SMA Cross Entry );\n// Close position\nif (CrossBelow(SMA(10), SMA(20), 1))\nExitLongStopLimit(Low[0]-10*TickSize, Low[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitonclose", 
            "text": "", 
            "title": "ExitOnClose"
        }, 
        {
            "location": "/strategy_programming/#exitoncloseseconds", 
            "text": "", 
            "title": "ExitOnCloseSeconds"
        }, 
        {
            "location": "/strategy_programming/#exitshort", 
            "text": "", 
            "title": "ExitShort()"
        }, 
        {
            "location": "/strategy_programming/#description_20", 
            "text": "Exit short creates a buy-to-cover market order for closing a short position (buy).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.\nSee [ ExitShort() ], [ ExitShortLimit() ], [ ExitShortStop() ], [ ExitShortStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_19", 
            "text": "ExitShort()\nExitShort(int quantity)\nExitShort(string fromEntry signal)\nExitShort(string signalName, string fromEntry signal)\nExitShort(int quantity, string signalName, string fromEntry signal)  For multi-bar strategies  ExitShort(int barsInProgressIndex, int quantity, string signalName, string fromEntry signal)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_18", 
            "text": "signalName  An unambiguous name    Quantity  Order quantity to be bought    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     fromEntry signal  The name of the associated entry signal", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_12", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_20", 
            "text": "// Enter if two SMAs cross each other\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort( SMA cross entry );\n// Close position\nif (CrossAbove(SMA(10), SMA(20), 1))\nExitShort();", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitshortlimit", 
            "text": "", 
            "title": "ExitShortLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_21", 
            "text": "Exit short limit creates a buy-to-cover limit order for closing a short position (buy).  If a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ ExitShort() ], [ ExitShortLimit() ], [ ExitShortStop() ], [ ExitShortStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_20", 
            "text": "ExitShortLimit(double limitPrice)\nExitShortLimit(int quantity, double limitPrice)\nExitShortLimit(double limitPrice, string fromEntry signal)\nExitShortLimit(double limitPrice, string signalName, string fromEntry signal)\nExitShortLimit(int quantity, double limitPrice, string signalName, string fromEntry signal)  For multi-bar strategies  ExitShortLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, string signalName, string fromEntry signal)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_19", 
            "text": "signalName  An unambiguous name    fromEntry signal  The name of the associated entry signal    quantity  Order quantity to be bought    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     limitPrice  A double value for the limit price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_13", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_21", 
            "text": "// Enter if two SMAs cross\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort( SMA cross entry );\n// Close position\nif (CrossAbove(SMA(10), SMA(20), 1))\nExitShortLimit(GetCurrentAsk());", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitshortstop", 
            "text": "", 
            "title": "ExitShortStop()"
        }, 
        {
            "location": "/strategy_programming/#description_22", 
            "text": "Exit short stop creates a buy-to-cover stop order for closing a short position.\nIf a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ ExitShort() ], [ ExitShortLimit() ], [ ExitShortStop() ], [ ExitShortStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_21", 
            "text": "ExitShortStop(int quantity, double stopPrice)\nExitShortStop(double stopPrice, string fromEntry signal)\nExitShortStop(double stopPrice, string signalName, string fromEntry signal)\nExitShortStop(int quantity, double stopPrice, string signalName, string fromEntry signal)  For multi-bar strategies  ExitShortStop(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double stopPrice, string signalName, string fromEntry signal)ExitLongStop", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_20", 
            "text": "signalName  An unambiguous name    fromEntry signal  The name of the associated entry signal    quantity  Order quantity to be bought    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     stopPrice  A double value for the stop price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_14", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_22", 
            "text": "// Enter if two SMAs have crossed\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort( SMA cross entry );\n// Close position\nif (CrossAbove (SMA(10), SMA(20), 1))\nExitShortStop(High[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#exitshortstoplimit", 
            "text": "", 
            "title": "ExitShortStopLimit()"
        }, 
        {
            "location": "/strategy_programming/#description_23", 
            "text": "Exit short stop limit creates a buy-to-cover stop limit order for closing a short position.\nIf a signature not containing a set amount is used, the amount is set by the [ DefaultQuantity ] or taken from the strategy dialog window.  See [ ExitLong() ], [ ExitLongLimit() ], [ ExitLongStop() ], [ ExitLongStopLimit() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_22", 
            "text": "ExitShortStopLimit(double limitPrice, double stopPrice)\nExitShortStopLimit(int quantity, double limitPrice, double stopPrice)\nExitShortStopLimit(double limitPrice, double stopPrice, string fromEntry signal)\nExitShortStopLimit(double limitPrice, double stopPrice, string signalName, string fromEntry signal)\nExitShortStopLimit(int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)  For multi-bar strategies  ExitShortStopLimit(int barsInProgressIndex, bool liveUntilCancelled, int quantity, double limitPrice, double stopPrice, string signalName, string fromEntry signal)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_21", 
            "text": "signalName  An unambiguous name    fromEntry signal  The name of the associated entry signal    quantity  Order quantity to be bought    barsInProgressIndex  For [ Multibar ][ MultiBars ] strategies.    Index of the data series for which the exit order is to be executed.     See [ BarsInProgress ].     limitPrice  A double value for the limit price    stopPrice  A double value for the stop price    liveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until deleted using the CancelOrder command or until it reaches its expiry time.", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_15", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_23", 
            "text": "// Enter if two SMAs cross each other\nif (CrossBelow(SMA(10), SMA(20), 1))\nEnterShort( SMA cross entry );\n// Close position\nif (CrossAbove(SMA(10), SMA(20), 1))\nExitShortStopLimit(High[0]+10*TickSize, High[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#getaccountvalue", 
            "text": "", 
            "title": "GetAccountValue()"
        }, 
        {
            "location": "/strategy_programming/#description_24", 
            "text": "Get account value outputs information regarding the account for which the current strategy is being carried out.  See [ GetProfitLoss() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_23", 
            "text": "GetAccountValue(AccountItem accountItem)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_22", 
            "text": "Possible values for account item are:  AccountItem.BuyingPower  AccountItem.CashValue  AccountItem.RealizedProfitLoss", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_16", 
            "text": "a double value for the account item  for historical bars, a zero (0) is returned", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_24", 
            "text": "Print( The current account cash value is   + GetAccountValue(AccountItem.CashValue));\nPrint( The current account cash value with the leverage provided by the broker is   + GetAccountValue(AccountItem.BuyingPower));\nPrint( The current P/L already realized is   + GetAccountValue(AccountItem.RealizedProfitLoss));", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#getprofitloss", 
            "text": "", 
            "title": "GetProfitLoss()"
        }, 
        {
            "location": "/strategy_programming/#description_25", 
            "text": "Get profit loss outputs the currently unrealized profit or loss for a running position.  See [ GetAccountValue() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_24", 
            "text": "GetProfitLoss(int pLType);", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_23", 
            "text": "Potential values for the P/L type are:  0 \u2013 Amount: P/L as a currency amount  1 \u2013 Percent: P/L in percent  2 \u2013 Risk: P/L in Van Tharp R-multiples ([ http://www.vantharp.com/tharp-concepts/risk-and-r-multiples.asp ])  3 \u2013 P/L in ticks", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_17", 
            "text": "a double value for the unrealized profit or loss", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_25", 
            "text": "Print( The current risk for the strategy   + this.Name +   is   + GetProfitLoss(1) +     + Instrument.Currency);\nPrint( This equals  + string.Format(  {0:F1} R. , GetProfitLoss(3)));", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#marketposition", 
            "text": "See [ Position.MarketPosition ].", 
            "title": "MarketPosition"
        }, 
        {
            "location": "/strategy_programming/#performance", 
            "text": "", 
            "title": "Performance"
        }, 
        {
            "location": "/strategy_programming/#description_26", 
            "text": "Performance is an object containing information regarding all trades that have been generated by a strategy.  The trades are sorted into multiple lists. With the help of these lists it is easier to create a performance evaluation.  See Performance Characteristics.  The individual lists are:    Performance.AllTrades\n     A [ Trade ] collection object containing all trades generated by a strategy    Performance.LongTrades\n     A [ Trade ] collection object containing all long trades generated by a strategy    Performance.ShortTrades\n     A [ Trade ] collection object containing all short trades generated by a strategy    Performance.WinningTrades\n     A [ Trade ] collection object containing all profitable trades generated by a strategy    Performance.LosingTrades\n     A [ Trade ] collection object containing all loss trades generated by a strategy", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#example_26", 
            "text": "// When exiting a strategy, create a performance evaluation\nprotected override void OnTermination()\n{\nPrint( Performance evaluation of the strategy :   + this.Name);\nPrint( ---------------------------------------------------- );\nPrint( Amount of all trades:   + Performance.AllTrades.Count);\nPrint( Amount of winning trades:   + Performance.WinningTrades.Count);\nPrint( Amount of all loss trades:   + Performance.LosingTrades.Count);\nPrint( Amount of all long trades:   + Performance.LongTrades.Count);\nPrint( Amount of short trades:   + Performance.ShortTrades.Count);\nPrint( Result:   + Account.RealizedProfitLoss +     + Account.Currency);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#position", 
            "text": "", 
            "title": "Position"
        }, 
        {
            "location": "/strategy_programming/#description_27", 
            "text": "Position is an object containing information regarding the position currently being managed by a strategy.  The individual properties are:    Position.AvgPrice\n     The average buy or sell price of a position.\n    For positions without partial executions, this is equal to the entry price.    Position.CreatedDateTime\n     Date and time at which the position was opened.    Position.Instrument\n     The trading instrument in which the position exists.\n    See  Instruments .    Position.MarketPosition\n     One of three possible positions in the market:   PositionType.Flat  PositionType.Long  PositionType.Short     Position.OpenProfitLoss\n     The currently not yet realized profit or loss.\n    See [ GetProfitLoss() ].    Position.ProfitCurrency\n     Profit (or loss) displayed as a currency amount.    Position.ProfitPercent\n     Profit (or loss) displayed in percent.    Position.ProfitPoints\n     Profit (or loss) displayed in points or pips.    Position.Quantity\n     Amount of stocks, contracts, CFDs etc. within a position.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#example_27", 
            "text": "if (Position.MarketPosition != PositionType.Flat)\n{\nPrint( Average price   + Position.AvgPrice);\nPrint( Opening time   + Position.CreatedDateTime);\nPrint( Instrument   + Position.Instrument);\nPrint( Current positioning   + Position.MarketPosition);\nPrint( Unrealized P/L   + Position.OpenProfitLoss);\nPrint( P/L (currency)   + Position.ProfitCurrency);\nPrint( P/L (in percent)   + Position.ProfitPercent);\nPrint( P/L (in points)   + Position.ProfitPoints);\nPrint( Pieces   + Position.Quantity);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#quantity", 
            "text": "See [ Position.Quantity ][ Position.MarketPosition ].", 
            "title": "Quantity"
        }, 
        {
            "location": "/strategy_programming/#setprofittarget", 
            "text": "", 
            "title": "SetProfitTarget()"
        }, 
        {
            "location": "/strategy_programming/#description_28", 
            "text": "Set profit target immediately creates a \u201ctake profit\u201d order after an entry order is generated. The order is sent directly to the broker and becomes active immediately.\nIf the profit target is static, you can also define SetProfitTarget() with the Initialize() method.  See [ SetStopLoss() ], [ SetTrailStop() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_25", 
            "text": "SetProfitTarget(double currency)\nSetProfitTarget(CalculationMode mode, double value)\nSetProfitTarget(string fromEntry signal, CalculationMode mode, double value)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_24", 
            "text": "currency  Sets the profit target in a currency, for example 500\u20ac.    mode  Possible values are:                     - CalculationMode.Percent (display in percent)                                                                                                                     \n                - CalculationMode.Price (display as price value)                                                                                                                   \n                - CalculationMode.Ticks (display in ticks or pips)                                                                                                                 |  | value            | The distance between entry price and profit target. This is dependent upon the \u201emode\u201c but generally refers to a monetary value, a percentage or a value in ticks. |\n| fromEntry signal | The name of the entry signal for which the profit target is to be generated. The amount is taken from the entry order referenced.                                 |", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_28", 
            "text": "protected override void Initialize()\n{\n// Creates a profit target order 10 ticks above break-even\nSetProfitTarget(CalculationMode.Ticks, 10);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#setstoploss", 
            "text": "", 
            "title": "SetStopLoss()"
        }, 
        {
            "location": "/strategy_programming/#description_29", 
            "text": "Set stop loss creates a stop loss order after an entry order is placed. The order is sent directly to the broker and becomes effective immediately.  If the stop loss is static, then SetStopLoss() can be defined with the Initialize() method.  See [ SetProfitTarget() ], [ SetTrailStop() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_26", 
            "text": "SetStopLoss(double currency)\nSetStopLoss(double currency, bool simulated)\nSetStopLoss(CalculationMode mode, double value)\nSetStopLoss(string fromEntry signal, CalculationMode mode, double value, bool simulated)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_25", 
            "text": "currency  The difference between the stop loss and the entry price (=risk) in a currency, such as 500\u20ac    mode  Potential values can be:                     - CalculationMode.Percent (display in percent)                                                                                                                                                               \n                - CalculationMode.Price (display as price value)                                                                                                                                                             \n                - CalculationMode.Ticks (display in ticks or pips)                                                                                                                                                           |  | simulated        | When set to \u201ctrue,\u201d the stop order does not go live (as a market order) until the price has \u201etouched\u201c it for the first time (meaning that it is executed just as it would be under real market conditions). |\n| value            | The distance between stop price and profit target. This is dependent upon the \u201emode\u201c but generally refers to a monetary value, a percentage or a value in ticks.                                            |\n| fromEntry signal | The name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.                                                                              |", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_29", 
            "text": "protected override void Initialize()\n{\n// Sets a stop of 500\u20ac\nSetStopLoss(500);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#settrailstop", 
            "text": "", 
            "title": "SetTrailStop()"
        }, 
        {
            "location": "/strategy_programming/#description_30", 
            "text": "Set trail stop creates a trail stop order after an entry order is generated. Its purpose is to protect you from losses, and after reaching break-even, to protect your gains.  The order is sent directly to the broker and becomes effective immediately.  If the stop loss price and the offset value are static, you can define SetTrailStop() with the Initialize() method.  If you use SetTrailStop() within the [ OnBarUpdate() ] method, you must make sure that the parameters are readjusted to the initial value, otherwise the most recently used settings will be used for the new position.  Functionality:  Assuming that you have SetTrailStop(CalculationMode.Ticks, 30) selected:  In a long position, the stop will be 30 ticks from the previously reached high. If the market makes a new high, the stop will be adjusted. However, the stop will no longer be moved downwards.  In a short position, this behavior starts with the most recent low.  Tips:  It is not possible to use SetStopLoss and SetTrailStop for the same position at the same time within one strategy. The SetStopLoss() method will always have precedence over the other methods.  However, it is possible to use both variants parallel to each other in the same strategy if they are referencing different entry signals.  Partial executions of a single order will cause a separate trading stop for each partial position.  If a SetProfitTarget() is used in addition to a SetTrailStop(), then both orders will be automatically linked to form an OCO order.  It is always a stop market order that is generated, and not a stop limit order.  If a position is closed by a different exit order within the strategy, then the TrailingStopOrder is automatically deleted.  See [ SetStopLoss() ], [ SetProfitTarget() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_27", 
            "text": "SetTrailStop(double currency)\nSetTrailStop(double currency, bool simulated)\nSetTrailStop(CalculationMode mode, double value)\nSetTrailStop(string fromEntry signal, CalculationMode mode, double value, bool simulated)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_26", 
            "text": "currency  The distance between the stop loss and the entry price    mode  Possible values are:                     - CalculationMode.Percent                                                                                                                                                                                    \n                - CalculationMode.Ticks                                                                                                                                                                                      |  | simulated        | When set to \u201ctrue,\u201d the stop order does not go live (as a market order) until the price has \u201etouched\u201c it for the first time (meaning that it is executed just as it would be under real market conditions). |\n| value            | The distance between stop price and profit target. This is dependent upon the \u201emode\u201c but generally refers to a monetary value, a percentage or a value in ticks.                                            |\n| fromEntry signal | The name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.                                                                              |", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#example_30", 
            "text": "protected override void Initialize()\n{\n// Sets a trailing stop of 30 ticks\nSetTrailStop(CalculationMode.Ticks, 30);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#submitorder", 
            "text": "", 
            "title": "SubmitOrder()"
        }, 
        {
            "location": "/strategy_programming/#description_31", 
            "text": "Submit order creates a user-defined order. For this order, no stop or limit order is placed in the market. All AgenaTrader control mechanisms are switched off for this order type. The user is responsible for managing the various stop and target orders, including partial executions.  See [ OnOrderUpdate() ], [ OnExecution() ].", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_28", 
            "text": "SubmitOrder(int barsInProgressIndex, OrderAction orderAction, OrderType orderType, int quantity, double limitPrice, double stopPrice, string ocoId, string signalName)", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_27", 
            "text": "barsInProgressIndex  For multi-bar strategies.    Index of the data series for which the order is to be executed.     See BarsInProgress.     orderAction  Possible values are:                        OrderAction.Buy                                                     \n                   Buy order for a long entry\n\n                   OrderAction.Sell                                                    \n                   Sell order for closing a long position\n\n                   OrderAction.SellShort                                               \n                   Sell order for a short entry\n\n                   OrderAction.BuyToCover                                              \n                   Buy order for closing a short position                              |  | orderType           | Possible values:                                                  \n                       OrderType.Limit                                                    \n                       OrderType.Market                                                   \n                       OrderType.Stop                                                     \n                       OrderType.StopLimit                                                 |\n| quantity            | Amount                                                             |\n| limitPrice          | Limit value. Inputting a 0 makes this parameter irrelevant         |\n| stopPrice           | Stop value. Inputting a 0 makes this parameter irrelevant          |\n| ocoId               | A unique ID (string) for linking multiple orders into an OCO group |\n| signalName          | An unambiguous signal name (string)                                |", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_18", 
            "text": "an order object of the type \u201cIOrder\u201d", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_31", 
            "text": "private IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n// Entry conditions\nif (Close[0]   SMA(20)[0]   entryOrder == null)\nentryOrder = SubmitOrder(0, OrderAction.Buy, OrderType.Market, 1, 0, 0,  ,  Enter long );\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#timeinforce", 
            "text": "", 
            "title": "TimeInForce"
        }, 
        {
            "location": "/strategy_programming/#description_32", 
            "text": "The time in force property determines how long an order is valid for. The validity period is dependent upon which values are accepted by a broker.  TimeInForce is specified with the [ Initialize() ] method.  Permitted values are:\nTimeInForce.day\nTimeInForce.loc\nTimeInForce.gtc (GTC = good till canceled)\nTimeInForce.gtd  Default:  TimeInForce.GTC", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_29", 
            "text": "TimeInForce", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#example_32", 
            "text": "protected override void Initialize()\n{\nTimeInForce = TimeInForce.Day;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#traceorders", 
            "text": "", 
            "title": "TraceOrders"
        }, 
        {
            "location": "/strategy_programming/#description_33", 
            "text": "The trace orders property is especially useful for keeping track of orders generated by strategies. It also provides an overview of which orders were generated by which strategies.\nTrace orders can be specified with the [ Initialize() ] method.  When TraceOrders is activated, each order will display the following values in the output window:   Instrument  Time frame  Action  Type  Limit price  Stop price  Quantity  Name   This information is useful when creating and debugging strategies.", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#usage_30", 
            "text": "TraceOrders", 
            "title": "Usage"
        }, 
        {
            "location": "/strategy_programming/#parameter_28", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/strategy_programming/#return-value_19", 
            "text": "true  Tracing is currently switched on false  Tracing is switched off", 
            "title": "Return Value"
        }, 
        {
            "location": "/strategy_programming/#example_33", 
            "text": "protected override void Initialize()\n{\nClearOutputWindow();\nTraceOrders = true;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#trade", 
            "text": "", 
            "title": "Trade"
        }, 
        {
            "location": "/strategy_programming/#description_34", 
            "text": "Trade is an object containing information about trades that have been executed by a strategy or are currently running.  The individual properties are:    Trade.AvgPrice \n    Average entry price    Trade.ClosedProfitLoss \n    Profit or loss already realized    Trade.Commission \n    Commissions    Trade.CreatedDateTime \n    Time at which the trade was created    Trade.EntryReason \n    Description of the entry signal\n    For strategies: signal entry name    Trade.ExitDateTime \n    Time at which the trade was closed    Trade.ExitPrice \n    Exit price    Trade.ExitReason \n    Description of the exit signal\n    For strategies: name of the strategy    Trade.Instrument \n    Description of the trading instrument    Trade.MarketPosition \n    Positioning within the market   PositionType.Flat  PositionType.Long  PositionType.Short     Trade.OpenProfitLoss \n    Unrealized profit/loss of a running position    Trade.ProfitCurrency \n    Profit or loss in the currency that the account is held in    Trade.ProfitLoss \n    Profit or loss    Trade.ProfitPercent \n    Profit or loss in percent    Trade.ProfitPercentWithCommission \n    Profit or loss in percent with commissions    Trade.ProfitPoints \n    Profit or loss in points/pips    Trade.Quantity \n    Quantity of stocks/contracts/ETFs/etc.    Trade.TimeFrame \n    Timeframe in which the trade was opened    Trade.Url \n    URL for the snapshot of the chart at the moment of creation", 
            "title": "Description"
        }, 
        {
            "location": "/strategy_programming/#example_34", 
            "text": "protected override void OnTermination()\n{\n  if (Performance.AllTrades.Count   1) return;\n  foreach (ITrade trade in Performance.AllTrades)\n  {\n    Print( Trade # +trade.Id);\n    Print( -------------------------------------------- );\n    Print( Average price   + trade.AvgPrice);\n    Print( Realized P/L   + trade.ClosedProfitLoss);\n    Print( Commissions   + trade.Commission);\n    Print( Time of entry   + trade.CreatedDateTime);\n    Print( Entry reason   + trade.EntryReason);\n    Print( Time of exit   + trade.ExitDateTime);\n    Print( Exit price   + trade.ExitPrice);\n    Print( Exit reason   + trade.ExitReason);\n    Print( Instrument   + trade.Instrument);\n    Print( Positioning   + trade.MarketPosition);\n    Print( Unrealized P/L   + trade.OpenProfitLoss);\n    Print( P/L (currency)   + trade.ProfitCurrency);\n    Print( P/L   + trade.ProfitLoss);\n    Print( P/L (in percent)   + trade.ProfitPercent);\n    Print( P/L (% with commission)  + trade.ProfitPercentWithCommission);\n    Print( PL (in points)   + trade.ProfitPoints);\n    Print( Quantity   + trade.Quantity);\n    Print( Timeframe   + trade.TimeFrame);\n    Print( URL for the snapshot   + trade.Url);\n    Print( );\n  }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/strategy_programming/#unmanaged", 
            "text": "", 
            "title": "Unmanaged"
        }, 
        {
            "location": "/strategy_programming/#backtesting-and-optimization", 
            "text": "", 
            "title": "Backtesting and Optimization"
        }, 
        {
            "location": "/strategy_programming/#performance-characteristics", 
            "text": "Performance characteristics are the various factors that can be calculated for a list of trades. The trades can be generated by a strategy in real-time or based on a backtest.  The following are available:   all trades  all long trades  all short trades  all winning trades  all losing trades   See [ Performance ].  The individual factors are:   AvgEtd \n    The average drawdown at the end of a trade\n     TradeCollection .TradesPerformance. TradesPerformanceValues .AvgEtd\n     cs\n    Print(\"Average ETD of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgEtd);  AvgMae \n    Average maximum adverse excursion\n     TradeCollection .TradesPerformance. TradesPerformanceValues .AvgMae\n     cs\n    Print(\"Average MAE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMae);  AvgMfe \n    Average maximum favorable excursion\n     TradeCollection .TradesPerformance. TradesPerformanceValues .AvgMfe\n     cs\n    Print(\"Average MFE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMfe);  AvgProfit \n    Average profit for all trades\n     TradeCollection .TradesPerformance. TradesPerformanceValues .AvgProfit\n     cs\n    Print(\"Average profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgProfit);  CumProfit \n    The cumulative winnings over all trades\n     TradeCollection .TradesPerformance. TradesPerformanceValues .CumProfit\n     cs\n    Print(\"Average cumulative profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.CumProfit);  DrawDown \n    The drawdown for all trades\n     TradeCollection .TradesPerformance. TradesPerformanceValues .DrawDow\n     cs\n    Print(\"Drawdown of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.DrawDown);  LargestLoser \n    The largest losing trade\n     TradeCollection .TradesPerformance. TradesPerformanceValues .LargestLoser\n     cs\n    Print(\"Largest loss of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestLoser);  LargestWinner \n    The largest winning trade\n     TradeCollection .TradesPerformance. TradesPerformanceValues .LargestWinner\n     cs\n    Print(\"Largest win of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestWinner);  ProfitPerMonth \n    The total performance (wins/losses) for the month (also in percent)\n     TradeCollection .TradesPerformance. TradesPerformanceValues .ProfitPerMonth\n     cs\n    Print(\"Profit per month of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.ProfitPerMonth);  StdDev \n    The standard deviation for the wins/losses. With this, you are able to identify outliers. The smaller the standard deviation, the higher the expectation of winnings.   All factors are double values.", 
            "title": "Performance Characteristics"
        }, 
        {
            "location": "/keywords/", 
            "text": "Keywords\n\n\nAdd()\n\n\nDescription\n\n\nThe add method allows you to add plots or line objects to the chart. When a new plot object is added using Add(), this automatically creates a data series of the type DataSeries, which is attached to this object. The value collection allows you to reference and access this data series.\nAdd() can be used with the Initialize() and the OnBarUpdate() methods.\n\n\nParameter\n\n\nplot \u2013 a [\nPlot\n] object\nline \u2013 a [\nLine\n] object\n\n\nUsage\n\n\nAdd(Plot plot)\nAdd(Line line)\n\n\n\n\nExample\n\n\n#region Usings\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n#endregion\nnamespace AgenaTrader.UserCode\n{\n  [Description(\nEnter the description for the new custom indicator here\n)]\n  public class MyIndicator : UserIndicator\n  {\n    protected override void Initialize()\n    {\n    // Two blue lines will be placed into the chart, one at 70 and the other at 30\n    Add(new Line(Color.Blue, 70, \nUpperLine\n));\n    Add(new Line(Color.Blue, 30, \nLowerLine\n));\n\n    // Add 2 plots\n    Add(new Plot(Color.Red, \nmyFastSMA\n));\n    Add(new Plot(Color.Blue, \nmySlowSMA\n));\n    }\n\n    protected override void OnBarUpdate()\n    {\n    //The set method is assigned to the value of the current bar\n    FastSMA.Set( SMA(8)[0] ); // is identical with Values[0].Set( SMA(8)[0] );\n    SlowSMA.Set( SMA(50)[0] ); // is identical with Values[1].Set( SMA(50)[0] );\n    }\n\n    // Two data series are made available here\n    // These are not necessary for the display of the indicator // With the help of these series, one indicator can access the other\n    // For example: double d = MyIndicator.FastSMA[0] - MyIndicator.SlowSMA[0];\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries FastSMA\n    {\n      get { return Values[0]; }\n    }\n\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries SlowSMA\n    {\n      get { return Values[1]; }\n    }\n  }\n}\n\n\n\n\nAlert()\n\n\nDescription\n\n\nThe alert method creates an acoustic and/or visual alarm.\n\n\nUsage\n\n\nAlert(string message, bool showMessageBox, string soundLocation);\nDue to compatability reasons, an old signature is still used here. When using this method, the color settings and the \nre-arm seconds\n parameter are ignored.\nAlert(string id, AlertPriority priority, string message, string soundLocation, int rearmSeconds, Color backColor, Color forColor);\n\n\n\n\n\n\nReturn Value\n\n\nNone\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nAlert text displayed within the messages tab\n\n\n\n\n\n\nsoundLocation\n\n\nName of a sound file in the *.wav format. If no path is specified, then \"My Documents\\AgenaTrader\\Sounds\\ is used\n\n\n\n\n\n\nshowMessageBox\n\n\nIf set to \"true\", a message box will be displayed in addition to the sound\n\n\n\n\n\n\n\n\nExample\n\n\n// Message will be outputted if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nAlert(\nCheck short signal!\n, true, \nAlert4.wav\n);\n\n\n\n\nTo use music files in a different path, you need to specify the path:\n\n\nstring pathOfSoundfile = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)+@\n\\\\MyAlertSounds\\\\\n;\nstring nameOfSoundFile = \nMyAlertSoundFile.wav\n;\nAlert(\nMessage text\n, true, pathOfSoundfile + nameOfSoundFile);\n\n\n\n\nAllowRemovalOfDrawObjects\n\n\nDescription\n\n\n\"AllowRemovalOfDrawObjects\" is a property of indicators that can be set under [\nInitialize()\n].\n\n\nAllowRemovalOfDrawObjects = true\n\n\nDrawing objects that are drawn by an indicator or a strategy can be manually removed from the chart.\n\n\nAllowRemovalOfDrawObjects = false (default)\n\n\nDrawing objects that have been created by a strategy or indicator CANNOT be manually removed from the chart. They are removed once the indicator or strategy is removed.\n\n\nThis property can be queried and will return \"true\" or \"false\".\n\n\nUsage\n\n\nAllowRemovalOfDrawObjects\n\n\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//Drawing objects can be manually removed from the chart\nAllowRemovalOfDrawObjects = true;\n}\n\n\n\n\nAttribute\n\n\nAttribute is a component of the C# language. Within AgenaScript, indicators, and strategies, you can use these attributes in the same manner as you would in C#.\nInformation regarding the usage of attributes can be found here:\n\n\n[\nhttp://msdn.microsoft.com/de-de/library/z0w1kczw%28v=vs.80%29.aspx\n]\n\n\nThe most commonly used attributes in AgenaScript are:\n\n\n\n\n[\nBrowsable\n]\n\n\n[\nCategory\n]\n\n\n[\nConditionalValue\n]\n\n\n[\nDescription\n]\n\n\n[\nDisplayName\n]\n\n\n[\nTimeFrameRequirements\n]\n\n\n[\nXmlIgnore\n]\n\n\n\n\nBrowsable\n\n\nBrowsable is an \n[Attribut]e\n within AgenaScript.\n\n\nAgenaScript uses public variables for entering parameters for indicators (such as periods for the SMA) and for outputting events and calculations within indicators (for example, data series).\nVariables used for entering parameters must be displayed in the properties dialog. Data series are exempt from this.\nPublic variables with the browsable attribute set to false are not displayed within the properties dialog.\n\n\nBy default, browsable is set to true. Therefore, within a variable containing an entry parameter, the attribute does not need to be specified.\n\n\nExample for a parameter:\n\n\nThe parameter should be displayed and queried in the properties window. Therefore browsable should be set to true.\n\n\n[Description(\nNumbers of bars used for calculations\n)]\n[Category(\nParameters\n)]\npublic int Period\n{\nget { return period; }\nset { period = Math.Max(1, value); }\n}\n\n\n\n\nExample for a data series:\n\n\n[Browsable(false)]\n[DisplayName(\nLower band\n)]\n[XmlIgnore]\npublic DataSeries Lower\n{\nget { return Values[0]; }\n}\n\n\n\n\nCategory\n\n\nCategory is an \n[Attribut]e\n in AgenaScript.\n\n\nThe category attribute defines under which category in the properties dialog the parameter is shown.\nIf this attribute is missing, the parameters category is accepted as the standard.\n\n\nThe following example shows how to create the new category \"My Parameters\" in the properties dialog:\n\n\n[Category(\nMy Parameters\n)]\n[DisplayName(\nPeriod number\n)]\npublic double _period\n{\nget { return _period; }\nset { _period = value; }\n}\n\n\n\n\n\n\nConditionalValue\n\n\nConditional value is an \n[Attribut]e\n in AgenaScript.\n\n\nNormally, when making comparisons within the ConditionEscort, the data series generated by indicators are used. One such example would be checking whether a moving average lies above or below a specific price value.\nAn indicator can also yield values that are not contained within data series, such as values of the type int, double, char, Boolean, string, etc.\nTo use these values within the scanner or ConditionEscort, they have to be labeled with the conditional value attribute.\n\n\n[Browsable(false)]\n[XmlIgnore]\n[ConditionalValue]\npublic int PublicVariable\n{\nget\n{\nUpdate();\nreturn _internVariable;\n}\n}\n\n\n\n\nDescription\n\n\nDescription is an attribute in AgenaScript.\n\n\nThe description attribute is used in AgenaScript for classes and public variables.\nAs an attribute of the class, the text is a description of the function of the entire indicator.\n\n\n[Description(\nDisplays the tick count of a bar.\n)]\npublic class TickCounter : UserIndicator\n{\n//As an attribute of a public variable, the text is a description of the function of the parameter.\n[Description(\nNumber of standard deviations\n)]\n[DisplayName(\n# of std. dev.\n)]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}\n\n\n\n\nThe descriptions are displayed in the relevant properties dialog.\n\n\nDisplayName\n\n\nDisplay name is an attribute in AgenaScript.\n\n\nThe display name attribute defines the text shown in the properties dialog for the parameter.\n\n\nIf this attribute is not specified, the name of the public variable is used.\n\n\n[Description(\nNumber of standard deviations\n)]\n[DisplayName(\n# of std. dev.\n)]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}\n\n\n\n\nTimeFrameRequirements\n\n\nTimeframe requirements is an attribute in AgenaScripts.\n\n\nIf you want a script to use data from various timeframes, the class requires the attribute \u201eTimeFrameRequirements\". You can specify multiple timeframes here:\n\n\n[TimeFrameRequirements(\n1 day\n)]\n[TimeFrameRequirements(\n15 minutes\n, \n1 day\n, \n1 week\n)]\n\n\n\n\nThe amount of data provided for the other timeframes will always be the same as the number of actual candles loaded into the chart. If there are 500 candles for a 5-minute chart, then 500 candles of another timeframe will also be loaded. In the first example above, 500 daily candles will be loaded. In the second example, 500 15-minute candles, 500 daily candles and 500 weekly candles will be loaded.\nThe amount of data can become rather large very quickly, thus you should take precautions when using this attribute.\n\n\nSee [\nMultiBars\n].\n\n\nImportant:\n\n\nIf a class uses a different indicator that requires one or more secondary timeframes, then the \"TimeFrameRequirements\" attribute must be set for the class retrieving the data. An example for this can be seen here: [\nGetDayBar\n].\n\n\nXMLIgnore\n\n\nXML ignore is an attribute in AgenaScript.\n\n\nAgenaTrader saves all parameter settings for the indicators in a template. The template files are saved in an XML format. In order to avoid a parameter being saved as part of the template, the attribute XML ignore can be set.\n\n\nTo save parameters in an XML file, the values must be serialized. Under most circumstances, AgenaTrader performs this automatically. Self-defined data types cannot be serialized automatically, so in this case the programmer is responsible for the correct serialization.\nIn the following example, the color and font are used as parameters of an indicator. AgenaTrader has two methods for serializing color and font information (TextColorSerialize and TextFontSerialize). Both parameters \u2013 TextColor and TextFont \u2013 thus need to be marked with the XML ignore parameter.\n\n\nprivate Color _textColor = Color.Blue;\nprivate Font _textFont = new Font(\nArial\n, 12, FontStyle.Bold);\n[XmlIgnore]\n[Description(\nTextcolor\n)]\npublic Color TextColor\n{\nget { return _textColor; }\nset { _textColor = value; }\n}\n[Browsable(false)]\npublic string TextColorSerialize\n{\nget { return SerializableColor.ToString(_textColor); }\nset { _textColor = SerializableColor.FromString(value); }\n}\n[XmlIgnore()]\n[Description(\nTextFont\n)]\npublic Font TextFont\n{\nget { return _textFont; }\nset { _textFont = value; }\n}\n[Browsable(false)]\npublic string TextFontSerialize\n{\nget { return SerializableFont.ToString(_textFont); }\nset { _textFont = SerializableFont.FromString(value); }\n}\n\n\n\n\nAutoScale\n\n\nDescription\n\n\nAuto scale is a property of indicators that can be set within the Initialize() method.\n\n\nAutoScale = true (default)\n\n\n\n\nThe price axis (y-axis) of the chart is set so that all plots and lines of an indicator are visible.\n\n\nAutoScale = false\n\n\n\n\nPlots and lines of an indicator or strategy are not accounted for in the scaling of the y-axis. Therefore they may lie outside of the visible chart area.\n\n\nThis property can be queried and will return either \"true\" or \"false\".\n\n\nUsage\n\n\nAutoScale\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//Scale the chart so that all drawing objects are visible\nAutoScale = true;\n}\n\n\n\n\nBarsRequired\n\n\nDescription\n\n\nThe property \"BarsRequired\" determines how many historical bars are required for an indicator or a strategy to call up the OnBarUpdate() method for the first time and thus begin the calculations. Bars required should be set within the Initialize() method.\nThe setting should be chosen carefully. If you require 100 days for the calculation of a moving average, then you should ensure that at least 100 days of historical data are loaded.\nThe property can be queried in the script and will return an int value.\n\n\nWhen OnBarUpdate is called up for the first time, the CurrentBar property is 0 regardless of the value of BarsRequired.\n\n\nUsage\n\n\nBarsRequired\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//The indicator requires a minimum of 50 bars loaded into the history\nBarsRequired = 50;\n}\n\n\n\n\nCalculateOnBarClose\n\n\nDescription\n\n\nThe property \"CalculateOnBarClose\" determines the events for which AgenaTrader can call up the OnBarUpdate() method.\n\n\nCalculateOnBarClose = true\n\n\n\n\nOnBarUpdate()\n is called up when a bar is closed and the next incoming tick creates a new bar.\n\n\nCalculateOnBarClose = false\n\n\n\n\nOnBarUpdate() is called up for each new incoming tick.\nIf you are running AgenaTrader on older hardware, this may cause performance issues with instruments that are highly liquid.\nThe property can be queried in the script and will return a value of the type Boolean (true or false).\nCalculateOnBarClose can be used within Initialize() and also within OnBarUpdate().\nOnBarUpdate is only called up for the closing price of each bar with historical data, even if CalculateOnBarClose is set to false.\nWhen an indicator is called up by another indicator, the CalculateOnBarClose property of the retrieved indicator overwrites the indicator performing the retrieving.\n\n\nUsage\n\n\nCalculateOnBarClose\n\n\nMore Information\n\n\nSee [\nBars\n].\n\n\nExample\n\n\nprotected override void Initialize()\n{\n//Indicator calculation should only occur when a bar has closed/finished\nCalculateOnBarClose = true;\n}\n\n\n\n\nChartControl\n\n\nChart control is an object that provides reading access of various properties for the chart.\n\n\nThe important properties are:\n\n\n\n\nChartFontColor, BackColor\n\n\nUpColor, DownColor\n\n\nFont\n\n\nBarMarginLeft, BarMarginRight\n\n\nBarSpace, BarWidth\n\n\nBarsPainted\n\n\nFirstBarPainted, LastBarPainted\n\n\nBarsVisible\n\n\nFirstBarVisible, LastBarVisible\n\n\nGetXByBarIdx, GetYByValue\n\n\n\n\nAn example can be seen here: [\nPlotSample\n].\n\n\nBarsPainted und BarsVisible:\n\n\nBarsPainted contains the number of bars that a chart \ncould\n display from the left to right border with the current width and distance of the candles.\nBarsVisible contains the number of bars actually visible.\n\n\nFirstBarPainted und FirstBarVisible:\n\n\nFirstBarPainted contains the number of the bar that \nwould\n be displayed on the left border of the chart.\n\n\nFirstBarVisible contains the number of the bar that is actually shown as the first bar on the left side of the chart area.\n\n\nExample: the chart has been moved so that the first bar of the chart is now in the middle of the chart.\n\n\nFirstBarPainted would be negative.\n\n\nFirstBarVisible would be 0.\n\n\nLastBarPainted und LastBarVisible:\n\n\nLastBarPainted contains the number of the bar that \nwould\n be displayed on the right border of the chart.\n\n\nLastBarVisible contains the number of the bar that is actually displayed on the right side of the chart.\n\n\nExample: the chart has been moved so that the last bar of the chart is displayed in the middle section.\n\n\nLastBarPainted would be larger than Bars.Count.\n\n\nLastBarVisible would be Bars.Count -1.\n\n\nClearOutputWindow()\n\n\nDescription\n\n\nThe ClearOutputWindow() method empties the output window. The method can be used within Initialize() as well as within OnBarUpdate().\nThe output window contains all outputs that have been created with the [\nPrint()\n] command.\nUsing the output window is a great method for code debugging.\n\n\nUsage\n\n\nClearOutputWindow()\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n// Delete the content of the output window\nClearOutputWindow();\n}\n\n\n\n\nCrossAbove()\n\n\nDescription\n\n\nThe CrossAbove() method allows you to check whether a crossing of two values has occurred (from bottom to top) within a predefined number of periods. The values can be a market price, an indicator, a data series or a constant value.\n\n\nSee [\nCrossBelow()\n], [\nRising()\n], [\nFalling()\n].\n\n\nUsage\n\n\nCrossAbove(IDataSeries series1, double value, int lookBackPeriod)\nCrossAbove(IDataSeries series1, IDataSeries series2, int lookBackPeriod)\n\n\n\n\nReturn Value\n\n\ntrue\n a cross has occurred\n\nfalse\n a cross has not occurred\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlookBackPeriod\n\n\nNumber of bars within which a cross will be searched for\n\n\n\n\n\n\nseries1 und series2\n\n\nA data series such as an indicator, close, high, etc.\n\n\n\n\n\n\nvalue\n\n\nA constant value of the type double\n\n\n\n\n\n\n\n\nExample\n\n\n// Puts out a notice if the SMA(20) crosses above the SMA(50)\nif (CrossAbove(SMA(20), SMA(50), 1))\nPrint(\nSMA(20) has risen above SMA(50)!\n);\n// Puts out a notice if the SMA(20) crosses above the value of 40\nif (CrossAbove(SMA(20), 40, 1))\nPrint(\nSMA(20) has risen above 40!\n);\n// Put out a notice for a long entry if the SMA(20) has crossed above the SMA(50) within the last 5 bars.\nif (CrossAbove(SMA(20), SMA(50), 1) \n Close[0] \n Close[1])\nPrint(\nLong entry !!!\n);\n\n\n\n\nCrossBelow()\n\n\nDescription\n\n\nUsing the CrossBelow() method, you can test whether or not a cross below has occurred within a predefined number of periods. The values can be the market price, an indicator, any data series, or a constant value.\n\n\nSee [\nCrossAbove()\n], [\nRising()\n], [\nFalling()\n].\n\n\nUsage\n\n\nCrossBelow(IDataSeries series1, double value, int lookBackPeriod)\nCrossBelow(IDataSeries series1, IDataSeries series2, int lookBackPeriod)\n\n\n\n\nReturn Value\n\n\ntrue\n a cross has occurred\n\nfalse\n a cross has not occurred\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlookBackPeriod\n\n\nNumber of Bars within which a cross will be searched for\n\n\n\n\n\n\nseries1 und series2\n\n\nA data series such as an indicator, close, high etc.\n\n\n\n\n\n\nvalue\n\n\nA constant value of the type double\n\n\n\n\n\n\n\n\nExample\n\n\n// Puts out a notice if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nPrint(\nSMA(20) has fallen below SMA(50)!\n);\n// Puts out a notice if the SMA(20) falls below the value of 40\nif (CrossBelow(SMA(20), 40, 1))\nPrint(\nSMA(20) has fallen below 40!\n);\n// Puts out a notice for a short entry if a crossing of the SMA(20) below the SMA(50) has occurred within the last 5 bars.\n.\nif (CrossBelow(SMA(20), SMA(50), 1) \n Close[1] \n Close[0])\nPrint(\nShort entry !!!\n);\n\n\n\n\nCurrentBar\n\n\nDescription\n\n\nCurrent bar is a method of indexing bars used in the OnBarUpdate() method. If a chart contains 500 bars and an indicator is to be calculated on the basis of these, then AgenaTrader will begin calculating from the oldest bar. The oldest bar receives the number 0. Once the calculation for this bar has been completed, the OnBarUpdate() method is called up for the next bar, which in turn receives the number 1. This continues until the last bar, which receives a value of 500.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nCurrent bar is a variable of the type int, which always contains the number of the bar currently being used.\n\n\nUsage\n\n\nCurrentBar\n\n\nMore Information\n\n\nThe OnBarUpdate() method uses numbering different from that of CurrentBar in terms of the [\nBarindex\n][\nBars\n]. Understanding this difference is of great importance, which is why we ask you to please read the following paragraph carefully:\n\n\nCurrentBar numbers continuously from the oldest to youngest bar starting with 0. The BarIndex for the youngest bar is always 0. In the example referenced below this paragraph, Time[0] stands for the timestamp of the current bar. The index of the oldest bar always has 1 added to it. Thus a logical numbering of barsAgo is possible. The timestamp for the bar of 5 periods ago is Time[5].\nFor using multiple timeframes (multi-bars) in an indicator, see CurrentBars.\n\n\nExample\n\n\nprotected override void OnBarUpdate()\n{\nPrint(\nCall of OnBarUpdate for bar nr. \n + CurrentBar + \n of \n + Time[0]);\n}\n\n\n\n\nDatafeedHistoryPeriodicity\n\n\nDescription\n\n\nDatafeed history periodicity is a data type.\n\n\nDefinition\n\n\npublic enum DatafeedHistoryPeriodicity\n-   DatafeedHistoryPeriodicity.Tick\n-   DatafeedHistoryPeriodicity.Second\n-   DatafeedHistoryPeriodicity.Minute\n-   DatafeedHistoryPeriodicity.Hour\n-   DatafeedHistoryPeriodicity.Day\n-   DatafeedHistoryPeriodicity.Week\n-   DatafeedHistoryPeriodicity.Month\n-   DatafeedHistoryPeriodicity.Volume\n-   DatafeedHistoryPeriodicity.Range\n-   DatafeedHistoryPeriodicity.Quarter\n-   DatafeedHistoryPeriodicity.Year\n-   DatafeedHistoryPeriodicity.HeikinAshi\n-   DatafeedHistoryPeriodicity.Renko\n-   DatafeedHistoryPeriodicity.LineBreak\n-   DatafeedHistoryPeriodicity.Kagi\n-   DatafeedHistoryPeriodicity.PointAndFigure\n-   DatafeedHistoryPeriodicity.Custom\n\n\nSee \nTimeFrame\n, \nTimeFrames\n.\n\n\nDataSeries\n\n\nDescription\n\n\nData series (data rows) are an easy yet powerful method of saving additional values for individual bars. For example, when calculating the smoothing average, each bar is assigned the value calculated for this bar.\nA data series is an array that contains as many elements as there are bars displayed in a chart. AgenaTrader ensures that data series are correctly synchronized with the bars.\nData series are used in exactly the same way as the close or time series. They can therefore also be used for the input data for various indicators.\nIn the table below you will find 4 newly created data series (highlighted). Each data series has exactly one value of a special data type (int, bool, string) attached to it per bar. The indexing with barsAgo is thus identical to the data series provided by the system.\n\n\n\n\nUsable Data Series in AgenaTrader\n\n\n[\nBoolSeries\n]\n\n\n[\nDataSeries\n]\n\n\n[\nDateTimeSeries\n]\n\n\n[\nFloatSeries\n]\n\n\n[\nIntSeries\n]\n\n\n[\nLongSeries\n]\n\n\n[\nStringSeries\n]\n\n\nIn addition, there are also data series such as ColorSeries, although these are only used for internal purposes and should not be used directly.\nTo change the color of plots, please use [\nPlotColors\n].\n\n\nSet(), Reset() und ContainsValue()\n\n\nEach data series contains a \nSet()\n, \nReset()\n and \nContainsValue()\n method.\nWith Set(value) or Set(int barsAgo, value) you can place values into the data series for the current position, or in this case into the barsAgo position.\nWith Reset() or Reset(int barsAgo) you can delete a value from the data series for the current position or for the barsAgo position. This has the result that no valid value exists at this position any more.\nProgramming with the help of the reset method can simplify otherwise complex logic. This is especially true for Boolean series, where only \"true\" or \"false\" values can be included.\nThe ContainsValue() checks whether a data series has a value for a specific position.\n\n\nInformation about Data Types\n\n\n[\nhttp://msdn.microsoft.com/de-de/library/s1ax56ch%28v=vs.80%29.aspx\n]\n\n\nBoolSeries\n\n\nDescription\n\n\nBool series is a data series that contains a Boolean value for each bar. The number of elements in this series correlates with the exact number of bars within the chart.\n\n\nCreate New Bool Series\n\n\nIn the area for the declaration of variables, simply declare a new variable:\n\n\n//Variable declaration\nprivate BoolSeries myBoolSeries;\n\n\n\n\nWith the Initialize() method, this variable assigns a new instance of the Bool series:\n\n\nprotected override void Initialize()\n{\nmyBoolSeries = new BoolSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the data series for the current position:\n\n\nmyBoolSeries.Set(true);\n\n\n\n\nWriting a value in the past into the data series:\n\n\nmyBoolSeries.Set(int barsAgo, bool Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value for the data series:\n\n\nmyBoolSeries.Reset();\n\n\n\n\nRemoving a value in the past from the data series:\n\n\nmyBoolSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyBoolSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\nFor the bar of \n + Time[0] + \n ago the value of the data series is: \n + myBoolSeries[0]);\n\n\n\n\nExample\n\n\nprotected override void OnBarUpdate()\n{\nif (Close[0] \n Open[0])\nmyBoolSeries.Set(true);\nelse\nmyBoolSeries.Set(false);\n}\n\n\n\n\nDataSeries\n\n\nDescription\n\n\nData series is a [\nDataSeries\n][\nData series\n] that can contain a double value for each bar. The number of elements in this series corresponds to the exact number of bars within the charts.\n\n\nData series for double values are the data series most commonly used for indicators.\n\n\nCreate a New Data Series\n\n\nIn the declaration area for variables:\n\n\n//Variable declaration\nprivate DataSeries myDataSeries;\n\n\n\n\nWith the Initialize() method, this variable is assigned a new instance:\n\n\nprotected override void Initialize()\n{\nmyDataSeries = new DataSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the data series for the current position:\n\n\nmyDataSeries.Set(Bars[0].Close);\n\n\n\n\nWriting a value in the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, duble Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\nFor the bar from \n + Time[0] + \n ago the value for the data series is: \n + myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span between the high and low of a bar\nmyDataSeries.Set(Math.Abs(High[0]-Low[0]));\n\n\n\n\nDateTimeSeries\n\n\nDescription\n\n\nDate time series is a [\nDataSeries\n][\nData series\n] that can record a date time value for each bar. The number of elements in this series corresponds to the number of bars in the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate DateTimeSeries myDataSeries;\n\n\n\n\nAssign a new instance of DateTimeSeries for the variable with the Initialize() method:\n\n\nprotected override void Initialize()\n{\nmyDataSeries = new DateTimeSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series:\n\n\nmyDataSeries.Set(DateTime Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, DateTime Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemove a past value from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\nFor the bar from \n + Time[0] + \n ago the value of the data series is: \n + myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the difference of -6 hours (eastern time, New York) for a time zone conversion\nmyDataSeries.Set(Time[0].AddHours(-6);\n\n\n\n\nFloatSeries\n\n\nDescription\n\n\nFloat series is a DataSeries that contains a float value for each bar in the chart. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate FloatSeries myDataSeries;\n\n\n\n\nAssign a new instance of the FloatSeries to the variable with the Initialize() method:\n\n\nprotected override void Initialize()\n{\nmyDatatSeries = new FloatSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series\n\n\nmyDataSeries.Set(float Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, float Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\nFor the bar from \n + Time[0] + \n ago the value for the data series is: \n + myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span between the high and the low of a bar\nmyDataSeries.Set(Math.Abs((float) High[0] - (float) Low[0]));\n\n\n\n\nIntSeries\n\n\nDescription\n\n\nInt series is a data series that can assign an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate IntSeries myDataSeries;\n\n\n\n\nAssign an instance of the int series to the variable with the Initialize() method:\n\n\nprotected override void Initialize()\n{\nmyDataSeries = new IntSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series\n\n\nmyDataSeries.Set(int Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, int Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span in ticks between high and low for each bar\nmyDataSeries.Set((int) ((High[0] - Low[0]) / TickSize));\n\n\n\n\nLongSeries\n\n\nDescription\n\n\nLong series is a data series that can include an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate LongSeries myDataSeries;\n\n\n\n\nAssign a new instance of the long series to the variable with the Initialize() method:\n\n\nprotected override void Initialize()\n{\nmyDataSeries = new LongSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series:\n\n\nmyDataSeries.Set(long Value);\n\n\n\n\nWriting a value from the past into the data deries:\n\n\nmyDataSeries.Set(int barsAgo, long Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span of ticks between high and low for each bar\nmyDataSeries.Set((long) ((High[0] - Low[0]) / TickSize));\n\n\n\n\nStringSeries\n\n\nDescription\n\n\nString series is a data series for string values that are saved for each bar. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate StringSeries myDataSeries;\n\n\n\n\nAssign an instance of string series to the variable with the Initialize() method:\n\n\nprotected override void Initialize()\n{\nmyDataSeries = new StringSeries(this);\nCalculateOnBarClose = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series:\n\n\nmyDataSeries.Set(string Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, string Value);\n\n\n\n\nDelete Values\n\n\nRemove the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemove a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Save the current calendar day for each bar (Monday\u2026 Tuesday etc.)\nmyDataSeries.Set(string.Format(\n{0:dddd}\n, Time[0]));\n\n\n\n\nDayOfWeek\n\n\nDescription\n\n\n\"DayOfWeek\" outputs the date-time value (such as a timestamp) for each bar.\n\n\nOf course, all other methods defined within the C# language for usage of date-time objects are also available, such as day, month, year, hour, minute, second, day of week etc.\n\n\nSee [\nhttp://msdn.microsoft.com/de-de/library/03ybds8y.aspx\n]\n\n\nDefinition\n\n\nProperty DayOfWeek\n\n\npublic enum DayOfWeek\n-   DayOfWeek.Monday\n-   DayOfWeek.Tuesday\n-   DayOfWeek.Wednesday\n-   DayOfWeek.Thursday\n-   DayOfWeek.Friday\n-   DayOfWeek.Saturday\n-   DayOfWeek.Sunday\n\n\nExample\n\n\n//Outputs the weekday for each bar\nPrint(Time[0].DayOfWeek);\n//Do not execute trades on a Friday\nif (Time[0].DayOfWeek == DayOfWeek.Friday)\nreturn;\n\n\n\n\nDisplacement\n\n\nDescription\n\n\nBy implementing \"Displacement\", you can shift a drawn indicator line right or left along the x-axis.\nThis property can be queried within the script and will return an int value.\n\n\nBlue line: Displacement = 0 (Original)\nRed line: Displacement = -5\nGreen line: Displacement = +5\n\n\n\n\nUsage\n\n\nDisplacement\n\n\nParameter\n\n\nint Offset Number of bars by which the indicator is to be moved.\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//Displacement of the plot by one bar to the right\nDisplacement = 1;\n}\n\n\n\n\nDisplayInDataBox\n\n\nDescription\n\n\nThe property \"DisplayInDataBox\" states whether the value of an indicator is contained in the data box of the chart or not.\n\n\nThe property can be queried in the script and returns a value of the type Boolean (true or false).\n\n\nDisplayInDataBox = true (default)\n\n\n\n\nThe indicator values are displayed in the data box.\n\n\nDisplayInDataBox = false\n\n\n\n\nThe indicator values are not displayed in the data box.\n\n\nThe following image displays the values of 3 smoothed averages in the data box.\n\n\n\n\nUsage\n\n\nDisplayInDataBox\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//Values will not be shown in the data box\nDisplayInDataBox = false;\n}\n\n\n\n\nDrawOnPricePanel\n\n\nDescription\n\n\nThe property \"DrawOnPricePanel\" determines the panel in which the drawing objects are drawn.\n\n\nDrawOnPricePanel = true (default)\n\n\n\n\nDrawing objects are shown in the price chart\n\n\nDrawOnPricePanel = false\n\n\n\n\nDrawing objects are drawn in the panel (subchart) assigned to the indicator\n\n\nIf the indicator is already assigned to the price chart (overlay = true) then this property has no effect, meaning that no additional subchart is opened.\nThe property can be queried within the script and returns a Boolean value.\n\n\nUsage\n\n\nDrawOnPricePanel\n\n\nExample\n\n\nprotected override void Initialize()\n{\n// Indicator is drawn in a new subchart\nOverlay = false;\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n// Drawing object is drawn in the price chart\nDrawOnPricePanel = true;\n}\nprotected override void OnBarUpdate()\n{\n// Draws a vertical line in the price chart for the bar from 5 minutes ago\nDrawVerticalLine(\nMyVerticalLine\n, 5, Color.Black);\n}\n\n\n\n\nFalling()\n\n\nDescription\n\n\nThe Falling() method allows you to test whether an \"is falling\" condition exists, i.e. whether the current value is smaller than the value of the previous bar.\n\n\nSee [\nCrossAbove()\n], [\nCrossBelow()\n], [\nRising()\n].\n\n\nUsage\n\n\nFalling(IDataSeries series)\n\n\n\n\nReturn Value\n\n\ntrue\n If the data series is falling\n\nfalse\n If the data series is not falling\n\n\nParameter\n\n\nseries a data series such as an indicator, close, high etc.\n\n\nExample\n\n\n// Check whether SMA(20) is falling\nif (Falling(SMA(20)))\nPrint(\nThe SMA(20) is currently falling.\n);\n\n\n\n\nColors\n\n\nAgenaScript provides you with the following commands for defining colors and making color changes to the chart:\n\n\n[\nBarColor\n] Color of a bar\n\n\n[\nBackColor\n] Background color of the chart\n\n\n[\nBackColorAll\n] Background color of the chart and all panels\n\n\nChartControl.UpColor Color of up ticks (up bars)\nChartControl.DownColor Color of down ticks (down bars)\n\n\nFor each bar, its colors are saved in the following data series. If these data series are written in, the color of the referenced bar will change.\n\n\n[\nBarColorSeries\n]\n\n\n[\nCandleOutlineColorSeries\n]\n\n\n[\nBackColorSeries\n]\n\n\n[\nBackColorAllSeries\n]\n\n\nBarColor\n\n\nDescription\n\n\nBar color changes the color of a bar.\n\n\nSee [\nColors\n], [\nBarColorSeries\n], [\nBackColor\n], [\nBackColorAll\n], [\nCandleOutlineColor\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nUsage\n\n\nBarColor\n\n\nExample\n\n\n// If the closing price is above the SMA(14), color the bar orange\nif (Close[0] \n SMA(14)[0]) BarColor = Color.Orange;\n\n\n\n\n\n\nBackColor\n\n\nDescription\n\n\nBack color changes the background color of a bar or gives the current background color of a bar when queried.\n\n\nSee [\nColors\n], [\nBarColor\n], [\nBackColorAll\n], [\nCandleOutlineColor\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nUsage\n\n\nBackColor\n\n\nExample\n\n\n// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColor = Color.Blue;\n\n\n\n\n\n\n// Changing the bar background color depending on a smoothing average\n// Market price above the SMA(14) to green\n// Market price below the SMA(14) to maroon\nBackColor = SMA(14)[0] \n= Close[0] ? Color.Maroon : Color.LimeGreen;\n\n\n\n\n\n\nBackColorAll\n\n\nDescription\n\n\nBack color all changes the background color of a bar within the chart window and in all subcharts.\n\n\nSee [\nColors\n], [\nBarColor\n], [\nBackColor\n], [\nCandleOutlineColor\n].\n\n\nParameter\n\n\nA color object of the type \"public struct color\"\n\n\nUsage\n\n\nBackColorAll\n\n\nExample\n\n\n// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColorAll = Color.Blue;\n\n\n\n\n\n\nBarColorSeries\n\n\nDescription\n\n\nBar color series is a data series containing the color for each bar.\n\n\nSee [\nColors\n], [\nBackColorSeries\n], [\nBackColorAllSeries\n], [\nCandleOutlineColorSeries\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nBarColorSeries\n\n\nBarColorSeries[\nint\n barsAgo]\n\n\nWhen using the method with an index [\nint\n barsAgo] the color for the referenced bar will be changed or returned.\n\n\nCaution: Only the color of a bar whose color has been explicitly changed beforehand will be returned. In all other cases, the \"Color.Empty\" value will be returned.\n\n\nExample\n\n\nprotected override void OnBarUpdate()\n{\nif (CurrentBar == Bars.Count-1-(CalculateOnBarClose?1:0))\n{\n// Color the current bar blue\n// This is identical to BarColor = color.Blue\nBarColorSeries[0] = Color.Blue;\n// Color the previous bars green\nBarColorSeries[1] = Color.Orange;\n// Color the third bar yellow\nBarColorSeries[2] = Color.Yellow;\n}\n}\n\n\n\n\n\n\nBackColorSeries\n\n\nDescription\n\n\nBack color series is a data series containing the background color for each bar. If the background color for the subcharts is to be included, please use \"BackColorAllSeries\" instead.\n\n\nSee [\nColors\n], [\nBarColorSeries\n][\nBarColor\n], [\nBackColorAllSeries\n][] [\nCandleOutlineColorSeries\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nBackColorSeries\nBackColorSeries[int barsAgo]\n\n\n\n\nWhen using this method with an index [\nint\n barsAgo] the background color for the referenced bar will be outputted.\n\n\nExample\n\n\n// Which background color does the current bar have?\nPrint (BackColorSeries[0]);\n// Set the current bar\u2019s background color to blue\n// This is identical to BackColor = Color.Blue\nBackColorSeries[3] = Color.Blue;\n// Set background color for the previous bar to green\nBackColorSeries[1] = Color.Green;\n\n\n\n\nBackColorAllSeries\n\n\nDescription\n\n\nBack color all series is a data series containing the background color for each bar. The difference to BackColorSeries is that the background color of the subchart is included.\n\n\nSee [\nColors\n], [\nBarColorSeries\n], [\nBackColorSeries\n], [\nCandleOutlineColorSeries\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nBackColorAllSeries\nBackColorAllSeries[int barsAgo]\n\n\n\n\nWhen using the method with an index [\nint\n barsAgo] the background color for the referenced bar will be changed or returned.\n\n\nExample\n\n\nSee [\nBackColorSeries\n].\n\n\nCandleOutlineColor\n\n\nDescription\n\n\nCandle outline color changes the border/outline color (including the wick) of a bar.\n\n\nIf the color of the bar is changed using BarColor and the outline is not changed using CandleOutlineColor, the outline color is adjusted to match the color of the bar.\n\n\nSee [\nColors\n], [\nBarColor\n], [\nBackColor\n], [\nBackColorAll\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nUsage\n\n\nCandleOutlineColor\n\n\nExample\n\n\nif (SMA(14)[0] \n SMA(200)[0])\nCandleOutlineColor = Color.LimeGreen;\nelse\nCandleOutlineColor = Color.Red;\n\n\n\n\n\n\nCandleOutlineColorSeries\n\n\nDescription\n\n\nCandle outline color series is a data series that saves the outline color for each bar.\n\n\nSee [\nColors\n], [\nBarColorSeries\n], [\nBackColorSeries\n], [\nBackColorAllSeries\n].\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nCandleOutlineColorSeries\nCandleOutlineColorSeries[int barsAgo]\n\n\n\n\nWhen using this method with an index [\nint\n barsAgo] the border color for the referenced bar will be outputted.\n\n\nCaution: Color.Empty will be outputted for a bar unless it has been previously changed.\n\n\nExample\n\n\n// Set the outline color of the current bar to blue\nCandleOutlineColorSeries[0] = Color.Blue;\n// Change the outline color to the chart default value\nCandleOutlineColorSeries[0] = Color.Empty;\n\n\n\n\nFirstTickOfBar\n\n\nDescription\n\n\nFirstTickOfBar is a property of the type \"bool\" that returns \"true\" if the currently incoming tick is associated with a new bar. This means that this tick is the first tick of a new bar.\nThis property can only be meaningfully applied when the indicator or strategy is running in the tick-by-tick mode, meaning that CalculateOnBarClose = false and the data feed is able to output real-time values.\nWhen using end-of-day data in a daily chart, the \"FirstTickOfBar\" is always true for the last bar.\nFirstTickOfBar should not be used outside of the OnBarUpdate() method.\nSee [\nBars.TickCount\n].\n\n\nUsage\n\n\nFirstTickOfBar\n\n\nExample\n\n\n// Within a tick-by-tick strategy, execute one part bar-by-bar only\nif (FirstTickOfBar)\n{\nif (CCI(20)[1] \n -250)\nEnterLong();\nreturn;\n}\n\n\n\n\nFirstTickOfBarMtf\n\n\nDescription\n\n\nFirstTickOfBarMtf is the \nm\nulti-\nt\nime \nf\nrame variant of the [\nFirstTickOfBar\n] property.\n\n\nThe setting of CalculateOnBarClose only affects the primary timeframe (chart timeframe). When working with multi-bars, the ticks of the secondary timeframes are provided on a tick-by-tick basis independently of the CalculateOnBarClose setting.\nWith the help of FirstTickOfBarMtf, it is possible to determine when a new bar has begun in a secondary timeframe.\n\n\nUsage\n\n\nFirstTickOfBarMtf(BarsInProgress)\n\n\nParameter\n\n\nFirstTickOfBarMtf(BarsInProgress).\n\n\nSee [\nBarsInProgress\n].\n\n\nExample\n\n\nif (FirstTickOfBarMtf(BarsInProgress))\nPrint(\nA new bar has begun.\n);\n\n\n\n\nGetCurrentAsk()\n\n\nDescription\n\n\nThe GetCurrentAsk() method returns the current value of the ask side of the order book. If no level 1 data is available to AgenaTrader, then this function simply outputs the last trade value.\n\n\nSee [\nGetCurrentBid()\n] and [\nOnMarketData()\n].\n\n\nUsage\n\n\nGetCurrentAsk()\n\n\nReturn Value\n\n\ndouble value\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nIf an entry condition is fulfilled, then 1 contract should be sold at the current ask price:\nprivate IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n// Entry condition\nif (Close[0] \n SMA(20)[0] \n entryOrder == null)\n// Sell 1 contract at the current ask price\nentryOrder = SubmitOrder(0, OrderAction.SellShort, OrderType.Limit, 1, GetCurrentAsk(), 0, \n, \nEnter short\n);\n}\n\n\n\n\nGetCurrentBid()\n\n\nDescription\n\n\nThe GetCurrentBid() method returns the current value of the bid side of the order book. If no level 1 data is available to AgenaTrader, then the function outputs the last traded price.\n\n\nSee [\nGetCurrentAsk()\n] and [\nOnMarketData()\n].\n\n\nUsage\n\n\nGetCurrentBid()\n\n\nReturn Value\n\n\ndouble value\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nIf an entry condition is fulfilled, then 1 contract should be sold at the current bid price:\n\n\nprivate IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n// Entry condition\nif (Close[0] \n SMA(20)[0] \n entryOrder == null)\n// Sell 1 contract at the current bid price\nentryOrder = SubmitOrder(0, OrderAction.Buy, OrderType.Limit, 1, GetCurrentBid(), 0, \n, \nEnter long\n);\n}\n\n\n\n\nHighestBar\n\n\nDescription\n\n\nThe HighestBar() method searches within a predetermined number of periods for the highest bar and outputs how many bars ago it can be found.\n\n\nSee [\nLowestBar()\n].\n\n\nParameter\n\n\nperiod Number of bars within which the bar is searched for\n\n\nseries Every data series, such as close, high, low, etc.\n\n\nReturn Value\n\n\nint barsAgo How many bars ago the high occurred\n\n\n\n\nUsage\n\n\nHighestBar(IDataSeries series, int period)\n\n\n\n\nExample\n\n\n// How many bars ago was the highest high for the current session?\nPrint(HighestBar(High, Bars.BarsSinceSession - 1));\n// What value did the market price have at the highest high of the session?\nPrint(\nThe highest price for the session was: \n + Open[HighestBar(High, Bars.BarsSinceSession - 1)]);\n\n\n\n\nHistorical\n\n\nDescription\n\n\nHistorical allows you to check whether AgenaScript is working with historical or real-time data.\nAs long as OnBarUpdate() is called up for historical data, then historical = true. As soon as live data is being used, then historical = false.\nDuring a backtest, historical is always true.\n\n\nUsage\n\n\nHistorical\n\n\nReturn Value\n\n\ntrue\n when using historical data\n\nfalse\n when using real-time data\n\n\nExample\n\n\nprotected override void OnBarUpdate()\n{\n// only execute for real-time data\nif (Historical) return;\n// Trading technique\n}\n\n\n\n\nInitialize()\n\n\nDescription\n\n\nThe Initialize() method is called up once at the beginning of an indicator or strategy calculation. This method can be used to set indicator properties, initialize your own variables, or add plots.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\nprotected override void Initialize()\n\n\n\n\nImportant Keywords\n\n\n\n\n[\nAdd()\n]\n\n\n[\nAllowRemovalOfDrawObjects\n]\n\n\n[\nAutoScale\n]\n\n\n[\nBarsRequired\n]\n\n\n[\nCalculateOnBarClose\n]\n\n\n[\nClearOutputWindow()\n]\n\n\n[\nDisplacement\n]\n\n\n[\nDisplayInDataBox\n]\n\n\n[\nDrawOnPricePanel\n]\n\n\n[\nInputPriceType\n]\n\n\n[\nOverlay\n]\n\n\n[\nPaintPriceMarkers\n]\n\n\n[\nSessionBreakLines\n]\n\n\n[\nVerticalGridLines\n]\n\n\n\n\nAdditional Keywords for Strategies\n\n\n\n\n[\nDefaultQuantity\n]\n\n\n[\nEntriesPerDirection\n]\n\n\n[\nEntryHandling\n]\n\n\n[\nSetStopLoss()\n]\n\n\n[\nSetProfitTarget()\n]\n\n\n[\nSetTrailStop()\n]\n\n\n[\nTimeInForce\n]\n\n\n[\nTraceOrders\n]\n\n\n\n\nMore Information\n\n\nCaution:\n\nThe Initialize() method is not only called up at the beginning of an indicator or strategy calculation, but also if the chart is reloaded unexpectedly or if the properties dialog of indicators is opened and so on.\nDevelopers of custom AgenaScripts should NOT use this method for running their own routines, opening forms, performing license checks, etc. The OnStartUp() method should be used for these kind of tasks.\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Blue, \nmyPlot\n));\nClearOutputWindow();\nAutoScale = false;\nOverlay = true;\nPaintPriceMarkers = false;\nDisplayInDataBox = false;\nCalculateOnBarClose = true;\n}\n\n\n\n\nInitRequirements()\n\n\nDescription\n\n\nThe InitRequirements() method is called up once at the beginning of an indicator and/or strategy calculation. This method is only necessary when using multi-bars.\nWithin InitRequirements, no other programming commands are executed. For initializing, the Initialize() or OnStartUp() method should be used.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nExample\n\n\nprotected override void InitRequirements()\n{\nAdd(DatafeedHistoryPeriodicity.Day, 1);\nAdd(DatafeedHistoryPeriodicity.Week, 1);\n}\n\n\n\n\nInputPriceType\n\n\nDescription\n\n\nThe input price type property determines which price series is used by default when calculating an indicator, if no other data series is explicitly stated.\nInputPriceType can be set with the Initialize() method; this specification is then valid for all further calculations.\nIf InputPriceType is in OnBarUpdate(), these changes are only valid starting with the next instruction.\nEvery further appearance of InputPriceType will be ignored!\n\n\nSee [\nPriceType\n]\n\n\nUsage\n\n\nInputPriceType\n\n\n\n\nExample1\n\n\nprotected override void Initialize()\n{\nClearOutputWindow();\nInputPriceType = PriceType.Low;\n}\nprotected override void OnBarUpdate()\n{\n// The input data series for the indicator (input) is low\nPrint(Low[0] + \n \n + Input[0] + \n \n + InputPriceType);\n}\n\n\n\n\nExample2\n\n\nprotected override void OnBarUpdate()\n{\n// These values are identical\n// since close is used as the input data series by default\nPrint(SMA(20)[0] + \n \n + SMA(Close, 20)[0]);\nInputPriceType = PriceType.Low;\n// From here on out, low is used instead of close\n// Both values are identical\nPrint(SMA(20)[0] + \n \n + SMA(Low, 20)[0]);\nInputPriceType = PriceType.High;\n// The instructions will be ignored\n// Input = low is still in effect\n}\n\n\n\n\nInstrument\n\n\nDescription\n\n\nWith \"instrument\", information concerning the trading instrument (stock, future etc.) is made available.\n\n\nDetailed information can be found here: \nInstruments\n.\n\n\nLine()\n\n\nDescription\n\n\nA line object is used for drawing a horizontal line in the chart. Usually, these are upper and lower trigger lines for indicators such as the RSI (70 and 30).\nThe lines described here are not to be confused with lines from the drawing objects (see \"DrawHorizontalLine\").\nLine objects can be added to an indicator with the help of the Add() method, and with this, added to the lines collection.\n\n\nSee [\nPlot\n].\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor\n\n\nLine color\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\nPen\n\n\nA pen object\n\n\n\n\n\n\nValue\n\n\nDefines which value on the y-axis the line will be drawn for\n\n\n\n\n\n\n\n\nUsage\n\n\nLine(Color color, double value, string name)\nLine(Pen pen, double value, string name)\n\n\n\n\nMore Information\n\n\nInformation on the pen class: [\nhttp://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx\n]\n\n\nExample\n\n\n// Example 1\n// A new line with standard values drawn at the value of 70\nAdd(new Line(Color.Black, 70, \nUpper\n));\n// Example 2\n// A new line with self-defined values\nprivate Line line;\nprivate Pen pen;\nprotected override void Initialize()\n{\n// Define a red pen with the line strength 1\npen = new Pen(Color.Red, 1);\n// Define a horizontal line at 10\nline = new Line(pen, 10, \nMyLine\n);\n// add the defined line to the indicator\nAdd(line);\n}\n// Example 3\n// Short form for the line in example 2\nAdd(new Line(new Pen(Color.Red, 1), 10, \nMyLine\n));\n\n\n\n\nLog()\n\n\nDescription\n\n\nLog() allows you to write outputs in the AgenaTrader log file (log tab). 5 different log levels are supported.\n\n\nNote:\n\n\nIf the log tab is not viewable, it can be displayed using the tools log.\n\n\nUsage\n\n\nLog\n(string message, LogLevel logLevel)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nText (message)\n\n\n\n\n\n\nlogLevel\n\n\nPossible values are\n\n\n\n\n\n\nInfoLogLevel.Info\n\n\n\n\n\n\n\n\nInfoLogLevel.Message\n\n\n\n\n\n\n\n\nInfoLogLevel.Warning\n\n\n\n\n\n\n\n\nInfoLogLevel.Alert\n\n\n\n\n\n\n\n\nInfoLogLevel.Error\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n//Tab protocol\nLog(\nThis is information.\n, InfoLogLevel.Info); //white\nLog(\nThis is a message.\n, InfoLogLevel.Message); // blue\nLog(\nThis is a warning.\n, InfoLogLevel.Warning); // yellow\nLog(\nThis is an alarm.\n, InfoLogLevel. AlertLog); //green\nLog(\nThis is a mistake.\n, InfoLogLevel.Error); // red\n//Tab messags\nLog(\nThis is a message (messages).\n, InfoLogLevel.Message); //gray\n//PopUp \n protocoll\nLog(\nThis is an alert popup window.\n, InfoLogLevel.Alert); //green\n\n\n\n\nLowestBar\n\n\nDescription\n\n\nThe LowestBar() method attempts to find the lowest bar within a predefined number of periods.\n\n\nSee [\nHighestBar()\n].\n\n\nParameter\n\n\nperiod Number of bars that will be searched for the lowest bar\n\n\nseries Every data series, such as close, high, low etc.\n\n\nReturn Value\n\n\nint\n barsAgo How many bars ago the low occurred\n\n\nUsage\n\n\nLowestBar(IDataSeries series, int period)\n\n\n\n\nExample\n\n\n// How many bars ago was the lowest low of the session?\nPrint(LowestBar(Low, Bars.BarsSinceSession - 1));\n// Which price did the lowest open of the current session have?\nPrint(\nThe lowest open price of the current session was: \n + Open[LowestBar(Low, Bars.BarsSinceSession - 1)]);\n\n\n\n\nMarketDataEventArgs\n\n\nDescription\n\n\nThe data type MarketDataEventArgs represents a change in the level 1 data and is used as a parameter of the OnMarketData() function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAskSize\n\n\nCurrent order volume on the ask side\n\n\n\n\n\n\nAskPrice\n\n\nCurrent ask price\n\n\n\n\n\n\nBidSize\n\n\nCurrent order volume on the bid side\n\n\n\n\n\n\nBidPrice\n\n\nCurrent bid price.\n\n\n\n\n\n\nInstrument\n\n\nAn object of the type instrument that contains the trading instrument for which the level 1 data is outputted. See \nInstruments\n\n\n\n\n\n\nLastPrice\n\n\nLast traded price\n\n\n\n\n\n\nMarketDataType\n\n\nPotential values are:\n\n\n\n\n\n\nMarketDataType.Ask\n\n\n\n\n\n\n\n\nMarketDataType.AskSize\n\n\n\n\n\n\n\n\nMarketDataType.Bid\n\n\n\n\n\n\n\n\nMarketDataType.BidSize\n\n\n\n\n\n\n\n\nMarketDataType.Last\n\n\n\n\n\n\n\n\nMarketDataType.Volume\n\n\n\n\n\n\n\n\nPrice\n\n\nThis is equal to last price. This field only exists for compatability reasons\n\n\n\n\n\n\nTime\n\n\nA date-time value containing the timestamp of the change\n\n\n\n\n\n\nVolume\n\n\nA long value that shows the volume\n\n\n\n\n\n\n\n\nExample\n\n\nSee [\nOnMarketData()\n].\n\n\nMarketDepthEventArgs\n\n\nDescription\n\n\nThe data type MarketDepthEventArgs represents a change in the level 2 data (market depth) and is used as a parameter within OnMarketDepth().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarketDataType\n\n\nPotential values are:\n\n\n\n\n\n\nMarketDataType.Ask\n\n\n\n\n\n\n\n\nMarketDataType.Bid\n\n\n\n\n\n\n\n\nMarketMaker\n\n\nA string value containing the market maker ID\n\n\n\n\n\n\nPosition\n\n\nAn int value that defines the position within the market depth\n\n\n\n\n\n\nOperation\n\n\nRepresents the action caused by a change in the order book.\n\n\n\n\n\n\nValues can be:\n\n\n\n\n\n\n\n\nOperation.Insert\n\n\n\n\n\n\n\n\nOperation.Remove\n\n\n\n\n\n\n\n\nOperation.Update\n\n\n\n\n\n\n\n\nPrice\n\n\nA double value that displays the bid/ask price\n\n\n\n\n\n\nTime\n\n\nA date-time value containing the timestamp of the change\n\n\n\n\n\n\nVolume\n\n\nA long value that shows the volume\n\n\n\n\n\n\n\n\nExample\n\n\nSee [\nOnMarketDepth()\n].\n\n\nOverlay\n\n\nDescription\n\n\nThe overlay property defines whether the indicator outputs are displayed in the price chart above the bars or whether a separate chart window is opened below the charting area.\n\n\nOverlay = true\n\n\n\n\nThe indicator is drawn above the price (for example an [\nSMA\n])\n\n\nOverlay = false (default)\n\n\n\n\nA separate chart window is opened (RSI)\n\n\nThis property can be queried within the script and outputs a value of the type Boolean (true or false).\n\n\nUsage\n\n\nOverlay\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//The indicator should be displayed within a separate window\nOverlay = false;\n}\n\n\n\n\nPaintPriceMarkers\n\n\nDescription\n\n\nThe paint price markers property defines whether the so-called price markers for the indicator outputs are displayed on the right-hand chart border (in the price axis) or not. In some cases it makes sense to switch these off for a better overview in the chart.\n\nPaintPriceMarkers = true (default)\n\n\nPrice markers are shown in the price axis\n\n\nPaintPriceMarkers = false\n\n\nPrice markers are not shown in the price axis\n\n\nThis property can be queried within the script and returns a value of the type Boolean (true or false).\n\n\nUsage\n\n\nPaintPriceMarkers\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//Do not show price markers in the price axis\nPaintPriceMarkers = false;\n}\n\n\n\n\nPlaySound()\n\n\nDescription\n\n\nThis method allows you to play a wav file.\n\n\nUsage\n\n\nPlaySound\n(wavFile)\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\nwavFile File name of the wav file to be played\n\n\nExample\n\n\nusing System.IO;\nstring path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\nstring file = \n\\\\\\\\AgenaTrader\\\\\\\\Sounds\\\\\\\\Alert1.wav\n;\nPlaySound(path + file);\n\n\n\n\nPlot()\n\n\nDescription\n\n\nA plot (drawing) is used to visually display indicators in a chart. Plot objects are assigned to an indicator with the help of the Add() method and attached to the plots collection.\nSee [\nLine\n].\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor\n\n\nDrawing color\n\n\n\n\n\n\nPen\n\n\nPen object\n\n\n\n\n\n\nPlotStyle\n\n\nLine type\n\n\n\n\n\n\nPlotStyle.Bar\n\n\n\n\n\n\n\n\nPlotStyle.Block\n\n\n\n\n\n\n\n\nPlotStyle.Cross\n\n\n\n\n\n\n\n\nPlotStyle.Dot\n\n\n\n\n\n\n\n\nPlotStyle.Hash\n\n\n\n\n\n\n\n\nPlotStyle.Line\n\n\n\n\n\n\n\n\nPlotStyle.Square\n\n\n\n\n\n\n\n\nPlotStyle.TriangleDown\n\n\n\n\n\n\n\n\nPlotStyle.TriangleUp\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\nUsage\n\n\nPlot(Color color, string name)\nPlot(Pen pen, string name)\nPlot(Color color, PlotStyle plotStyle, string name)\nPlot(Pen pen, PlotStyle plotStyle, string name)\n\n\n\n\nMore Information\n\n\nInformation on the pen class: [\nhttp://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx\n]\n\n\nExample\n\n\n// Example 1\n// Plot with standard values (line with line strength 1)\nAdd(new Plot(Color.Green, \nMyPlot\n));\n// Example 2\n// user-defined values for pen and plot style\nprivate Plot plot;\nprivate Pen pen;\nprotected override void Initialize()\n{\n// a red pen with the line strength of 6 is defined\npen = new Pen(Color.Blue, 6);\n// a point line with a thick red pen from above is defined\nplot = new Plot(pen, PlotStyle.Dot, \nMyPlot\n);\n// The defined plot is to be used as a representation for an indicator\nAdd(plot);\n}\n// Example 3\n// Abbreviation of example 2\nprotected override void Initialize()\n{\nAdd(new Plot(new Pen(Color.Blue, 6), PlotStyle.Dot, \nMyPlot\n));\n}\n\n\n\n\nPlotMethod\n\n\nDescription\n\n\nIn each indicator, the plot method can be overridden in order to add your own graphics (GDI+) to the price chart with the help of the graphics class (System.Drawing).\n\n\nSee [\nhttp://msdn.microsoft.com/de-de/library/system.drawing.graphics.aspx\n].\n\n\nThe [\nChartControl\n] object offers several parameters.\n\n\nMore examples: [\nBar Numbering\n][\nPlotSample\n], \nChart Background Image\n.\n\n\nParameter\n\n\ngraphics The graphics object of the price chart (context)\n\n\nrectangle The size of the drawing area (type \"public struct rectangle\")\n\n\ndouble min The smallest price in the y-axis\n\n\ndouble max The biggest price in the y-axis\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\npublic override void Plot(Graphics graphics, Rectangle r, double min, double max)\n\n\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\nExample for the usage of the plot method.\n)]\npublic class PlotSample : UserIndicator\n{\nprivate StringFormat stringFormat = new StringFormat();\nprivate SolidBrush brush = new SolidBrush(Color.Black);\nprivate Font font = new Font(\nArial\n, 10);\nprotected override void Initialize()\n{\nChartOnly = true;\nOverlay = true;\n}\nprotected override void OnBarUpdate()\n{}\nprotected override void OnTermination()\n{\nbrush.Dispose();\nstringFormat.Dispose();\n}\npublic override void Plot(Graphics graphics, Rectangle r, double min, double max)\n{\n// Fill a rectangle\nSolidBrush tmpBrush = new SolidBrush(Color.LightGray);\ngraphics.FillRectangle(tmpBrush, new Rectangle (0, 0, 300, 300));\ntmpBrush.Dispose();\n// Draw a red line from top left to bottom right\nPen pen = new Pen(Color.Red);\ngraphics.DrawLine(pen, r.X, r.Y, r.X + r.Width, r.Y + r.Height);\n// Draw a red line from bottom left to top right\n// Use anti-alias (the line appears smoother)\n// The current settings for the smoothing are saved\n// Restore after drawing\nSmoothingMode oldSmoothingMode = graphics.SmoothingMode; //Save settings\ngraphics.SmoothingMode = SmoothingMode.AntiAlias; // Use higher smoothing settings\ngraphics.DrawLine(pen, r.X, r.Y + r.Height, r.X + r.Width, r.Y);\ngraphics.SmoothingMode = oldSmoothingMode; // Settings restored\npen.Dispose();\n// Text in the upper left corner (position 10,35)\nstringFormat.Alignment = StringAlignment.Near; // Align text to the left\nbrush.Color = Color.Blue;\ngraphics.DrawString(\nHello world!\n, font, brush, r.X + 10, r.Y + 35, stringFormat);\n// Text in the left lower corner and draw a line around it\nbrush.Color = Color.Aquamarine;\ngraphics.FillRectangle(brush, r.X + 10, r.Y + r.Height - 20, 140, 19);\n// Draw outside line\npen = new Pen(Color.Black);\ngraphics.DrawRectangle(pen, r.X + 10, r.Y + r.Height - 20, 140, 19);\npen.Dispose();\n// Write text\nbrush.Color = Color.Red;\ngraphics.DrawString(\nHere is bottom left!\n, font, brush, r.X + 10, r.Y + r.Height - 20, stringFormat);\n}\n}\n}\n\n\n\n\nPriceType\n\n\nDescription\n\n\nPrice type describes a form of price data.\n\n\nSee [\nInputPriceType\n]\n\n\nFollowing variables are available:\n-   PriceType.Close\n-   PriceType.High\n-   PriceType.Low\n-   PriceType.Median\n-   PriceType.Open\n-   PriceType.Typical\n-   PriceType.Volume\n-   PriceType.Weighted\n\n\nUsage\n\n\nPriceType\n\n\nExample\n\n\nSee [\nInputPriceType\n]\n\n\nPrint()\n\n\nDescription\n\n\nThe Print() method writes outputs in the AgenaTrader output window.\nSee [\nClearOutputWindow()\n].\n\n\nUsage\n\n\nPrint(string message)\nPrint(bool value)\nPrint(double value)\nPrint(int value)\nPrint(DateTime value)\nPrint(string format, string message)\n\n\n\n\nParameter\n\n\nstring Text an individual message text\n\n\nReturn Value\n\n\nnone\n\n\nMore Information\n\n\nInformation regarding output formatting: \nFormatting numbers\n.\n\n\nHints about the String.Format() method: [\nhttp://msdn.microsoft.com/de-de/library/fht0f5be%28v=vs.80%29.aspx\n]\n\n\nExample\n\n\n// \nQuick\nDirty\n formatting of a number with 2 decimal points\nPrint(Close[0].ToString(\n0.00\n));\n// Output day of the week from the timestamp for the bar\nPrint(string.Format(\n{0:dddd}\n, Time[0]));\n// An additional empty row with an escape sequence\nPrint(\nOne empty row afterwards \\\\n\n);\n\n\n\n\nRemoveDrawObject()\n\n\nDescription\n\n\nThe RemoveDrawObject() method removes a specific drawing object from the chart based on a unique identifier (tag).\nSee [\nRemoveDrawObjects()\n].\n\n\nUsage\n\n\nRemoveDrawObject(string tag)\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\nstring tag The clearly identifiable name for the drawing object\n\n\nExample\n\n\nRemoveDrawObjects(\nMy line\n);\n\n\n\n\nRemoveDrawObjects()\n\n\nDescription\n\n\nThis method removes all drawings from the chart\nSee [\nRemoveDrawObject()\n].\n\n\nUsage\n\n\nRemoveDrawObjects()\n\n\nReturn Value\n\n\nnone\n\n\nExample\n\n\n//Delete all drawings from the chart\nRemoveDrawObjects();\n\n\n\n\nRising()\n\n\nDescription\n\n\nWith this method you can check if an uptrend exists, i.e. if the current value is bigger than the previous bar\u2019s value.\n\n\nSee [\nCrossAbove()\n], [\nCrossBelow()\n], [\nFalling()\n].\n\n\nUsage\n\n\nRising(IDataSeries series)\n\n\n\n\nReturn Value\n\n\ntrue\n If the data series is rising\n\nfalse\n If the data series is not rising\n\n\nParameter\n\n\nseries A data series such as an indicator, close, high etc.\n\n\nExample\n\n\n// Check if SMA(20) is rising\nif (Rising(SMA(20)))\nPrint(\nThe SMA(20) is currently rising.\n);\n\n\n\n\nSessionBreakLines\n\n\nDescription\n\n\nThe property SessionBreakLines defines whether the vertical lines that represent a trading session stop are displayed within the chart.\nThis may be useful for stocks and other instruments if you wish to display session breaks/trading stops.\n\nSessionBreakLines = true (default)\n\n\nSession break lines are shown\n\n\nSessionBreakLines = false\n\n\nSession break lines are not shown\n\n\nThis property can be queried within the script and outputs a value of the type Boolean (true or false).\n\n\nUsage\n\n\nSessionBreakLines\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n//Session break lines should not be shown\nSessionBreakLines = false;\n}\n\n\n\n\nTickSize\n\n\nA tick is the smallest possible price change of a financial instrument within an exchange. If, for example, the trading prices are specified to 2 decimal places, then a tick equals 0.01. You can expect Forex instruments to be specified to within 4 or 5 decimal places. A tick is called a pip in Forex trading and usually equals 0.0001 or 0.00001.\nThe tick value is usually predefined by the exchange and does not (usually) change.\nSee [\nInstrument.TickSize\n].\n\n\nUsually, a tick is displayed as a decimal number. Historically speaking (especially in American exchanges) stocks have been noted with tick sizes of 1/16 of a dollar.\nThis notation is still widespread within commodities. Corn futures (ZC) are noted in \u00bc US cents/bushel (usually equals 12.50 US$ per contract).\nUS treasury bonds are noted in a tick size of 1/32 points, which equals 31.25$.\nNotations are usually made with apostrophes, for example:\n\n\n149'00 equals exactly 149,\n149'01 equals 149 1/32 (meaning 149.03125),\n149'31 equals 149 31/32 (149.96875),\nand the next value after this is 150\u201900\n\n\nIn the so-called T-Bond intermonth spreads, notations are specified in quarters of 1/32, resulting in point values of 7.8125 per contract.\n\n\nNotations have a dash:\n\n\n17-24 equals 17 24/32 points,\n17-242 equals 17 24.25/32 points,\n17-245 equals 17 24.5/32 points and\n17-247 equals 17 24.75/32 points.\nThe next notation after 17-247 is 17-25 and then 17-252, 17-255 etc.\nAfter 17-317 comes 18.\n\n\nThe individual contract specifications can be found on the websites of the respective exchanges.\n\n\nCME: [\nwww.cmegroup.com\n] under Products \n Trading\nEurex (FDAX): \nhttp://www.eurexchange.com/exchange-en/products/idx/dax/17206/\n\n\nSee [\nInstrument.TickSize\n].\n\n\nTimeFrame\n\n\nSee [\nBars.TimeFrame\n].\n\n\nWhen using multiple timeframes ([\nMultibars\n][\nMultiBars\n]) in an indicator, please see [\nTimeFrames\n].\n\n\nToDay()\n\n\nDescription\n\n\nTo day is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.\nExperienced programmers can continue using the date-time function directly.\n\n\nTo day outputs an int representation in the format of yyyymmdd.\n(yyyy = year, mm = month, dd = day)\n\n\n13.08.2012 would thus be 20120813.\n\n\nSee [\nToTime\n].\n\n\nHelp with date-time: [\nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n]\n\n\nUsage\n\n\nToDay(DateTime time)\n\n\nExample\n\n\n// Do not trade on the 11\nsup\nth\n/sup\n of September\nif (ToDay(Time[0]) = 20130911)\nreturn;\n\n\n\n\nToTime()\n\n\nDescription\n\n\nTo time is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.\n\n\nTo time outputs an int representation in the format hhmmss.\n(hh = hour, mm = minute, ss = seconds)\n\n\nThe time 07:30 will be displayed as 73000 and 14:15:12 will become 141512.\n\n\nSee [\nToDay\n].\n\n\nHelp with date-time: [\nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n]\n\n\nUsage\n\n\nToTime(DateTime time)\n\n\nExample\n\n\n// Only enter trades between 08:15 and 16:35\nif (ToTime(Time[0]) \n= 81500 \n ToTime(Time[0]) \n= 163500)\n{\n// Any trading technique\n}\n\n\n\n\nUpdate()\n\n\nDescription\n\n\nThe Update() method calls up the OnBarUpdate method in order to recalculate the indicator values.\n\n\nUpdate() is to be used with caution and is intended for use by experienced programmers.\n\n\nUsage\n\n\nUpdate()\n\n\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nThe effect of update can be illustrated with the help of 2 indicators.\nThe first indicator, Ind1, uses a public variable from the indicator Ind2.\n\n\nCode from Ind1:\n\n\npublic class Ind1 : UserIndicator\n{\nprotected override void OnBarUpdate()\n{\nPrint( Ind2().MyPublicVariable );\n}\n}\n\n\n\n\nCode from Ind2:\n\n\nprivate double myPublicVariable = 0;\nprotected override void OnBarUpdate()\n{\nmyPublicVariable = 1;\n}\npublic double MyPublicVariable\n{\nget\n{\nUpdate();\nreturn myPublicVariable;\n}\n}\n\n\n\n\nWithout Update() - Wrong\n\nIf Ind2 is called up by Ind1, the get-method of MyPublicVariable is called up in Ind2. Without Update(), the value of MyPublicVariable would be returned. In this case it would be 0.\n\n\nWith Update() - Correct\n\nBy calling up Update(), OnBarUpdate() is initially executed by Ind2. This sets MyPublicVariable to 1. Lastly, the value 1 is passed on to the requesting indicator.\n\n\nValue\n\n\nDescription\n\n\nValue is a data series object containing the first data series of an indicator.\n\n\nWhen the Add() method is called up, a value object is automatically created and added to the values collection.\n\n\nValue is identical to Values[0].\n\n\nUsage\n\n\nValue\n\n\nValue[\nint\n barsAgo]\n\n\nMore Information\n\n\nThe methods known for a collection, Set(), Reset(), and Count(), can be used for values.\n\n\nExample\n\n\nSee [\nValues\n].\n\n\nVerticalGridLines\n\n\nDescription\n\n\nThe property VerticalGridLines defines whether or not the regularly spaced vertical lines (the so-called grid) are shown within the charting area.\n\n\nVerticalGridLines = true (default)\n\n\nVertical grid lines are shown\n\n\nVerticalGridLines = false\n\n\nVertical grid lines are not shown\n\n\nThis property can be queried within the script and returns a value of the type Boolean (true or false).\n\n\nUsage\n\n\nVerticalGridLines\n\n\nExample\n\n\nprotected override void Initialize()\n{\nAdd(new Plot(Color.Red, \nMyPlot1\n));\n// Vertical grid lines shall not be shown within the chart\nVerticalGridLines = false;\n}", 
            "title": "Keywords"
        }, 
        {
            "location": "/keywords/#keywords", 
            "text": "", 
            "title": "Keywords"
        }, 
        {
            "location": "/keywords/#add", 
            "text": "", 
            "title": "Add()"
        }, 
        {
            "location": "/keywords/#description", 
            "text": "The add method allows you to add plots or line objects to the chart. When a new plot object is added using Add(), this automatically creates a data series of the type DataSeries, which is attached to this object. The value collection allows you to reference and access this data series.\nAdd() can be used with the Initialize() and the OnBarUpdate() methods.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter", 
            "text": "plot \u2013 a [ Plot ] object\nline \u2013 a [ Line ] object", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage", 
            "text": "Add(Plot plot)\nAdd(Line line)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example", 
            "text": "#region Usings\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n#endregion\nnamespace AgenaTrader.UserCode\n{\n  [Description( Enter the description for the new custom indicator here )]\n  public class MyIndicator : UserIndicator\n  {\n    protected override void Initialize()\n    {\n    // Two blue lines will be placed into the chart, one at 70 and the other at 30\n    Add(new Line(Color.Blue, 70,  UpperLine ));\n    Add(new Line(Color.Blue, 30,  LowerLine ));\n\n    // Add 2 plots\n    Add(new Plot(Color.Red,  myFastSMA ));\n    Add(new Plot(Color.Blue,  mySlowSMA ));\n    }\n\n    protected override void OnBarUpdate()\n    {\n    //The set method is assigned to the value of the current bar\n    FastSMA.Set( SMA(8)[0] ); // is identical with Values[0].Set( SMA(8)[0] );\n    SlowSMA.Set( SMA(50)[0] ); // is identical with Values[1].Set( SMA(50)[0] );\n    }\n\n    // Two data series are made available here\n    // These are not necessary for the display of the indicator // With the help of these series, one indicator can access the other\n    // For example: double d = MyIndicator.FastSMA[0] - MyIndicator.SlowSMA[0];\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries FastSMA\n    {\n      get { return Values[0]; }\n    }\n\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries SlowSMA\n    {\n      get { return Values[1]; }\n    }\n  }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#alert", 
            "text": "", 
            "title": "Alert()"
        }, 
        {
            "location": "/keywords/#description_1", 
            "text": "The alert method creates an acoustic and/or visual alarm.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_1", 
            "text": "Alert(string message, bool showMessageBox, string soundLocation);\nDue to compatability reasons, an old signature is still used here. When using this method, the color settings and the  re-arm seconds  parameter are ignored.\nAlert(string id, AlertPriority priority, string message, string soundLocation, int rearmSeconds, Color backColor, Color forColor);", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value", 
            "text": "None", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_1", 
            "text": "message  Alert text displayed within the messages tab    soundLocation  Name of a sound file in the *.wav format. If no path is specified, then \"My Documents\\AgenaTrader\\Sounds\\ is used    showMessageBox  If set to \"true\", a message box will be displayed in addition to the sound", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_1", 
            "text": "// Message will be outputted if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nAlert( Check short signal! , true,  Alert4.wav );  To use music files in a different path, you need to specify the path:  string pathOfSoundfile = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)+@ \\\\MyAlertSounds\\\\ ;\nstring nameOfSoundFile =  MyAlertSoundFile.wav ;\nAlert( Message text , true, pathOfSoundfile + nameOfSoundFile);", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#allowremovalofdrawobjects", 
            "text": "", 
            "title": "AllowRemovalOfDrawObjects"
        }, 
        {
            "location": "/keywords/#description_2", 
            "text": "\"AllowRemovalOfDrawObjects\" is a property of indicators that can be set under [ Initialize() ].  AllowRemovalOfDrawObjects = true  Drawing objects that are drawn by an indicator or a strategy can be manually removed from the chart.  AllowRemovalOfDrawObjects = false (default)  Drawing objects that have been created by a strategy or indicator CANNOT be manually removed from the chart. They are removed once the indicator or strategy is removed.  This property can be queried and will return \"true\" or \"false\".", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_2", 
            "text": "AllowRemovalOfDrawObjects", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_2", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//Drawing objects can be manually removed from the chart\nAllowRemovalOfDrawObjects = true;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#attribute", 
            "text": "Attribute is a component of the C# language. Within AgenaScript, indicators, and strategies, you can use these attributes in the same manner as you would in C#.\nInformation regarding the usage of attributes can be found here:  [ http://msdn.microsoft.com/de-de/library/z0w1kczw%28v=vs.80%29.aspx ]  The most commonly used attributes in AgenaScript are:   [ Browsable ]  [ Category ]  [ ConditionalValue ]  [ Description ]  [ DisplayName ]  [ TimeFrameRequirements ]  [ XmlIgnore ]", 
            "title": "Attribute"
        }, 
        {
            "location": "/keywords/#browsable", 
            "text": "Browsable is an  [Attribut]e  within AgenaScript.  AgenaScript uses public variables for entering parameters for indicators (such as periods for the SMA) and for outputting events and calculations within indicators (for example, data series).\nVariables used for entering parameters must be displayed in the properties dialog. Data series are exempt from this.\nPublic variables with the browsable attribute set to false are not displayed within the properties dialog.  By default, browsable is set to true. Therefore, within a variable containing an entry parameter, the attribute does not need to be specified.  Example for a parameter:  The parameter should be displayed and queried in the properties window. Therefore browsable should be set to true.  [Description( Numbers of bars used for calculations )]\n[Category( Parameters )]\npublic int Period\n{\nget { return period; }\nset { period = Math.Max(1, value); }\n}  Example for a data series:  [Browsable(false)]\n[DisplayName( Lower band )]\n[XmlIgnore]\npublic DataSeries Lower\n{\nget { return Values[0]; }\n}", 
            "title": "Browsable"
        }, 
        {
            "location": "/keywords/#category", 
            "text": "Category is an  [Attribut]e  in AgenaScript.  The category attribute defines under which category in the properties dialog the parameter is shown.\nIf this attribute is missing, the parameters category is accepted as the standard.  The following example shows how to create the new category \"My Parameters\" in the properties dialog:  [Category( My Parameters )]\n[DisplayName( Period number )]\npublic double _period\n{\nget { return _period; }\nset { _period = value; }\n}", 
            "title": "Category"
        }, 
        {
            "location": "/keywords/#conditionalvalue", 
            "text": "Conditional value is an  [Attribut]e  in AgenaScript.  Normally, when making comparisons within the ConditionEscort, the data series generated by indicators are used. One such example would be checking whether a moving average lies above or below a specific price value.\nAn indicator can also yield values that are not contained within data series, such as values of the type int, double, char, Boolean, string, etc.\nTo use these values within the scanner or ConditionEscort, they have to be labeled with the conditional value attribute.  [Browsable(false)]\n[XmlIgnore]\n[ConditionalValue]\npublic int PublicVariable\n{\nget\n{\nUpdate();\nreturn _internVariable;\n}\n}", 
            "title": "ConditionalValue"
        }, 
        {
            "location": "/keywords/#description_3", 
            "text": "Description is an attribute in AgenaScript.  The description attribute is used in AgenaScript for classes and public variables.\nAs an attribute of the class, the text is a description of the function of the entire indicator.  [Description( Displays the tick count of a bar. )]\npublic class TickCounter : UserIndicator\n{\n//As an attribute of a public variable, the text is a description of the function of the parameter.\n[Description( Number of standard deviations )]\n[DisplayName( # of std. dev. )]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}  The descriptions are displayed in the relevant properties dialog.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#displayname", 
            "text": "Display name is an attribute in AgenaScript.  The display name attribute defines the text shown in the properties dialog for the parameter.  If this attribute is not specified, the name of the public variable is used.  [Description( Number of standard deviations )]\n[DisplayName( # of std. dev. )]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}", 
            "title": "DisplayName"
        }, 
        {
            "location": "/keywords/#timeframerequirements", 
            "text": "Timeframe requirements is an attribute in AgenaScripts.  If you want a script to use data from various timeframes, the class requires the attribute \u201eTimeFrameRequirements\". You can specify multiple timeframes here:  [TimeFrameRequirements( 1 day )]\n[TimeFrameRequirements( 15 minutes ,  1 day ,  1 week )]  The amount of data provided for the other timeframes will always be the same as the number of actual candles loaded into the chart. If there are 500 candles for a 5-minute chart, then 500 candles of another timeframe will also be loaded. In the first example above, 500 daily candles will be loaded. In the second example, 500 15-minute candles, 500 daily candles and 500 weekly candles will be loaded.\nThe amount of data can become rather large very quickly, thus you should take precautions when using this attribute.  See [ MultiBars ].  Important:  If a class uses a different indicator that requires one or more secondary timeframes, then the \"TimeFrameRequirements\" attribute must be set for the class retrieving the data. An example for this can be seen here: [ GetDayBar ].", 
            "title": "TimeFrameRequirements"
        }, 
        {
            "location": "/keywords/#xmlignore", 
            "text": "XML ignore is an attribute in AgenaScript.  AgenaTrader saves all parameter settings for the indicators in a template. The template files are saved in an XML format. In order to avoid a parameter being saved as part of the template, the attribute XML ignore can be set.  To save parameters in an XML file, the values must be serialized. Under most circumstances, AgenaTrader performs this automatically. Self-defined data types cannot be serialized automatically, so in this case the programmer is responsible for the correct serialization.\nIn the following example, the color and font are used as parameters of an indicator. AgenaTrader has two methods for serializing color and font information (TextColorSerialize and TextFontSerialize). Both parameters \u2013 TextColor and TextFont \u2013 thus need to be marked with the XML ignore parameter.  private Color _textColor = Color.Blue;\nprivate Font _textFont = new Font( Arial , 12, FontStyle.Bold);\n[XmlIgnore]\n[Description( Textcolor )]\npublic Color TextColor\n{\nget { return _textColor; }\nset { _textColor = value; }\n}\n[Browsable(false)]\npublic string TextColorSerialize\n{\nget { return SerializableColor.ToString(_textColor); }\nset { _textColor = SerializableColor.FromString(value); }\n}\n[XmlIgnore()]\n[Description( TextFont )]\npublic Font TextFont\n{\nget { return _textFont; }\nset { _textFont = value; }\n}\n[Browsable(false)]\npublic string TextFontSerialize\n{\nget { return SerializableFont.ToString(_textFont); }\nset { _textFont = SerializableFont.FromString(value); }\n}", 
            "title": "XMLIgnore"
        }, 
        {
            "location": "/keywords/#autoscale", 
            "text": "", 
            "title": "AutoScale"
        }, 
        {
            "location": "/keywords/#description_4", 
            "text": "Auto scale is a property of indicators that can be set within the Initialize() method.  AutoScale = true (default)  The price axis (y-axis) of the chart is set so that all plots and lines of an indicator are visible.  AutoScale = false  Plots and lines of an indicator or strategy are not accounted for in the scaling of the y-axis. Therefore they may lie outside of the visible chart area.  This property can be queried and will return either \"true\" or \"false\".", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_3", 
            "text": "AutoScale", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_3", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//Scale the chart so that all drawing objects are visible\nAutoScale = true;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#barsrequired", 
            "text": "", 
            "title": "BarsRequired"
        }, 
        {
            "location": "/keywords/#description_5", 
            "text": "The property \"BarsRequired\" determines how many historical bars are required for an indicator or a strategy to call up the OnBarUpdate() method for the first time and thus begin the calculations. Bars required should be set within the Initialize() method.\nThe setting should be chosen carefully. If you require 100 days for the calculation of a moving average, then you should ensure that at least 100 days of historical data are loaded.\nThe property can be queried in the script and will return an int value.  When OnBarUpdate is called up for the first time, the CurrentBar property is 0 regardless of the value of BarsRequired.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_4", 
            "text": "BarsRequired", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_4", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//The indicator requires a minimum of 50 bars loaded into the history\nBarsRequired = 50;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#calculateonbarclose", 
            "text": "", 
            "title": "CalculateOnBarClose"
        }, 
        {
            "location": "/keywords/#description_6", 
            "text": "The property \"CalculateOnBarClose\" determines the events for which AgenaTrader can call up the OnBarUpdate() method.  CalculateOnBarClose = true  OnBarUpdate()  is called up when a bar is closed and the next incoming tick creates a new bar.  CalculateOnBarClose = false  OnBarUpdate() is called up for each new incoming tick.\nIf you are running AgenaTrader on older hardware, this may cause performance issues with instruments that are highly liquid.\nThe property can be queried in the script and will return a value of the type Boolean (true or false).\nCalculateOnBarClose can be used within Initialize() and also within OnBarUpdate().\nOnBarUpdate is only called up for the closing price of each bar with historical data, even if CalculateOnBarClose is set to false.\nWhen an indicator is called up by another indicator, the CalculateOnBarClose property of the retrieved indicator overwrites the indicator performing the retrieving.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_5", 
            "text": "CalculateOnBarClose", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#more-information", 
            "text": "See [ Bars ].", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_5", 
            "text": "protected override void Initialize()\n{\n//Indicator calculation should only occur when a bar has closed/finished\nCalculateOnBarClose = true;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#chartcontrol", 
            "text": "Chart control is an object that provides reading access of various properties for the chart.  The important properties are:   ChartFontColor, BackColor  UpColor, DownColor  Font  BarMarginLeft, BarMarginRight  BarSpace, BarWidth  BarsPainted  FirstBarPainted, LastBarPainted  BarsVisible  FirstBarVisible, LastBarVisible  GetXByBarIdx, GetYByValue   An example can be seen here: [ PlotSample ].  BarsPainted und BarsVisible:  BarsPainted contains the number of bars that a chart  could  display from the left to right border with the current width and distance of the candles.\nBarsVisible contains the number of bars actually visible.  FirstBarPainted und FirstBarVisible:  FirstBarPainted contains the number of the bar that  would  be displayed on the left border of the chart.  FirstBarVisible contains the number of the bar that is actually shown as the first bar on the left side of the chart area.  Example: the chart has been moved so that the first bar of the chart is now in the middle of the chart.  FirstBarPainted would be negative.  FirstBarVisible would be 0.  LastBarPainted und LastBarVisible:  LastBarPainted contains the number of the bar that  would  be displayed on the right border of the chart.  LastBarVisible contains the number of the bar that is actually displayed on the right side of the chart.  Example: the chart has been moved so that the last bar of the chart is displayed in the middle section.  LastBarPainted would be larger than Bars.Count.  LastBarVisible would be Bars.Count -1.", 
            "title": "ChartControl"
        }, 
        {
            "location": "/keywords/#clearoutputwindow", 
            "text": "", 
            "title": "ClearOutputWindow()"
        }, 
        {
            "location": "/keywords/#description_7", 
            "text": "The ClearOutputWindow() method empties the output window. The method can be used within Initialize() as well as within OnBarUpdate().\nThe output window contains all outputs that have been created with the [ Print() ] command.\nUsing the output window is a great method for code debugging.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_6", 
            "text": "ClearOutputWindow()", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#parameter_2", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_1", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#example_6", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n// Delete the content of the output window\nClearOutputWindow();\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#crossabove", 
            "text": "", 
            "title": "CrossAbove()"
        }, 
        {
            "location": "/keywords/#description_8", 
            "text": "The CrossAbove() method allows you to check whether a crossing of two values has occurred (from bottom to top) within a predefined number of periods. The values can be a market price, an indicator, a data series or a constant value.  See [ CrossBelow() ], [ Rising() ], [ Falling() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_7", 
            "text": "CrossAbove(IDataSeries series1, double value, int lookBackPeriod)\nCrossAbove(IDataSeries series1, IDataSeries series2, int lookBackPeriod)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_2", 
            "text": "true  a cross has occurred false  a cross has not occurred", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_3", 
            "text": "lookBackPeriod  Number of bars within which a cross will be searched for    series1 und series2  A data series such as an indicator, close, high, etc.    value  A constant value of the type double", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_7", 
            "text": "// Puts out a notice if the SMA(20) crosses above the SMA(50)\nif (CrossAbove(SMA(20), SMA(50), 1))\nPrint( SMA(20) has risen above SMA(50)! );\n// Puts out a notice if the SMA(20) crosses above the value of 40\nif (CrossAbove(SMA(20), 40, 1))\nPrint( SMA(20) has risen above 40! );\n// Put out a notice for a long entry if the SMA(20) has crossed above the SMA(50) within the last 5 bars.\nif (CrossAbove(SMA(20), SMA(50), 1)   Close[0]   Close[1])\nPrint( Long entry !!! );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#crossbelow", 
            "text": "", 
            "title": "CrossBelow()"
        }, 
        {
            "location": "/keywords/#description_9", 
            "text": "Using the CrossBelow() method, you can test whether or not a cross below has occurred within a predefined number of periods. The values can be the market price, an indicator, any data series, or a constant value.  See [ CrossAbove() ], [ Rising() ], [ Falling() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_8", 
            "text": "CrossBelow(IDataSeries series1, double value, int lookBackPeriod)\nCrossBelow(IDataSeries series1, IDataSeries series2, int lookBackPeriod)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_3", 
            "text": "true  a cross has occurred false  a cross has not occurred", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_4", 
            "text": "lookBackPeriod  Number of Bars within which a cross will be searched for    series1 und series2  A data series such as an indicator, close, high etc.    value  A constant value of the type double", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_8", 
            "text": "// Puts out a notice if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nPrint( SMA(20) has fallen below SMA(50)! );\n// Puts out a notice if the SMA(20) falls below the value of 40\nif (CrossBelow(SMA(20), 40, 1))\nPrint( SMA(20) has fallen below 40! );\n// Puts out a notice for a short entry if a crossing of the SMA(20) below the SMA(50) has occurred within the last 5 bars.\n.\nif (CrossBelow(SMA(20), SMA(50), 1)   Close[1]   Close[0])\nPrint( Short entry !!! );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#currentbar", 
            "text": "", 
            "title": "CurrentBar"
        }, 
        {
            "location": "/keywords/#description_10", 
            "text": "Current bar is a method of indexing bars used in the OnBarUpdate() method. If a chart contains 500 bars and an indicator is to be calculated on the basis of these, then AgenaTrader will begin calculating from the oldest bar. The oldest bar receives the number 0. Once the calculation for this bar has been completed, the OnBarUpdate() method is called up for the next bar, which in turn receives the number 1. This continues until the last bar, which receives a value of 500.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_5", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_4", 
            "text": "Current bar is a variable of the type int, which always contains the number of the bar currently being used.", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#usage_9", 
            "text": "CurrentBar", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#more-information_1", 
            "text": "The OnBarUpdate() method uses numbering different from that of CurrentBar in terms of the [ Barindex ][ Bars ]. Understanding this difference is of great importance, which is why we ask you to please read the following paragraph carefully:  CurrentBar numbers continuously from the oldest to youngest bar starting with 0. The BarIndex for the youngest bar is always 0. In the example referenced below this paragraph, Time[0] stands for the timestamp of the current bar. The index of the oldest bar always has 1 added to it. Thus a logical numbering of barsAgo is possible. The timestamp for the bar of 5 periods ago is Time[5].\nFor using multiple timeframes (multi-bars) in an indicator, see CurrentBars.", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_9", 
            "text": "protected override void OnBarUpdate()\n{\nPrint( Call of OnBarUpdate for bar nr.   + CurrentBar +   of   + Time[0]);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#datafeedhistoryperiodicity", 
            "text": "", 
            "title": "DatafeedHistoryPeriodicity"
        }, 
        {
            "location": "/keywords/#description_11", 
            "text": "Datafeed history periodicity is a data type.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#definition", 
            "text": "public enum DatafeedHistoryPeriodicity\n-   DatafeedHistoryPeriodicity.Tick\n-   DatafeedHistoryPeriodicity.Second\n-   DatafeedHistoryPeriodicity.Minute\n-   DatafeedHistoryPeriodicity.Hour\n-   DatafeedHistoryPeriodicity.Day\n-   DatafeedHistoryPeriodicity.Week\n-   DatafeedHistoryPeriodicity.Month\n-   DatafeedHistoryPeriodicity.Volume\n-   DatafeedHistoryPeriodicity.Range\n-   DatafeedHistoryPeriodicity.Quarter\n-   DatafeedHistoryPeriodicity.Year\n-   DatafeedHistoryPeriodicity.HeikinAshi\n-   DatafeedHistoryPeriodicity.Renko\n-   DatafeedHistoryPeriodicity.LineBreak\n-   DatafeedHistoryPeriodicity.Kagi\n-   DatafeedHistoryPeriodicity.PointAndFigure\n-   DatafeedHistoryPeriodicity.Custom  See  TimeFrame ,  TimeFrames .", 
            "title": "Definition"
        }, 
        {
            "location": "/keywords/#dataseries", 
            "text": "", 
            "title": "DataSeries"
        }, 
        {
            "location": "/keywords/#description_12", 
            "text": "Data series (data rows) are an easy yet powerful method of saving additional values for individual bars. For example, when calculating the smoothing average, each bar is assigned the value calculated for this bar.\nA data series is an array that contains as many elements as there are bars displayed in a chart. AgenaTrader ensures that data series are correctly synchronized with the bars.\nData series are used in exactly the same way as the close or time series. They can therefore also be used for the input data for various indicators.\nIn the table below you will find 4 newly created data series (highlighted). Each data series has exactly one value of a special data type (int, bool, string) attached to it per bar. The indexing with barsAgo is thus identical to the data series provided by the system.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usable-data-series-in-agenatrader", 
            "text": "[ BoolSeries ]  [ DataSeries ]  [ DateTimeSeries ]  [ FloatSeries ]  [ IntSeries ]  [ LongSeries ]  [ StringSeries ]  In addition, there are also data series such as ColorSeries, although these are only used for internal purposes and should not be used directly.\nTo change the color of plots, please use [ PlotColors ].", 
            "title": "Usable Data Series in AgenaTrader"
        }, 
        {
            "location": "/keywords/#set-reset-und-containsvalue", 
            "text": "Each data series contains a  Set() ,  Reset()  and  ContainsValue()  method.\nWith Set(value) or Set(int barsAgo, value) you can place values into the data series for the current position, or in this case into the barsAgo position.\nWith Reset() or Reset(int barsAgo) you can delete a value from the data series for the current position or for the barsAgo position. This has the result that no valid value exists at this position any more.\nProgramming with the help of the reset method can simplify otherwise complex logic. This is especially true for Boolean series, where only \"true\" or \"false\" values can be included.\nThe ContainsValue() checks whether a data series has a value for a specific position.", 
            "title": "Set(), Reset() und ContainsValue()"
        }, 
        {
            "location": "/keywords/#information-about-data-types", 
            "text": "[ http://msdn.microsoft.com/de-de/library/s1ax56ch%28v=vs.80%29.aspx ]", 
            "title": "Information about Data Types"
        }, 
        {
            "location": "/keywords/#boolseries", 
            "text": "", 
            "title": "BoolSeries"
        }, 
        {
            "location": "/keywords/#description_13", 
            "text": "Bool series is a data series that contains a Boolean value for each bar. The number of elements in this series correlates with the exact number of bars within the chart.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-new-bool-series", 
            "text": "In the area for the declaration of variables, simply declare a new variable:  //Variable declaration\nprivate BoolSeries myBoolSeries;  With the Initialize() method, this variable assigns a new instance of the Bool series:  protected override void Initialize()\n{\nmyBoolSeries = new BoolSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create New Bool Series"
        }, 
        {
            "location": "/keywords/#assign-values", 
            "text": "Assigning a value to the data series for the current position:  myBoolSeries.Set(true);  Writing a value in the past into the data series:  myBoolSeries.Set(int barsAgo, bool Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values", 
            "text": "Removing the current value for the data series:  myBoolSeries.Reset();  Removing a value in the past from the data series:  myBoolSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity", 
            "text": "myBoolSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value", 
            "text": "Print ( For the bar of   + Time[0] +   ago the value of the data series is:   + myBoolSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_10", 
            "text": "protected override void OnBarUpdate()\n{\nif (Close[0]   Open[0])\nmyBoolSeries.Set(true);\nelse\nmyBoolSeries.Set(false);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#dataseries_1", 
            "text": "", 
            "title": "DataSeries"
        }, 
        {
            "location": "/keywords/#description_14", 
            "text": "Data series is a [ DataSeries ][ Data series ] that can contain a double value for each bar. The number of elements in this series corresponds to the exact number of bars within the charts.  Data series for double values are the data series most commonly used for indicators.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-a-new-data-series", 
            "text": "In the declaration area for variables:  //Variable declaration\nprivate DataSeries myDataSeries;  With the Initialize() method, this variable is assigned a new instance:  protected override void Initialize()\n{\nmyDataSeries = new DataSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create a New Data Series"
        }, 
        {
            "location": "/keywords/#assign-values_1", 
            "text": "Assigning a value to the data series for the current position:  myDataSeries.Set(Bars[0].Close);  Writing a value in the past into the data series:  myDataSeries.Set(int barsAgo, duble Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values_1", 
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value in the past from the data series:  myDataSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity_1", 
            "text": "myDataSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value_1", 
            "text": "Print ( For the bar from   + Time[0] +   ago the value for the data series is:   + myDataSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_11", 
            "text": "//Saves the span between the high and low of a bar\nmyDataSeries.Set(Math.Abs(High[0]-Low[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#datetimeseries", 
            "text": "", 
            "title": "DateTimeSeries"
        }, 
        {
            "location": "/keywords/#description_15", 
            "text": "Date time series is a [ DataSeries ][ Data series ] that can record a date time value for each bar. The number of elements in this series corresponds to the number of bars in the chart.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-a-new-data-series_1", 
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate DateTimeSeries myDataSeries;  Assign a new instance of DateTimeSeries for the variable with the Initialize() method:  protected override void Initialize()\n{\nmyDataSeries = new DateTimeSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create a New Data Series"
        }, 
        {
            "location": "/keywords/#assign-values_2", 
            "text": "Assigning a value to the current position of the data series:  myDataSeries.Set(DateTime Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, DateTime Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values_2", 
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Remove a past value from the data series:  myDataSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity_2", 
            "text": "myDataSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value_2", 
            "text": "Print ( For the bar from   + Time[0] +   ago the value of the data series is:   + myDataSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_12", 
            "text": "//Saves the difference of -6 hours (eastern time, New York) for a time zone conversion\nmyDataSeries.Set(Time[0].AddHours(-6);", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#floatseries", 
            "text": "", 
            "title": "FloatSeries"
        }, 
        {
            "location": "/keywords/#description_16", 
            "text": "Float series is a DataSeries that contains a float value for each bar in the chart. The number of elements in this series corresponds to the number of bars within the chart.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-a-new-data-series_2", 
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate FloatSeries myDataSeries;  Assign a new instance of the FloatSeries to the variable with the Initialize() method:  protected override void Initialize()\n{\nmyDatatSeries = new FloatSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create a New Data Series"
        }, 
        {
            "location": "/keywords/#assign-values_3", 
            "text": "Assigning a value to the current position of the data series  myDataSeries.Set(float Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, float Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values_3", 
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity_3", 
            "text": "myDataSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value_3", 
            "text": "Print ( For the bar from   + Time[0] +   ago the value for the data series is:   + myDataSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_13", 
            "text": "//Saves the span between the high and the low of a bar\nmyDataSeries.Set(Math.Abs((float) High[0] - (float) Low[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#intseries", 
            "text": "", 
            "title": "IntSeries"
        }, 
        {
            "location": "/keywords/#description_17", 
            "text": "Int series is a data series that can assign an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-a-new-data-series_3", 
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate IntSeries myDataSeries;  Assign an instance of the int series to the variable with the Initialize() method:  protected override void Initialize()\n{\nmyDataSeries = new IntSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create a New Data Series"
        }, 
        {
            "location": "/keywords/#assign-values_4", 
            "text": "Assigning a value to the current position of the data series  myDataSeries.Set(int Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, int Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values_4", 
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity_4", 
            "text": "myDataSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value_4", 
            "text": "Print (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_14", 
            "text": "//Saves the span in ticks between high and low for each bar\nmyDataSeries.Set((int) ((High[0] - Low[0]) / TickSize));", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#longseries", 
            "text": "", 
            "title": "LongSeries"
        }, 
        {
            "location": "/keywords/#description_18", 
            "text": "Long series is a data series that can include an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-a-new-data-series_4", 
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate LongSeries myDataSeries;  Assign a new instance of the long series to the variable with the Initialize() method:  protected override void Initialize()\n{\nmyDataSeries = new LongSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create a New Data Series"
        }, 
        {
            "location": "/keywords/#assign-values_5", 
            "text": "Assigning a value to the current position of the data series:  myDataSeries.Set(long Value);  Writing a value from the past into the data deries:  myDataSeries.Set(int barsAgo, long Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values_5", 
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity_5", 
            "text": "myDataSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value_5", 
            "text": "Print (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_15", 
            "text": "//Saves the span of ticks between high and low for each bar\nmyDataSeries.Set((long) ((High[0] - Low[0]) / TickSize));", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#stringseries", 
            "text": "", 
            "title": "StringSeries"
        }, 
        {
            "location": "/keywords/#description_19", 
            "text": "String series is a data series for string values that are saved for each bar. The number of elements in this series corresponds to the number of bars within the chart.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#create-a-new-data-series_5", 
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate StringSeries myDataSeries;  Assign an instance of string series to the variable with the Initialize() method:  protected override void Initialize()\n{\nmyDataSeries = new StringSeries(this);\nCalculateOnBarClose = true;\n}", 
            "title": "Create a New Data Series"
        }, 
        {
            "location": "/keywords/#assign-values_6", 
            "text": "Assigning a value to the current position of the data series:  myDataSeries.Set(string Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, string Value);", 
            "title": "Assign Values"
        }, 
        {
            "location": "/keywords/#delete-values_6", 
            "text": "Remove the current value from the data series:  myDataSeries.Reset();  Remove a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);", 
            "title": "Delete Values"
        }, 
        {
            "location": "/keywords/#check-values-for-their-validity_6", 
            "text": "myDataSeries.ContainsValue(int barsAgo);", 
            "title": "Check Values for their Validity"
        }, 
        {
            "location": "/keywords/#read-value_6", 
            "text": "Print (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);", 
            "title": "Read Value"
        }, 
        {
            "location": "/keywords/#example_16", 
            "text": "//Save the current calendar day for each bar (Monday\u2026 Tuesday etc.)\nmyDataSeries.Set(string.Format( {0:dddd} , Time[0]));", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#dayofweek", 
            "text": "", 
            "title": "DayOfWeek"
        }, 
        {
            "location": "/keywords/#description_20", 
            "text": "\"DayOfWeek\" outputs the date-time value (such as a timestamp) for each bar.  Of course, all other methods defined within the C# language for usage of date-time objects are also available, such as day, month, year, hour, minute, second, day of week etc.  See [ http://msdn.microsoft.com/de-de/library/03ybds8y.aspx ]", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#definition_1", 
            "text": "Property DayOfWeek  public enum DayOfWeek\n-   DayOfWeek.Monday\n-   DayOfWeek.Tuesday\n-   DayOfWeek.Wednesday\n-   DayOfWeek.Thursday\n-   DayOfWeek.Friday\n-   DayOfWeek.Saturday\n-   DayOfWeek.Sunday", 
            "title": "Definition"
        }, 
        {
            "location": "/keywords/#example_17", 
            "text": "//Outputs the weekday for each bar\nPrint(Time[0].DayOfWeek);\n//Do not execute trades on a Friday\nif (Time[0].DayOfWeek == DayOfWeek.Friday)\nreturn;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#displacement", 
            "text": "", 
            "title": "Displacement"
        }, 
        {
            "location": "/keywords/#description_21", 
            "text": "By implementing \"Displacement\", you can shift a drawn indicator line right or left along the x-axis.\nThis property can be queried within the script and will return an int value.  Blue line: Displacement = 0 (Original)\nRed line: Displacement = -5\nGreen line: Displacement = +5", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_10", 
            "text": "Displacement", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#parameter_6", 
            "text": "int Offset Number of bars by which the indicator is to be moved.", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_18", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//Displacement of the plot by one bar to the right\nDisplacement = 1;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#displayindatabox", 
            "text": "", 
            "title": "DisplayInDataBox"
        }, 
        {
            "location": "/keywords/#description_22", 
            "text": "The property \"DisplayInDataBox\" states whether the value of an indicator is contained in the data box of the chart or not.  The property can be queried in the script and returns a value of the type Boolean (true or false).  DisplayInDataBox = true (default)  The indicator values are displayed in the data box.  DisplayInDataBox = false  The indicator values are not displayed in the data box.  The following image displays the values of 3 smoothed averages in the data box.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_11", 
            "text": "DisplayInDataBox", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_19", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//Values will not be shown in the data box\nDisplayInDataBox = false;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#drawonpricepanel", 
            "text": "", 
            "title": "DrawOnPricePanel"
        }, 
        {
            "location": "/keywords/#description_23", 
            "text": "The property \"DrawOnPricePanel\" determines the panel in which the drawing objects are drawn.  DrawOnPricePanel = true (default)  Drawing objects are shown in the price chart  DrawOnPricePanel = false  Drawing objects are drawn in the panel (subchart) assigned to the indicator  If the indicator is already assigned to the price chart (overlay = true) then this property has no effect, meaning that no additional subchart is opened.\nThe property can be queried within the script and returns a Boolean value.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_12", 
            "text": "DrawOnPricePanel", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_20", 
            "text": "protected override void Initialize()\n{\n// Indicator is drawn in a new subchart\nOverlay = false;\nAdd(new Plot(Color.Red,  MyPlot1 ));\n// Drawing object is drawn in the price chart\nDrawOnPricePanel = true;\n}\nprotected override void OnBarUpdate()\n{\n// Draws a vertical line in the price chart for the bar from 5 minutes ago\nDrawVerticalLine( MyVerticalLine , 5, Color.Black);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#falling", 
            "text": "", 
            "title": "Falling()"
        }, 
        {
            "location": "/keywords/#description_24", 
            "text": "The Falling() method allows you to test whether an \"is falling\" condition exists, i.e. whether the current value is smaller than the value of the previous bar.  See [ CrossAbove() ], [ CrossBelow() ], [ Rising() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_13", 
            "text": "Falling(IDataSeries series)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_5", 
            "text": "true  If the data series is falling false  If the data series is not falling", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_7", 
            "text": "series a data series such as an indicator, close, high etc.", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_21", 
            "text": "// Check whether SMA(20) is falling\nif (Falling(SMA(20)))\nPrint( The SMA(20) is currently falling. );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#colors", 
            "text": "AgenaScript provides you with the following commands for defining colors and making color changes to the chart:  [ BarColor ] Color of a bar  [ BackColor ] Background color of the chart  [ BackColorAll ] Background color of the chart and all panels  ChartControl.UpColor Color of up ticks (up bars)\nChartControl.DownColor Color of down ticks (down bars)  For each bar, its colors are saved in the following data series. If these data series are written in, the color of the referenced bar will change.  [ BarColorSeries ]  [ CandleOutlineColorSeries ]  [ BackColorSeries ]  [ BackColorAllSeries ]", 
            "title": "Colors"
        }, 
        {
            "location": "/keywords/#barcolor", 
            "text": "", 
            "title": "BarColor"
        }, 
        {
            "location": "/keywords/#description_25", 
            "text": "Bar color changes the color of a bar.  See [ Colors ], [ BarColorSeries ], [ BackColor ], [ BackColorAll ], [ CandleOutlineColor ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_8", 
            "text": "a color object of the type \"public struct color\"", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_14", 
            "text": "BarColor", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_22", 
            "text": "// If the closing price is above the SMA(14), color the bar orange\nif (Close[0]   SMA(14)[0]) BarColor = Color.Orange;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#backcolor", 
            "text": "", 
            "title": "BackColor"
        }, 
        {
            "location": "/keywords/#description_26", 
            "text": "Back color changes the background color of a bar or gives the current background color of a bar when queried.  See [ Colors ], [ BarColor ], [ BackColorAll ], [ CandleOutlineColor ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_9", 
            "text": "a color object of the type \"public struct color\"", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_15", 
            "text": "BackColor", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_23", 
            "text": "// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColor = Color.Blue;   // Changing the bar background color depending on a smoothing average\n// Market price above the SMA(14) to green\n// Market price below the SMA(14) to maroon\nBackColor = SMA(14)[0]  = Close[0] ? Color.Maroon : Color.LimeGreen;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#backcolorall", 
            "text": "", 
            "title": "BackColorAll"
        }, 
        {
            "location": "/keywords/#description_27", 
            "text": "Back color all changes the background color of a bar within the chart window and in all subcharts.  See [ Colors ], [ BarColor ], [ BackColor ], [ CandleOutlineColor ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_10", 
            "text": "A color object of the type \"public struct color\"", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_16", 
            "text": "BackColorAll", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_24", 
            "text": "// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColorAll = Color.Blue;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#barcolorseries", 
            "text": "", 
            "title": "BarColorSeries"
        }, 
        {
            "location": "/keywords/#description_28", 
            "text": "Bar color series is a data series containing the color for each bar.  See [ Colors ], [ BackColorSeries ], [ BackColorAllSeries ], [ CandleOutlineColorSeries ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_11", 
            "text": "a color object of the type \"public struct color\"  int barsAgo", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_17", 
            "text": "BarColorSeries  BarColorSeries[ int  barsAgo]  When using the method with an index [ int  barsAgo] the color for the referenced bar will be changed or returned.  Caution: Only the color of a bar whose color has been explicitly changed beforehand will be returned. In all other cases, the \"Color.Empty\" value will be returned.", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_25", 
            "text": "protected override void OnBarUpdate()\n{\nif (CurrentBar == Bars.Count-1-(CalculateOnBarClose?1:0))\n{\n// Color the current bar blue\n// This is identical to BarColor = color.Blue\nBarColorSeries[0] = Color.Blue;\n// Color the previous bars green\nBarColorSeries[1] = Color.Orange;\n// Color the third bar yellow\nBarColorSeries[2] = Color.Yellow;\n}\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#backcolorseries", 
            "text": "", 
            "title": "BackColorSeries"
        }, 
        {
            "location": "/keywords/#description_29", 
            "text": "Back color series is a data series containing the background color for each bar. If the background color for the subcharts is to be included, please use \"BackColorAllSeries\" instead.  See [ Colors ], [ BarColorSeries ][ BarColor ], [ BackColorAllSeries ][] [ CandleOutlineColorSeries ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_12", 
            "text": "a color object of the type \"public struct color\"  int barsAgo", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_18", 
            "text": "BackColorSeries\nBackColorSeries[int barsAgo]  When using this method with an index [ int  barsAgo] the background color for the referenced bar will be outputted.", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_26", 
            "text": "// Which background color does the current bar have?\nPrint (BackColorSeries[0]);\n// Set the current bar\u2019s background color to blue\n// This is identical to BackColor = Color.Blue\nBackColorSeries[3] = Color.Blue;\n// Set background color for the previous bar to green\nBackColorSeries[1] = Color.Green;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#backcolorallseries", 
            "text": "", 
            "title": "BackColorAllSeries"
        }, 
        {
            "location": "/keywords/#description_30", 
            "text": "Back color all series is a data series containing the background color for each bar. The difference to BackColorSeries is that the background color of the subchart is included.  See [ Colors ], [ BarColorSeries ], [ BackColorSeries ], [ CandleOutlineColorSeries ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_13", 
            "text": "a color object of the type \"public struct color\"  int barsAgo", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_19", 
            "text": "BackColorAllSeries\nBackColorAllSeries[int barsAgo]  When using the method with an index [ int  barsAgo] the background color for the referenced bar will be changed or returned.", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_27", 
            "text": "See [ BackColorSeries ].", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#candleoutlinecolor", 
            "text": "", 
            "title": "CandleOutlineColor"
        }, 
        {
            "location": "/keywords/#description_31", 
            "text": "Candle outline color changes the border/outline color (including the wick) of a bar.  If the color of the bar is changed using BarColor and the outline is not changed using CandleOutlineColor, the outline color is adjusted to match the color of the bar.  See [ Colors ], [ BarColor ], [ BackColor ], [ BackColorAll ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_14", 
            "text": "a color object of the type \"public struct color\"", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_20", 
            "text": "CandleOutlineColor", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_28", 
            "text": "if (SMA(14)[0]   SMA(200)[0])\nCandleOutlineColor = Color.LimeGreen;\nelse\nCandleOutlineColor = Color.Red;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#candleoutlinecolorseries", 
            "text": "", 
            "title": "CandleOutlineColorSeries"
        }, 
        {
            "location": "/keywords/#description_32", 
            "text": "Candle outline color series is a data series that saves the outline color for each bar.  See [ Colors ], [ BarColorSeries ], [ BackColorSeries ], [ BackColorAllSeries ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_15", 
            "text": "a color object of the type \"public struct color\"  int barsAgo", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_21", 
            "text": "CandleOutlineColorSeries\nCandleOutlineColorSeries[int barsAgo]  When using this method with an index [ int  barsAgo] the border color for the referenced bar will be outputted.  Caution: Color.Empty will be outputted for a bar unless it has been previously changed.", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_29", 
            "text": "// Set the outline color of the current bar to blue\nCandleOutlineColorSeries[0] = Color.Blue;\n// Change the outline color to the chart default value\nCandleOutlineColorSeries[0] = Color.Empty;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#firsttickofbar", 
            "text": "", 
            "title": "FirstTickOfBar"
        }, 
        {
            "location": "/keywords/#description_33", 
            "text": "FirstTickOfBar is a property of the type \"bool\" that returns \"true\" if the currently incoming tick is associated with a new bar. This means that this tick is the first tick of a new bar.\nThis property can only be meaningfully applied when the indicator or strategy is running in the tick-by-tick mode, meaning that CalculateOnBarClose = false and the data feed is able to output real-time values.\nWhen using end-of-day data in a daily chart, the \"FirstTickOfBar\" is always true for the last bar.\nFirstTickOfBar should not be used outside of the OnBarUpdate() method.\nSee [ Bars.TickCount ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_22", 
            "text": "FirstTickOfBar", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_30", 
            "text": "// Within a tick-by-tick strategy, execute one part bar-by-bar only\nif (FirstTickOfBar)\n{\nif (CCI(20)[1]   -250)\nEnterLong();\nreturn;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#firsttickofbarmtf", 
            "text": "", 
            "title": "FirstTickOfBarMtf"
        }, 
        {
            "location": "/keywords/#description_34", 
            "text": "FirstTickOfBarMtf is the  m ulti- t ime  f rame variant of the [ FirstTickOfBar ] property.  The setting of CalculateOnBarClose only affects the primary timeframe (chart timeframe). When working with multi-bars, the ticks of the secondary timeframes are provided on a tick-by-tick basis independently of the CalculateOnBarClose setting.\nWith the help of FirstTickOfBarMtf, it is possible to determine when a new bar has begun in a secondary timeframe.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_23", 
            "text": "FirstTickOfBarMtf(BarsInProgress)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#parameter_16", 
            "text": "FirstTickOfBarMtf(BarsInProgress).  See [ BarsInProgress ].", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_31", 
            "text": "if (FirstTickOfBarMtf(BarsInProgress))\nPrint( A new bar has begun. );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#getcurrentask", 
            "text": "", 
            "title": "GetCurrentAsk()"
        }, 
        {
            "location": "/keywords/#description_35", 
            "text": "The GetCurrentAsk() method returns the current value of the ask side of the order book. If no level 1 data is available to AgenaTrader, then this function simply outputs the last trade value.  See [ GetCurrentBid() ] and [ OnMarketData() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_24", 
            "text": "GetCurrentAsk()", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_6", 
            "text": "double value", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_17", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_32", 
            "text": "If an entry condition is fulfilled, then 1 contract should be sold at the current ask price:\nprivate IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n// Entry condition\nif (Close[0]   SMA(20)[0]   entryOrder == null)\n// Sell 1 contract at the current ask price\nentryOrder = SubmitOrder(0, OrderAction.SellShort, OrderType.Limit, 1, GetCurrentAsk(), 0,  ,  Enter short );\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#getcurrentbid", 
            "text": "", 
            "title": "GetCurrentBid()"
        }, 
        {
            "location": "/keywords/#description_36", 
            "text": "The GetCurrentBid() method returns the current value of the bid side of the order book. If no level 1 data is available to AgenaTrader, then the function outputs the last traded price.  See [ GetCurrentAsk() ] and [ OnMarketData() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_25", 
            "text": "GetCurrentBid()", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_7", 
            "text": "double value", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_18", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_33", 
            "text": "If an entry condition is fulfilled, then 1 contract should be sold at the current bid price:  private IOrder entryOrder = null;\nprotected override void OnBarUpdate()\n{\n// Entry condition\nif (Close[0]   SMA(20)[0]   entryOrder == null)\n// Sell 1 contract at the current bid price\nentryOrder = SubmitOrder(0, OrderAction.Buy, OrderType.Limit, 1, GetCurrentBid(), 0,  ,  Enter long );\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#highestbar", 
            "text": "", 
            "title": "HighestBar"
        }, 
        {
            "location": "/keywords/#description_37", 
            "text": "The HighestBar() method searches within a predetermined number of periods for the highest bar and outputs how many bars ago it can be found.  See [ LowestBar() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_19", 
            "text": "period Number of bars within which the bar is searched for  series Every data series, such as close, high, low, etc.", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_8", 
            "text": "int barsAgo How many bars ago the high occurred", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#usage_26", 
            "text": "HighestBar(IDataSeries series, int period)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_34", 
            "text": "// How many bars ago was the highest high for the current session?\nPrint(HighestBar(High, Bars.BarsSinceSession - 1));\n// What value did the market price have at the highest high of the session?\nPrint( The highest price for the session was:   + Open[HighestBar(High, Bars.BarsSinceSession - 1)]);", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#historical", 
            "text": "", 
            "title": "Historical"
        }, 
        {
            "location": "/keywords/#description_38", 
            "text": "Historical allows you to check whether AgenaScript is working with historical or real-time data.\nAs long as OnBarUpdate() is called up for historical data, then historical = true. As soon as live data is being used, then historical = false.\nDuring a backtest, historical is always true.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_27", 
            "text": "Historical", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_9", 
            "text": "true  when using historical data false  when using real-time data", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#example_35", 
            "text": "protected override void OnBarUpdate()\n{\n// only execute for real-time data\nif (Historical) return;\n// Trading technique\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#initialize", 
            "text": "", 
            "title": "Initialize()"
        }, 
        {
            "location": "/keywords/#description_39", 
            "text": "The Initialize() method is called up once at the beginning of an indicator or strategy calculation. This method can be used to set indicator properties, initialize your own variables, or add plots.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_20", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_10", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#usage_28", 
            "text": "protected override void Initialize()", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#important-keywords", 
            "text": "[ Add() ]  [ AllowRemovalOfDrawObjects ]  [ AutoScale ]  [ BarsRequired ]  [ CalculateOnBarClose ]  [ ClearOutputWindow() ]  [ Displacement ]  [ DisplayInDataBox ]  [ DrawOnPricePanel ]  [ InputPriceType ]  [ Overlay ]  [ PaintPriceMarkers ]  [ SessionBreakLines ]  [ VerticalGridLines ]   Additional Keywords for Strategies   [ DefaultQuantity ]  [ EntriesPerDirection ]  [ EntryHandling ]  [ SetStopLoss() ]  [ SetProfitTarget() ]  [ SetTrailStop() ]  [ TimeInForce ]  [ TraceOrders ]", 
            "title": "Important Keywords"
        }, 
        {
            "location": "/keywords/#more-information_2", 
            "text": "Caution: \nThe Initialize() method is not only called up at the beginning of an indicator or strategy calculation, but also if the chart is reloaded unexpectedly or if the properties dialog of indicators is opened and so on.\nDevelopers of custom AgenaScripts should NOT use this method for running their own routines, opening forms, performing license checks, etc. The OnStartUp() method should be used for these kind of tasks.", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_36", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Blue,  myPlot ));\nClearOutputWindow();\nAutoScale = false;\nOverlay = true;\nPaintPriceMarkers = false;\nDisplayInDataBox = false;\nCalculateOnBarClose = true;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#initrequirements", 
            "text": "", 
            "title": "InitRequirements()"
        }, 
        {
            "location": "/keywords/#description_40", 
            "text": "The InitRequirements() method is called up once at the beginning of an indicator and/or strategy calculation. This method is only necessary when using multi-bars.\nWithin InitRequirements, no other programming commands are executed. For initializing, the Initialize() or OnStartUp() method should be used.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_21", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_11", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#example_37", 
            "text": "protected override void InitRequirements()\n{\nAdd(DatafeedHistoryPeriodicity.Day, 1);\nAdd(DatafeedHistoryPeriodicity.Week, 1);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#inputpricetype", 
            "text": "", 
            "title": "InputPriceType"
        }, 
        {
            "location": "/keywords/#description_41", 
            "text": "The input price type property determines which price series is used by default when calculating an indicator, if no other data series is explicitly stated.\nInputPriceType can be set with the Initialize() method; this specification is then valid for all further calculations.\nIf InputPriceType is in OnBarUpdate(), these changes are only valid starting with the next instruction.\nEvery further appearance of InputPriceType will be ignored!  See [ PriceType ]", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_29", 
            "text": "InputPriceType", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example1", 
            "text": "protected override void Initialize()\n{\nClearOutputWindow();\nInputPriceType = PriceType.Low;\n}\nprotected override void OnBarUpdate()\n{\n// The input data series for the indicator (input) is low\nPrint(Low[0] +     + Input[0] +     + InputPriceType);\n}", 
            "title": "Example1"
        }, 
        {
            "location": "/keywords/#example2", 
            "text": "protected override void OnBarUpdate()\n{\n// These values are identical\n// since close is used as the input data series by default\nPrint(SMA(20)[0] +     + SMA(Close, 20)[0]);\nInputPriceType = PriceType.Low;\n// From here on out, low is used instead of close\n// Both values are identical\nPrint(SMA(20)[0] +     + SMA(Low, 20)[0]);\nInputPriceType = PriceType.High;\n// The instructions will be ignored\n// Input = low is still in effect\n}", 
            "title": "Example2"
        }, 
        {
            "location": "/keywords/#instrument", 
            "text": "", 
            "title": "Instrument"
        }, 
        {
            "location": "/keywords/#description_42", 
            "text": "With \"instrument\", information concerning the trading instrument (stock, future etc.) is made available.  Detailed information can be found here:  Instruments .", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#line", 
            "text": "", 
            "title": "Line()"
        }, 
        {
            "location": "/keywords/#description_43", 
            "text": "A line object is used for drawing a horizontal line in the chart. Usually, these are upper and lower trigger lines for indicators such as the RSI (70 and 30).\nThe lines described here are not to be confused with lines from the drawing objects (see \"DrawHorizontalLine\").\nLine objects can be added to an indicator with the help of the Add() method, and with this, added to the lines collection.  See [ Plot ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_22", 
            "text": "Color  Line color    Name  Description    Pen  A pen object    Value  Defines which value on the y-axis the line will be drawn for", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_30", 
            "text": "Line(Color color, double value, string name)\nLine(Pen pen, double value, string name)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#more-information_3", 
            "text": "Information on the pen class: [ http://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_38", 
            "text": "// Example 1\n// A new line with standard values drawn at the value of 70\nAdd(new Line(Color.Black, 70,  Upper ));\n// Example 2\n// A new line with self-defined values\nprivate Line line;\nprivate Pen pen;\nprotected override void Initialize()\n{\n// Define a red pen with the line strength 1\npen = new Pen(Color.Red, 1);\n// Define a horizontal line at 10\nline = new Line(pen, 10,  MyLine );\n// add the defined line to the indicator\nAdd(line);\n}\n// Example 3\n// Short form for the line in example 2\nAdd(new Line(new Pen(Color.Red, 1), 10,  MyLine ));", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#log", 
            "text": "", 
            "title": "Log()"
        }, 
        {
            "location": "/keywords/#description_44", 
            "text": "Log() allows you to write outputs in the AgenaTrader log file (log tab). 5 different log levels are supported.  Note:  If the log tab is not viewable, it can be displayed using the tools log.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_31", 
            "text": "Log (string message, LogLevel logLevel)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#parameter_23", 
            "text": "message  Text (message)    logLevel  Possible values are    InfoLogLevel.Info     InfoLogLevel.Message     InfoLogLevel.Warning     InfoLogLevel.Alert     InfoLogLevel.Error", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_39", 
            "text": "//Tab protocol\nLog( This is information. , InfoLogLevel.Info); //white\nLog( This is a message. , InfoLogLevel.Message); // blue\nLog( This is a warning. , InfoLogLevel.Warning); // yellow\nLog( This is an alarm. , InfoLogLevel. AlertLog); //green\nLog( This is a mistake. , InfoLogLevel.Error); // red\n//Tab messags\nLog( This is a message (messages). , InfoLogLevel.Message); //gray\n//PopUp   protocoll\nLog( This is an alert popup window. , InfoLogLevel.Alert); //green", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#lowestbar", 
            "text": "", 
            "title": "LowestBar"
        }, 
        {
            "location": "/keywords/#description_45", 
            "text": "The LowestBar() method attempts to find the lowest bar within a predefined number of periods.  See [ HighestBar() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_24", 
            "text": "period Number of bars that will be searched for the lowest bar  series Every data series, such as close, high, low etc.", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_12", 
            "text": "int  barsAgo How many bars ago the low occurred", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#usage_32", 
            "text": "LowestBar(IDataSeries series, int period)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_40", 
            "text": "// How many bars ago was the lowest low of the session?\nPrint(LowestBar(Low, Bars.BarsSinceSession - 1));\n// Which price did the lowest open of the current session have?\nPrint( The lowest open price of the current session was:   + Open[LowestBar(Low, Bars.BarsSinceSession - 1)]);", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#marketdataeventargs", 
            "text": "", 
            "title": "MarketDataEventArgs"
        }, 
        {
            "location": "/keywords/#description_46", 
            "text": "The data type MarketDataEventArgs represents a change in the level 1 data and is used as a parameter of the OnMarketData() function.           AskSize  Current order volume on the ask side    AskPrice  Current ask price    BidSize  Current order volume on the bid side    BidPrice  Current bid price.    Instrument  An object of the type instrument that contains the trading instrument for which the level 1 data is outputted. See  Instruments    LastPrice  Last traded price    MarketDataType  Potential values are:    MarketDataType.Ask     MarketDataType.AskSize     MarketDataType.Bid     MarketDataType.BidSize     MarketDataType.Last     MarketDataType.Volume     Price  This is equal to last price. This field only exists for compatability reasons    Time  A date-time value containing the timestamp of the change    Volume  A long value that shows the volume", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#example_41", 
            "text": "See [ OnMarketData() ].", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#marketdeptheventargs", 
            "text": "", 
            "title": "MarketDepthEventArgs"
        }, 
        {
            "location": "/keywords/#description_47", 
            "text": "The data type MarketDepthEventArgs represents a change in the level 2 data (market depth) and is used as a parameter within OnMarketDepth().           MarketDataType  Potential values are:    MarketDataType.Ask     MarketDataType.Bid     MarketMaker  A string value containing the market maker ID    Position  An int value that defines the position within the market depth    Operation  Represents the action caused by a change in the order book.    Values can be:     Operation.Insert     Operation.Remove     Operation.Update     Price  A double value that displays the bid/ask price    Time  A date-time value containing the timestamp of the change    Volume  A long value that shows the volume", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#example_42", 
            "text": "See [ OnMarketDepth() ].", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#overlay", 
            "text": "", 
            "title": "Overlay"
        }, 
        {
            "location": "/keywords/#description_48", 
            "text": "The overlay property defines whether the indicator outputs are displayed in the price chart above the bars or whether a separate chart window is opened below the charting area.  Overlay = true  The indicator is drawn above the price (for example an [ SMA ])  Overlay = false (default)  A separate chart window is opened (RSI)  This property can be queried within the script and outputs a value of the type Boolean (true or false).", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_33", 
            "text": "Overlay", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_43", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//The indicator should be displayed within a separate window\nOverlay = false;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#paintpricemarkers", 
            "text": "", 
            "title": "PaintPriceMarkers"
        }, 
        {
            "location": "/keywords/#description_49", 
            "text": "The paint price markers property defines whether the so-called price markers for the indicator outputs are displayed on the right-hand chart border (in the price axis) or not. In some cases it makes sense to switch these off for a better overview in the chart. PaintPriceMarkers = true (default)  Price markers are shown in the price axis  PaintPriceMarkers = false  Price markers are not shown in the price axis  This property can be queried within the script and returns a value of the type Boolean (true or false).", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_34", 
            "text": "PaintPriceMarkers", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_44", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//Do not show price markers in the price axis\nPaintPriceMarkers = false;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#playsound", 
            "text": "", 
            "title": "PlaySound()"
        }, 
        {
            "location": "/keywords/#description_50", 
            "text": "This method allows you to play a wav file.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_35", 
            "text": "PlaySound (wavFile)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_13", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_25", 
            "text": "wavFile File name of the wav file to be played", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_45", 
            "text": "using System.IO;\nstring path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\nstring file =  \\\\\\\\AgenaTrader\\\\\\\\Sounds\\\\\\\\Alert1.wav ;\nPlaySound(path + file);", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#plot", 
            "text": "", 
            "title": "Plot()"
        }, 
        {
            "location": "/keywords/#description_51", 
            "text": "A plot (drawing) is used to visually display indicators in a chart. Plot objects are assigned to an indicator with the help of the Add() method and attached to the plots collection.\nSee [ Line ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_26", 
            "text": "Color  Drawing color    Pen  Pen object    PlotStyle  Line type    PlotStyle.Bar     PlotStyle.Block     PlotStyle.Cross     PlotStyle.Dot     PlotStyle.Hash     PlotStyle.Line     PlotStyle.Square     PlotStyle.TriangleDown     PlotStyle.TriangleUp     Name  Description", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#usage_36", 
            "text": "Plot(Color color, string name)\nPlot(Pen pen, string name)\nPlot(Color color, PlotStyle plotStyle, string name)\nPlot(Pen pen, PlotStyle plotStyle, string name)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#more-information_4", 
            "text": "Information on the pen class: [ http://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_46", 
            "text": "// Example 1\n// Plot with standard values (line with line strength 1)\nAdd(new Plot(Color.Green,  MyPlot ));\n// Example 2\n// user-defined values for pen and plot style\nprivate Plot plot;\nprivate Pen pen;\nprotected override void Initialize()\n{\n// a red pen with the line strength of 6 is defined\npen = new Pen(Color.Blue, 6);\n// a point line with a thick red pen from above is defined\nplot = new Plot(pen, PlotStyle.Dot,  MyPlot );\n// The defined plot is to be used as a representation for an indicator\nAdd(plot);\n}\n// Example 3\n// Abbreviation of example 2\nprotected override void Initialize()\n{\nAdd(new Plot(new Pen(Color.Blue, 6), PlotStyle.Dot,  MyPlot ));\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#plotmethod", 
            "text": "", 
            "title": "PlotMethod"
        }, 
        {
            "location": "/keywords/#description_52", 
            "text": "In each indicator, the plot method can be overridden in order to add your own graphics (GDI+) to the price chart with the help of the graphics class (System.Drawing).  See [ http://msdn.microsoft.com/de-de/library/system.drawing.graphics.aspx ].  The [ ChartControl ] object offers several parameters.  More examples: [ Bar Numbering ][ PlotSample ],  Chart Background Image .", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#parameter_27", 
            "text": "graphics The graphics object of the price chart (context)  rectangle The size of the drawing area (type \"public struct rectangle\")  double min The smallest price in the y-axis  double max The biggest price in the y-axis", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_14", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#usage_37", 
            "text": "public override void Plot(Graphics graphics, Rectangle r, double min, double max)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_47", 
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description( Example for the usage of the plot method. )]\npublic class PlotSample : UserIndicator\n{\nprivate StringFormat stringFormat = new StringFormat();\nprivate SolidBrush brush = new SolidBrush(Color.Black);\nprivate Font font = new Font( Arial , 10);\nprotected override void Initialize()\n{\nChartOnly = true;\nOverlay = true;\n}\nprotected override void OnBarUpdate()\n{}\nprotected override void OnTermination()\n{\nbrush.Dispose();\nstringFormat.Dispose();\n}\npublic override void Plot(Graphics graphics, Rectangle r, double min, double max)\n{\n// Fill a rectangle\nSolidBrush tmpBrush = new SolidBrush(Color.LightGray);\ngraphics.FillRectangle(tmpBrush, new Rectangle (0, 0, 300, 300));\ntmpBrush.Dispose();\n// Draw a red line from top left to bottom right\nPen pen = new Pen(Color.Red);\ngraphics.DrawLine(pen, r.X, r.Y, r.X + r.Width, r.Y + r.Height);\n// Draw a red line from bottom left to top right\n// Use anti-alias (the line appears smoother)\n// The current settings for the smoothing are saved\n// Restore after drawing\nSmoothingMode oldSmoothingMode = graphics.SmoothingMode; //Save settings\ngraphics.SmoothingMode = SmoothingMode.AntiAlias; // Use higher smoothing settings\ngraphics.DrawLine(pen, r.X, r.Y + r.Height, r.X + r.Width, r.Y);\ngraphics.SmoothingMode = oldSmoothingMode; // Settings restored\npen.Dispose();\n// Text in the upper left corner (position 10,35)\nstringFormat.Alignment = StringAlignment.Near; // Align text to the left\nbrush.Color = Color.Blue;\ngraphics.DrawString( Hello world! , font, brush, r.X + 10, r.Y + 35, stringFormat);\n// Text in the left lower corner and draw a line around it\nbrush.Color = Color.Aquamarine;\ngraphics.FillRectangle(brush, r.X + 10, r.Y + r.Height - 20, 140, 19);\n// Draw outside line\npen = new Pen(Color.Black);\ngraphics.DrawRectangle(pen, r.X + 10, r.Y + r.Height - 20, 140, 19);\npen.Dispose();\n// Write text\nbrush.Color = Color.Red;\ngraphics.DrawString( Here is bottom left! , font, brush, r.X + 10, r.Y + r.Height - 20, stringFormat);\n}\n}\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#pricetype", 
            "text": "", 
            "title": "PriceType"
        }, 
        {
            "location": "/keywords/#description_53", 
            "text": "Price type describes a form of price data.  See [ InputPriceType ]  Following variables are available:\n-   PriceType.Close\n-   PriceType.High\n-   PriceType.Low\n-   PriceType.Median\n-   PriceType.Open\n-   PriceType.Typical\n-   PriceType.Volume\n-   PriceType.Weighted", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_38", 
            "text": "PriceType", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_48", 
            "text": "See [ InputPriceType ]", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#print", 
            "text": "", 
            "title": "Print()"
        }, 
        {
            "location": "/keywords/#description_54", 
            "text": "The Print() method writes outputs in the AgenaTrader output window.\nSee [ ClearOutputWindow() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_39", 
            "text": "Print(string message)\nPrint(bool value)\nPrint(double value)\nPrint(int value)\nPrint(DateTime value)\nPrint(string format, string message)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#parameter_28", 
            "text": "string Text an individual message text", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#return-value_15", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#more-information_5", 
            "text": "Information regarding output formatting:  Formatting numbers .  Hints about the String.Format() method: [ http://msdn.microsoft.com/de-de/library/fht0f5be%28v=vs.80%29.aspx ]", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_49", 
            "text": "//  Quick Dirty  formatting of a number with 2 decimal points\nPrint(Close[0].ToString( 0.00 ));\n// Output day of the week from the timestamp for the bar\nPrint(string.Format( {0:dddd} , Time[0]));\n// An additional empty row with an escape sequence\nPrint( One empty row afterwards \\\\n );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#removedrawobject", 
            "text": "", 
            "title": "RemoveDrawObject()"
        }, 
        {
            "location": "/keywords/#description_55", 
            "text": "The RemoveDrawObject() method removes a specific drawing object from the chart based on a unique identifier (tag).\nSee [ RemoveDrawObjects() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_40", 
            "text": "RemoveDrawObject(string tag)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_16", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_29", 
            "text": "string tag The clearly identifiable name for the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_50", 
            "text": "RemoveDrawObjects( My line );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#removedrawobjects", 
            "text": "", 
            "title": "RemoveDrawObjects()"
        }, 
        {
            "location": "/keywords/#description_56", 
            "text": "This method removes all drawings from the chart\nSee [ RemoveDrawObject() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_41", 
            "text": "RemoveDrawObjects()", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_17", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#example_51", 
            "text": "//Delete all drawings from the chart\nRemoveDrawObjects();", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#rising", 
            "text": "", 
            "title": "Rising()"
        }, 
        {
            "location": "/keywords/#description_57", 
            "text": "With this method you can check if an uptrend exists, i.e. if the current value is bigger than the previous bar\u2019s value.  See [ CrossAbove() ], [ CrossBelow() ], [ Falling() ].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_42", 
            "text": "Rising(IDataSeries series)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_18", 
            "text": "true  If the data series is rising false  If the data series is not rising", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_30", 
            "text": "series A data series such as an indicator, close, high etc.", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_52", 
            "text": "// Check if SMA(20) is rising\nif (Rising(SMA(20)))\nPrint( The SMA(20) is currently rising. );", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#sessionbreaklines", 
            "text": "", 
            "title": "SessionBreakLines"
        }, 
        {
            "location": "/keywords/#description_58", 
            "text": "The property SessionBreakLines defines whether the vertical lines that represent a trading session stop are displayed within the chart.\nThis may be useful for stocks and other instruments if you wish to display session breaks/trading stops. SessionBreakLines = true (default)  Session break lines are shown  SessionBreakLines = false  Session break lines are not shown  This property can be queried within the script and outputs a value of the type Boolean (true or false).", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_43", 
            "text": "SessionBreakLines", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_53", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n//Session break lines should not be shown\nSessionBreakLines = false;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#ticksize", 
            "text": "A tick is the smallest possible price change of a financial instrument within an exchange. If, for example, the trading prices are specified to 2 decimal places, then a tick equals 0.01. You can expect Forex instruments to be specified to within 4 or 5 decimal places. A tick is called a pip in Forex trading and usually equals 0.0001 or 0.00001.\nThe tick value is usually predefined by the exchange and does not (usually) change.\nSee [ Instrument.TickSize ].  Usually, a tick is displayed as a decimal number. Historically speaking (especially in American exchanges) stocks have been noted with tick sizes of 1/16 of a dollar.\nThis notation is still widespread within commodities. Corn futures (ZC) are noted in \u00bc US cents/bushel (usually equals 12.50 US$ per contract).\nUS treasury bonds are noted in a tick size of 1/32 points, which equals 31.25$.\nNotations are usually made with apostrophes, for example:  149'00 equals exactly 149,\n149'01 equals 149 1/32 (meaning 149.03125),\n149'31 equals 149 31/32 (149.96875),\nand the next value after this is 150\u201900  In the so-called T-Bond intermonth spreads, notations are specified in quarters of 1/32, resulting in point values of 7.8125 per contract.  Notations have a dash:  17-24 equals 17 24/32 points,\n17-242 equals 17 24.25/32 points,\n17-245 equals 17 24.5/32 points and\n17-247 equals 17 24.75/32 points.\nThe next notation after 17-247 is 17-25 and then 17-252, 17-255 etc.\nAfter 17-317 comes 18.  The individual contract specifications can be found on the websites of the respective exchanges.  CME: [ www.cmegroup.com ] under Products   Trading\nEurex (FDAX):  http://www.eurexchange.com/exchange-en/products/idx/dax/17206/  See [ Instrument.TickSize ].", 
            "title": "TickSize"
        }, 
        {
            "location": "/keywords/#timeframe", 
            "text": "See [ Bars.TimeFrame ].  When using multiple timeframes ([ Multibars ][ MultiBars ]) in an indicator, please see [ TimeFrames ].", 
            "title": "TimeFrame"
        }, 
        {
            "location": "/keywords/#today", 
            "text": "", 
            "title": "ToDay()"
        }, 
        {
            "location": "/keywords/#description_59", 
            "text": "To day is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.\nExperienced programmers can continue using the date-time function directly.  To day outputs an int representation in the format of yyyymmdd.\n(yyyy = year, mm = month, dd = day)  13.08.2012 would thus be 20120813.  See [ ToTime ].  Help with date-time: [ http://msdn.microsoft.com/de-de/library/system.datetime.aspx ]", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_44", 
            "text": "ToDay(DateTime time)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_54", 
            "text": "// Do not trade on the 11 sup th /sup  of September\nif (ToDay(Time[0]) = 20130911)\nreturn;", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#totime", 
            "text": "", 
            "title": "ToTime()"
        }, 
        {
            "location": "/keywords/#description_60", 
            "text": "To time is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.  To time outputs an int representation in the format hhmmss.\n(hh = hour, mm = minute, ss = seconds)  The time 07:30 will be displayed as 73000 and 14:15:12 will become 141512.  See [ ToDay ].  Help with date-time: [ http://msdn.microsoft.com/de-de/library/system.datetime.aspx ]", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_45", 
            "text": "ToTime(DateTime time)", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_55", 
            "text": "// Only enter trades between 08:15 and 16:35\nif (ToTime(Time[0])  = 81500   ToTime(Time[0])  = 163500)\n{\n// Any trading technique\n}", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#update", 
            "text": "", 
            "title": "Update()"
        }, 
        {
            "location": "/keywords/#description_61", 
            "text": "The Update() method calls up the OnBarUpdate method in order to recalculate the indicator values.  Update() is to be used with caution and is intended for use by experienced programmers.", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_46", 
            "text": "Update()", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#return-value_19", 
            "text": "none", 
            "title": "Return Value"
        }, 
        {
            "location": "/keywords/#parameter_31", 
            "text": "none", 
            "title": "Parameter"
        }, 
        {
            "location": "/keywords/#example_56", 
            "text": "The effect of update can be illustrated with the help of 2 indicators.\nThe first indicator, Ind1, uses a public variable from the indicator Ind2.  Code from Ind1:  public class Ind1 : UserIndicator\n{\nprotected override void OnBarUpdate()\n{\nPrint( Ind2().MyPublicVariable );\n}\n}  Code from Ind2:  private double myPublicVariable = 0;\nprotected override void OnBarUpdate()\n{\nmyPublicVariable = 1;\n}\npublic double MyPublicVariable\n{\nget\n{\nUpdate();\nreturn myPublicVariable;\n}\n}  Without Update() - Wrong \nIf Ind2 is called up by Ind1, the get-method of MyPublicVariable is called up in Ind2. Without Update(), the value of MyPublicVariable would be returned. In this case it would be 0.  With Update() - Correct \nBy calling up Update(), OnBarUpdate() is initially executed by Ind2. This sets MyPublicVariable to 1. Lastly, the value 1 is passed on to the requesting indicator.", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#value", 
            "text": "", 
            "title": "Value"
        }, 
        {
            "location": "/keywords/#description_62", 
            "text": "Value is a data series object containing the first data series of an indicator.  When the Add() method is called up, a value object is automatically created and added to the values collection.  Value is identical to Values[0].", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_47", 
            "text": "Value  Value[ int  barsAgo]", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#more-information_6", 
            "text": "The methods known for a collection, Set(), Reset(), and Count(), can be used for values.", 
            "title": "More Information"
        }, 
        {
            "location": "/keywords/#example_57", 
            "text": "See [ Values ].", 
            "title": "Example"
        }, 
        {
            "location": "/keywords/#verticalgridlines", 
            "text": "", 
            "title": "VerticalGridLines"
        }, 
        {
            "location": "/keywords/#description_63", 
            "text": "The property VerticalGridLines defines whether or not the regularly spaced vertical lines (the so-called grid) are shown within the charting area.  VerticalGridLines = true (default)  Vertical grid lines are shown  VerticalGridLines = false  Vertical grid lines are not shown  This property can be queried within the script and returns a value of the type Boolean (true or false).", 
            "title": "Description"
        }, 
        {
            "location": "/keywords/#usage_48", 
            "text": "VerticalGridLines", 
            "title": "Usage"
        }, 
        {
            "location": "/keywords/#example_58", 
            "text": "protected override void Initialize()\n{\nAdd(new Plot(Color.Red,  MyPlot1 ));\n// Vertical grid lines shall not be shown within the chart\nVerticalGridLines = false;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/", 
            "text": "DrawingObjects\n\n\nDrawAndrewsPitchfork()\n\n\nDescription\n\n\nThis drawing object draws an Andrew\u2019s Pitchfork.\n\n\nInformation concerning its usage:\n- [\nhttp://vtadwiki.vtad.de/index.php/Andrews_Pitchfork\n]\n- [\nhttp://www.volumen-analyse.de/blog/?p=917\n]\n- [\nhttp://www.godmode-trader.de/wissen/index.php/Chartlehrgang:Andrews_Pitchfork\n]\n\n\nUsage\n\n\nDrawAndrewsPitchfork(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y, Color color, DashStyle dashStyle, int width)\nDrawAndrewsPitchfork(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IAndrewsPitchfork (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nanchor1BarsAgo\n\n\nNumber of bars ago for anchor point 1 (x-axis)\n\n\n\n\n\n\nanchor1Time\n\n\nDate/time for anchor point 1 (x-axis)\n\n\n\n\n\n\nanchor1Y\n\n\ny-value for anchor point 1\n\n\n\n\n\n\nanchor2BarsAgo\n\n\nNumber of bars ago for anchor point 2 (x-axis)\n\n\n\n\n\n\nanchor2Time\n\n\nDate/time for anchor point 2 (x-axis)\n\n\n\n\n\n\nanchor2Y\n\n\ny-value for anchor point 2\n\n\n\n\n\n\nanchor3BarsAgo\n\n\nNumber of bars ago for anchor point 3 (x-axis)\n\n\n\n\n\n\nanchor3Time\n\n\nDate/time for anchor point 3 (x-axis)\n\n\n\n\n\n\nanchor3Y\n\n\ny-value for anchor point 3\n\n\n\n\n\n\ncolor\n\n\nColor of the object\n\n\n\n\n\n\ndashStyle\n\n\nLine styles:\n\n\n\n\n\n\n\n\nDashStyle.Dash, DashStyle.DashDot, DashStyle.DashDotDot, DashStyle.Dot DashStyle.Solid\n\n\n\n\n\n\n\n\nYou need to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;.\n\n\n\n\n\n\nwidth\n\n\nLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draw the Andrew\u2019s Pitchfork (\u201cMyAPF\u201d)\nDrawAndrewsPitchfork(\nMyAPF\n, true, 4, Low[4], 3, High[3], 1, Low[1], Color.Black, DashStyle.Solid, 2);\n\n\n\n\nDrawArc()\n\n\nDescription\n\n\nDrawArc() draws a circular arc.\n\n\nUsage\n\n\nDrawArcstring tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawArc(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, DashStyle dashStyle, int width)\nDrawArc(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArc (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nNumber of bars ago for the starting point\n\n\n\n\n\n\nstartTime\n\n\nDate/time for the starting point\n\n\n\n\n\n\nstartY\n\n\ny-value for the starting point\n\n\n\n\n\n\nendBarsAgo\n\n\nNumber of bars ago for the end point\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end point\n\n\n\n\n\n\nendY\n\n\ny-value for the end point\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a blue arc\nDrawArc(\nMyArc\n, true, 10, 10, 0, 20, Color.Blue, DashStyle.Solid, 3);\n\n\n\n\nDrawArrowDown()\n\n\nDescription\n\n\nDrawArrowDown() draws an arrow pointing downwards:\n\n\n\n\nSee [\nDrawArrowUp()\n], [\nDrawDiamond()\n], [\nDrawDot()\n], [\nDrawSquare()\n], [\nDrawTriangleUp()\n], [\nDrawTriangleDown()\n].\n\n\nUsage\n\n\nDrawArrowDown(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawArrowDown(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArrowDown (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar on which the arrow should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nDate/time of the bar on which the arrow should be drawn\n\n\n\n\n\n\ny\n\n\ny-value for the arrow\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a red arrow 3 ticks above the high for the current bar\nDrawArrowDown(\nMyArrow\n, true, 0, High[0] + 3*TickSize, Color.Red);\n// Draws a red arrow on a three-bar reversal pattern\nif(High[2] \n High[3] \n High[1] \n High[2] \n Close[0] \n Open[0])\nDrawArrowDown(CurrentBar.ToString(), true, 0, High[0] + 3*TickSize, Color.Red);\n\n\n\n\nDrawArrowLine()\n\n\nDescription\n\n\nDrawArrowLine() draws an arrow:\n\n\n\n\nUsage\n\n\n DrawArrowLine (string tag,  int  startBarsAgo,  double  startY,  int  endBarsAgo,  double  endY, Color color)\n DrawArrowLine (string tag,  bool  autoScale,  int  startBarsAgo,  double  startY,  int  endBarsAgo,  double  endY, Color color, DashStyle dashStyle,  int  width)\n DrawArrowLine (string tag,  bool  autoScale, DateTime startTime,  double  startY, DateTime endTime,  double  endY, Color color, DashStyle dashStyle,  int  width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArrowLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nSets the preceding bar at which the arrow should start (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nDate/time of the bar at which the arrow should start\n\n\n\n\n\n\nstartY\n\n\ny-value for the starting point of the arrow\n\n\n\n\n\n\nendBarsAgo\n\n\nSets the preceding bar at which the arrow should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the arrow should end\n\n\n\n\n\n\nendY\n\n\ny-value at which the arrow should end\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a black arrow\nDrawArrowLine(\nMyArrow\n, false, 10, 10, 0, 5, Color.Black, DashStyle.Solid, 4);\n\n\n\n\nDrawArrowUp()\n\n\nDescription\n\n\nDrawArowUp() draws an arrow pointing upwards:\n\n\n\n\nSee [\nDrawArrowDown()\n], [\nDrawDiamond()\n], [\nDrawDot()\n], [\nDrawSquare()\n], [\nDrawTriangleUp()\n], [\nDrawTriangleDown()\n].\n\n\nUsage\n\n\nDrawArrowUp(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawArrowUp(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArrowUp (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar on which the arrow should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nDate/time at which the arrow should be drawn\n\n\n\n\n\n\ny\n\n\ny-value for the arrow\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a green arrow for the current bar 3 ticks below the low\nDrawArrowUp(\nMyArrow\n, true, 0, Low[0] - 3*TickSize, Color.Green);\n\n\n\n\nDrawDiamond()\n\n\nDescription\n\n\nDrawDiamond() draws a diamond:\n\n\n\n\nSee [\nDrawArrowUp()\n], [\nDrawArrowDown()\n], [\nDrawDot()\n], [\nDrawSquare()\n], [\nDrawTriangleUp()\n], [\nDrawTriangleDown()\n].\n\n\nUsage\n\n\nDrawDiamond(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawDiamond(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IDiamond (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nDefines the preceding bar on which the diamond should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time of the bar on which the diamond should be drawn\n\n\n\n\n\n\ny\n\n\ny-value on which the diamond should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a light blue diamond for the current bar 5 ticks below the low\nDrawDiamond(\nMyDiamond\n, true, 0, Low[0] - 5*TickSize, Color.SteelBlue);\n\n\n\n\nDrawDot()\n\n\nDescription\n\n\nDrawDot() draws a dot:\n\n\n\n\nSee [\nDrawArrowUp()\n], [\nDrawArrowDown()\n], [\nDrawDiamond()\n], [\nDrawSquare()\n], [\nDrawTriangleUp()\n], [\nDrawTriangleDown()\n].\n\n\nUsage\n\n\nDrawDot(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawDot(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IDot (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nDefines the preceding bar on which the dot should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nThe date/time at which the dot should be drawn\n\n\n\n\n\n\ny\n\n\ny-value at which the dot should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws an orange dot for the current bar 5 ticks above the high\nDrawDot(\nMyDot\n, true, 0, High[0] + 5*TickSize, Color.Orange);\n\n\n\n\nDrawEllipse()\n\n\nDescription\n\n\nDrawEllipse() draws an ellipse.\n\n\nUsage\n\n\nDrawEllipse(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawEllipse(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, Color areaColor, int areaOpacity)\nDrawEllipse(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IEllipse (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nSets the preceding bar at which the ellipse should start\n\n\n\n\n\n\nstartTime\n\n\nDate/time at which the ellipse should start\n\n\n\n\n\n\nstartY\n\n\ny-value for the start of the ellipse\n\n\n\n\n\n\nendBarsAgo\n\n\nSets the preceding bar at which the ellipse should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the ellipse should end\n\n\n\n\n\n\nendY\n\n\ny-value for the end of the ellipse\n\n\n\n\n\n\ncolor\n\n\nBorder color of the drawing object\n\n\n\n\n\n\nareaColor\n\n\nFill color of the drawing object\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color\n\n\n\n\n\n\nValue between 0 and 10\n\n\n\n\n\n\n\n\n0 = completely transparent\n\n\n\n\n\n\n\n\n10 = completely opaque\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a yellow ellipse from the current bar to 5 bars ago\nDrawEllipse(\nMyEllipse\n, true, 5, High[5], 0, Close[0], Color.Yellow, Color.Yellow, 1);\n\n\n\n\nDrawExtendedLine()\n\n\nDescription\n\n\nDrawExtendedLine() draws a line with an infinite end point.\n\n\nSee [\nDrawLine()\n], [\nDrawHorizontalLine()\n], [\nDrawVerticalLine()\n], [\nDrawRay()\n].\n\n\nUsage\n\n\nDrawExtendedLine(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawExtendedLine(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, DashStyle dashStyle, int width)\nDrawExtendedLine(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IExtendedLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nNumber of bars ago for the start point\n\n\n\n\n\n\nstartTime\n\n\nDate/time for the start point\n\n\n\n\n\n\nstartY\n\n\ny-value for the start point\n\n\n\n\n\n\nendBarsAgo\n\n\nNumber of bars ago for the second point (a true end point does not exist; the line extends to infinity)\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end point\n\n\n\n\n\n\nendY\n\n\ny-value for the end point\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a line without an end point\nDrawExtendedLine(\nMyExt.Line\n, false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);\n\n\n\n\nDrawFibonacciCircle()\n\n\nDescription\n\n\nDrawFibonacciCircle() draws a Fibonacci circle.\n\n\nUsage\n\n\nDrawFibonacciCircle(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY)\nDrawFibonacciCircle(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciCircle (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nDefines the starting point in terms of bars ago\n\n\n\n\n\n\nstartTime\n\n\nDate/time of the bar for the starting point\n\n\n\n\n\n\nstartY\n\n\ny-value for the start of the Fibonacci circle\n\n\n\n\n\n\nendBarsAgo\n\n\nDefines the end point in terms of bars ago\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end of the Fibonacci circle\n\n\n\n\n\n\nendY\n\n\ny-value for the end point of the Fibonacci circle\n\n\n\n\n\n\n\n\nExample\n\n\n//Draws a Fibonacci circle\nDrawFibonacciCircle(\nMyFibCircle\n, true, 5, Low[5], 0, High[0]);\n\n\n\n\nDrawFibonacciExtensions()\n\n\nDescription\n\n\nDrawFibonacciExtensions() draws Fibonacci extensions.\n\n\nUsage\n\n\nDrawFibonacciExtensions(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y)\nDrawFibonacciExtensions(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciExtensions (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nanchor1BarsAgo\n\n\nNumber of bars ago for anchor point 1\n\n\n\n\n\n\nanchor1Time\n\n\nDate/time for anchor point 1\n\n\n\n\n\n\nanchor1Y\n\n\ny-value for anchor point 1\n\n\n\n\n\n\nanchor2BarsAgo\n\n\nNumber of bars ago for anchor point 2\n\n\n\n\n\n\nanchor2Time\n\n\nDate/time for anchor point 2\n\n\n\n\n\n\nanchor2Y\n\n\ny-value for the anchor point 2\n\n\n\n\n\n\nanchor3BarsAgo\n\n\nNumber of bars ago for anchor point 3\n\n\n\n\n\n\nanchor3Time\n\n\nDate/time for anchor point 3\n\n\n\n\n\n\nanchor3Y\n\n\ny-value for anchor point 3\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws Fibonacci extensions\nDrawFibonacciExtensions(\nMyFibExt\n, true, 4, Low[4], 3, High[3], 1, Low[1]);\n\n\n\n\nDrawFibonacciRetracements()\n\n\nDescription\n\n\nDrawFibonacciRetracements() draws Fibonacci retracements.\n\n\nUsage\n\n\nDrawFibonacciRetracements(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY)\nDrawFibonacciRetracements(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciRetracements (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nDefines how many bars ago the starting point of the Fibonacci retracement is located\n\n\n\n\n\n\nstartTime\n\n\nDate/time of the bar at which the Fibonacci retracement should begin\n\n\n\n\n\n\nstartY\n\n\ny-value at which the Fibonacci retracement will begin\n\n\n\n\n\n\nendBarsAgo\n\n\nDefines how many bars ago the end point of the Fibonacci retracement is located\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the Fibonacci retracement should end\n\n\n\n\n\n\nendY\n\n\ny-value at which the Fibonacci retracement should end\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws Fibonnaci retracements\nDrawFibonacciRetracements(\nMyFibRet\n, true, 10, Low[10], 0, High[0]);\n\n\n\n\nDrawFibonacciTimeExtensions()\n\n\nDescription\n\n\nDrawFibonacciTimeExtensions() draws Fibonacci time extensions.\n\n\nUsage\n\n\nDrawFibonacciTimeExtensions(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY)\nDrawFibonacciTimeExtensions(string tag, DateTime startTime, double startY, DateTime endTime, double endY)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciTimeExtensions (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nstartBarsAgo\n\n\nDefines how many bars ago the extensions should start\n\n\n\n\n\n\nstartTime\n\n\nDate/time at which the extensions should start\n\n\n\n\n\n\nstartY\n\n\ny-value at which the extensions should start\n\n\n\n\n\n\nendBarsAgo\n\n\nDefines how many bars ago the extensions should end\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the extensions should end\n\n\n\n\n\n\nendY\n\n\ny-value at which the extensions should end\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws Fibonacci time extensions\nDrawFibonacciTimeExtensions(\nMyFibTimeExt\n, 10, Low[10], 0, High[0]);\n\n\n\n\nDrawGannFan()\n\n\nDescription\n\n\nDrawGannFan() draws a Gann fan.\n\n\nUsage\n\n\nDrawGannFan(string tag, bool autoScale, int barsAgo, double y)\nDrawGannFan(string tag, bool autoScale, DateTime time, double y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IGannFan (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar on which the Gann fan should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time at which the Gann fan should start\n\n\n\n\n\n\ny\n\n\ny-value for the Gann fan\n\n\n\n\n\n\n\n\nExample\n\n\n// Shows a Gann fan at the low of the bar from 10 periods ago\nDrawGannFan(\nMyGannFan\n, true, 10, Low[10]);\n\n\n\n\nDrawLine()\n\n\nDescription\n\n\nDrawLine() draws a (trend) line.\n\n\nSee [\nDrawHorizontalLine()\n], [\nDrawVerticalLine()\n], [\nDrawExtendedLine()\n], [\nDrawRay()\n].\n\n\nUsage\n\n\nDrawLine(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawLine(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, DashStyle dashStyle, int width)\nDrawLine(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITrendLine (interface).\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nNumber of bars ago for the starting point\n\n\n\n\n\n\nstartTime\n\n\nDate/time for the starting point\n\n\n\n\n\n\nstartY\n\n\ny-value for the starting point\n\n\n\n\n\n\nendBarsAgo\n\n\nNumber of bars ago for the end point\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end point\n\n\n\n\n\n\nendY\n\n\ny-value for the end point\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a line\nDrawLine(\nMyLine\n, false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);\n\n\n\n\nDrawHorizontalLine()\n\n\nDescription\n\n\nDrawHorizontalLine() draws a horizontal line in the chart.\n\n\nSee [\nDrawLine()\n], [\nDrawVerticalLine()\n], [\nDrawExtendedLine()\n], [\nDrawRay()\n].\n\n\nUsage\n\n\nDrawHorizontalLine(string tag, double y, Color color)\nDrawHorizontalLine(string tag, bool autoScale, double y, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IHorizontalLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\ny\n\n\nAny double value of your choice\n\n\n\n\n\n\ncolor\n\n\nLine color\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLine strength\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a horizontal line at y=10\nDrawHorizontalLine(\nMyHorizontalLine\n, 10, Color.Black);\n\n\n\n\nDrawRay()\n\n\nDescription\n\n\nDrawRay() draws a (trend) line and extends it to infinity.\n\n\nSee [\nDrawLine()\n], [\nDrawHorizontalLine()\n], [\nDrawVerticalLine()\n], [\nDrawExtendedLine()\n].\n\n\nUsage\n\n\nDrawRay(string tag, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, Color color)\nDrawRay(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, Color color, DashStyle dashStyle, int width)\nDrawRay(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRay (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nanchor1BarsAgo\n\n\nNumber of bars ago for anchor point 1\n\n\n\n\n\n\nanchor1Time\n\n\nDate/time for anchor point 1\n\n\n\n\n\n\nanchor1Y\n\n\ny-value for anchor point 1\n\n\n\n\n\n\nanchor2BarsAgo\n\n\nNumber of bars ago for anchor point 2\n\n\n\n\n\n\nanchor2Time\n\n\nDate/time for anchor point 2\n\n\n\n\n\n\nanchor2Y\n\n\ny-value for anchor point 2\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLine strength\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a line from the bar from 10 periods ago to the current bar (x-axis)\n// --\n line is extended to the right\n// from y=3 to y=7\nDrawRay(\nMyRay\n, 10, 3, 0, 7, Color.Green);\n// Draws a line from the current bar to the bar from 10 periods ago\n// --\n line is extended to the left\n// from y=3 to y=7\nDrawRay(\nMyRay\n, 0, 3, 10, 7, Color.Green);\n\n\n\n\nDrawRectangle()\n\n\nDescription\n\n\nDrawRectangle() draws a rectangle.\n\n\nUsage\n\n\nDrawRectangle(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawRectangle(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, Color areaColor, int areaOpacity)\nDrawRectangle(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRectangle (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nSets the preceding bar at which the one corner of the rectangle should be located (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nDate/time at which the start of the one rectangle corner should be located\n\n\n\n\n\n\nstartY\n\n\ny-value at which the one corner of the rectangle should be located\n\n\n\n\n\n\nendBarsAgo\n\n\nSets the preceding bar at which the second corner of the rectangle should be located (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nDate/time of the second rectangle corner\n\n\n\n\n\n\nendY\n\n\ny-value of the second rectangle corner\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\nareaColor\n\n\nFill color of the drawing object\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color\n\n\n\n\n\n\nValue between 0 and 10\n\n\n\n\n\n\n\n\n0 = completely transparent\n\n\n\n\n\n\n\n\n10 = completely opaque\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a green rectangle from the low of 10 periods ago to the high of 5 periods ago\n// with a fill color of pale green and a transparency of 2\nDrawRectangle(\nMyRect\n, true, 10, Low[10], 5, High[5], Color.PaleGreen, Color.PaleGreen, 2);\n\n\n\n\nDrawRegion()\n\n\nDescription\n\n\nDrawRegion() fills a specific area on a chart.\n\n\nUsage\n\n\nDrawRegion(string tag, int startBarsAgo, int endBarsAgo, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nDrawRegion(string tag, int startBarsAgo, int endBarsAgo, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)\nDrawRegion(string tag, DateTime startTime, DateTime endTime, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nDrawRegion(string tag, DateTime startTime, DateTime endTime, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRegion (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nstartBarsAgo\n\n\nSets the preceding bar at which the drawing should begin (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nStart time for the drawing\n\n\n\n\n\n\nendBarsAgo\n\n\nSets the preceding bar at which the drawing should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nEnd time for the drawing\n\n\n\n\n\n\nseries1, series2\n\n\nEvery data series, for example an indicator, close, high, low and so on.\n\n\n\n\n\n\n\n\n                The respective value of the data series for the current bar is used as a y-value.  |\n\n\n\n| y                | Any double value                                                                  |\n| outlineColor     | Color for the border                                                              |\n| areaColor        | Fill color for the area                                                           |\n| areaOpacity      | Transparency of the fill color                                                  \n\n                    Value between 0 and 10                                                           \n\n                    0 = completely transparent                                                       \n\n                    10 = completely opaque                                                             |\n\n\nExample\n\n\n// Fills the area between the upper and lower Bollinger Bands\nDrawRegion(\nMyRegion\n, CurrentBar, 0, Bollinger(2, 14).Upper, Bollinger(2, 14).Lower, Color.Empty, Color.Lime, 100);\n\n\n\n\nDrawRegressionChannel()\n\n\nDescription\n\n\nDrawRegressionChannel() draws a regression channel.\n\n\nUsage\n\n\nDrawRegressionChannel(string tag, int startBarsAgo, int endBarsAgo, Color color)\nDrawRegressionChannel(string tag, bool autoScale, int startBarsAgo, int endBarsAgo, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)\nDrawRegressionChannel(string tag, bool autoScale, DateTime startTime, DateTime endTime, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRegressionChannel (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstartBarsAgo\n\n\nSets the preceding bar at which the regression channel should start (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nStart time for the regression channel\n\n\n\n\n\n\nendBarsAgo\n\n\nSets the preceding bar at which the regression channel should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nEnd time for the regression channel\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\nupperDashStyle,\n\n\n\n\n\n\n\n\nmiddleDashStyle,\n\n\n\n\n\n\n\n\nlowerDashStyle\n\n\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:\n\n\n\n\n\n\n\n\nusing System.Drawing.Drawing2D;\n\n\n\n\n\n\nupperColor,\n\n\n\n\n\n\n\n\nmiddleColor,\n\n\n\n\n\n\n\n\nlowerColor\n\n\nLine color\n\n\n\n\n\n\nupperWidth,\n\n\n\n\n\n\n\n\nmiddleWidth,\n\n\n\n\n\n\n\n\nlowerWidth\n\n\nLine strength\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a regression channel from the low of the bar from 10 days ago to the high of the bar from 5 days ago.\nDrawRegressionChannel(\nMyRegChannel\n, 10, 0, Color.Black);\n\n\n\n\nDrawSquare()\n\n\nDescription\n\n\nDrawSquare() draws a square:\n\n\n\n\nSee [\nDrawArrowUp()\n], [\nDrawArrowDown()\n], [\nDrawDiamond()\n], [\nDrawDot()\n], [\nDrawTriangleUp()\n], [\nDrawTriangleDown()\n].\n\n\nUsage\n\n\nDrawSqare(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawSqare(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ISquare (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar at which the square should be drawn (0 = current bar)\n\n\n\n\n\n\nTime\n\n\nDate/time of the bar at which the square should be drawn\n\n\n\n\n\n\nY\n\n\ny-value for the square\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a dark red square at the current bar 10 ticks above the high\nDrawSquare(\nMySquare\n, true, 0, High[0] + 10*TickSize, Color.DarkRed);\n\n\n\n\nDrawText()\n\n\nDescription\n\n\nDrawText() writes whatever text you want onto the chart.\n\n\nSee [\nDrawTextFixed()\n], \nPlotMethod\n.\n\n\nUsage\n\n\nDrawText(string tag, string text, int barsAgo, double y, Color color)\nDrawText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity)\nDrawText(string tag, bool autoScale, string text, DateTime x, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity)\nDrawText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment HAlign, VerticalAlignment VAlign, Color outlineColor, Color areaColor, int areaOpacity)\nDrawText(string tag, bool autoScale, string text, DateTime x, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment HAlign, VerticalAlignment VAlign, Color outlineColor, Color areaColor, int areaOpacity)\n\n\n\n\nImportant note:\n\nWhen using signatures that contain horizontal alignment and vertical alignment, you need to add the following lines:\n\n\nusing System.Windows.Forms;\nusing System.Windows.Forms.VisualStyles;\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IText (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nText\n\n\nText to be displayed (may contain escape sequences)\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the text should be displayed\n\n\n\n\n\n\nTime\n\n\nDate/time of the bar at which the text should begin\n\n\n\n\n\n\nY\n\n\ny-value at which the text should be written\n\n\n\n\n\n\nyPixelOffset\n\n\nVertical offset of the text; positive numbers move it up, and negative numbers move it down\n\n\n\n\n\n\ntextColor\n\n\nText color\n\n\n\n\n\n\nFont\n\n\nFont\n\n\n\n\n\n\nAlignment\n\n\nPossible values are:\n\n\n\n\n\n\n- StringAlignment.Center\n\n\n\n\n\n\n\n\n- StringAlignment.Far\n\n\n\n\n\n\n\n\n- StringAlignment.Near\n\n\n\n\n\n\n\n\nHAlign\n\n\nPossible values are:\n\n\n\n\n\n\n- HorizontalAlign.Left\n\n\n\n\n\n\n\n\n- HorizontalAlign.Center\n\n\n\n\n\n\n\n\n- HorizontalAlign.Right\n\n\n\n\n\n\n\n\nVAlign\n\n\nPossible values are:\n\n\n\n\n\n\n- VerticalAlign.Top\n\n\n\n\n\n\n\n\n- VerticalAlign.Center\n\n\n\n\n\n\n\n\n- VerticalAlign.Bottom\n\n\n\n\n\n\n\n\noutlineColor\n\n\nBorder color around the text\n\n\n\n\n\n\nFor no border, select Color.Empty\n\n\n\n\n\n\n\n\nareaColor\n\n\nFill color for the text box\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color\n\n\n\n\n\n\nValue between 0 and 10\n\n\n\n\n\n\n\n\n0 = completely transparent\n\n\n\n\n\n\n\n\n10 = completely opaque\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n// writes text at y=3.0\nDrawText(\nMyText\n, \nThis is sample text.\n, 10, 3, Color.Black);\n// writes red text in the font Arial 7\nDrawText(\nMyText\n, false, \nThis is sample text.\n, Time[0], Close[0]+50*TickSize, 0,\nColor.Red, new Font(\nArial\n,7), StringAlignment.Center, Color.Blue, Color.DarkOliveGreen, 10);\n\n\n\n\nThis leads to the following result:\n\n\n\n\nDrawText(\nMyTag\n,true,\nText\n,1,\n// barsAgo\nHigh[1], // y\n10, // yPixelOffset\nColor.Blue, // Text color\nnew Font(\nArial\n, 10, FontStyle.Bold),\nStringAlignment.Center,\nHorizontalAlignment.Center,\nVerticalAlignment.Bottom,\nColor.Red, // Outline color\nColor.Yellow, // Fill color\n100); // Opacity\n\n\n\n\nDrawTextFixed()\n\n\nDescription\n\n\nDrawTextFixed() writes text into one of 5 predetermined locations on the chart.\n\n\nSee [\nDrawText()\n].\n\n\nUsage\n\n\nDrawTextFixed(string tag, string text, TextPosition textPosition)\nDrawTextFixed(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITextFixed (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\ntext\n\n\nThe text to be displayed\n\n\n\n\n\n\nTextPosition\n\n\nTextPosition.BottomLeft\n\n\n\n\n\n\nTextPosition.BottomRight\n\n\n\n\n\n\n\n\nTextPosition.Center\n\n\n\n\n\n\n\n\nTextPosition.TopLeft\n\n\n\n\n\n\n\n\nTextPosition.TopRight\n\n\n\n\n\n\n\n\ntextColor\n\n\nText color\n\n\n\n\n\n\nfont\n\n\nFont\n\n\n\n\n\n\noutlineColor\n\n\nColor for the border around the text. For no border color, use Color.Empty\n\n\n\n\n\n\nareaColor\n\n\nFill color of the text box\n\n\n\n\n\n\nFor no fill color, use Color.Empty\n\n\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color\n\n\n\n\n\n\nValue between 0 and 10\n\n\n\n\n\n\n\n\n0 = completely transparent\n\n\n\n\n\n\n\n\n10 = completely opaque\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n// Writes text into the middle of the chart\nDrawTextFixed(\nMyText\n, \nThis is sample text.\n, TextPosition.Center);\n// Writes red text with a blue border into the middle of the chart\nDrawTextFixed(\nMyText\n, \nThis is sample text.\n, TextPosition.Center,\nColor.Red, new Font(\nArial\n,35), Color.Blue, Color.Empty, 10);\n\n\n\n\nDrawTrendChannel()\n\n\nDescription\n\n\nDrawTrendChannel() draws a trend channel.\n\n\nUsage\n\n\nDrawTrendChannel(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y)\nDrawTrendChannel(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITrendChannel (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nanchor1BarsAgo\n\n\nNumber of bars ago for anchor point 1 (x-axis)\n\n\n\n\n\n\nanchor1Time\n\n\nDate/time for anchor point 1 (x-axis)\n\n\n\n\n\n\nanchor1Y\n\n\ny-value for anchor point 1\n\n\n\n\n\n\nanchor2BarsAgo\n\n\nNumber of bars ago for anchor point 2 (x-axis)\n\n\n\n\n\n\nanchor2Time\n\n\nDate/time for anchor point 2 (x-axis)\n\n\n\n\n\n\nanchor2Y\n\n\ny-value for anchor point 2\n\n\n\n\n\n\nanchor3BarsAgo\n\n\nNumber of bars ago for anchor point 3 (x-axis)\n\n\n\n\n\n\nanchor3Time\n\n\nDate/time for anchor point 3 (x-axis)\n\n\n\n\n\n\nanchor3Y\n\n\ny-value for anchor point 3\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a trend channel\nDrawTrendChannel(\nMyTrendChannel\n, true, 10, Low[10], 0, High[0], 10, High[10] + 5 * TickSize);\n\n\n\n\nDrawTriangle()\n\n\nDescription\n\n\nDrawTriangle() draws a triangle.\n\n\nUsage\n\n\nDrawTriangle(string tag, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y, Color color)\nDrawTriangle(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y, Color color, Color areaColor, int areaOpacity)\nDrawTriangle(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y, Color color, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITriangle (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nanchor1BarsAgo\n\n\nNumber of bars ago for anchor point 1 (x-axis)\n\n\n\n\n\n\nanchor1Time\n\n\nDate/time for anchor point 1 (x-axis)\n\n\n\n\n\n\nanchor1Y\n\n\ny-value for anchor point 1\n\n\n\n\n\n\nanchor2BarsAgo\n\n\nNumber of bars ago for anchor point 2 (x-axis)\n\n\n\n\n\n\nanchor2Time\n\n\nDate/time for anchor point 2 (x-axis)\n\n\n\n\n\n\nanchor2Y\n\n\ny-value for anchor point 2\n\n\n\n\n\n\nanchor3BarsAgo\n\n\nNumber of bars ago for anchor point 3 (x-axis)\n\n\n\n\n\n\nanchor3Time\n\n\nDate/time for anchor point 3 (x-axis)\n\n\n\n\n\n\nanchor3Y\n\n\ny-value for anchor point 3\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\nareaColor\n\n\nFill color of the drawing object\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color\n\n\n\n\n\n\nValue between 0 and 10\n\n\n\n\n\n\n\n\n0 = completely transparent\n\n\n\n\n\n\n\n\n10 = completely opaque\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a green triangle\nDrawTriangle(\ntag1\n, 4, Low[4], 3, High[3], 1, Low[1], Color.Green);\n\n\n\n\nDrawTriangleUp()\n\n\nDescription\n\n\nDrawTriangleUp() draws a small upwards-pointing triangle:\n\n\n\n\nSee [\nDrawArrowUp()\n], [\nDrawArrowDown()\n], [\nDrawDiamond()\n], [\nDrawDot()\n], [\nDrawSquare()\n], [\nDrawTriangleDown()\n].\n\n\nUsage\n\n\nDrawTriangleUp(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawTriangleUp(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITriangleUp (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the triangle should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time for the bar at which the triangle should be drawn\n\n\n\n\n\n\ny\n\n\ny-value at which the triangle should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a small light green triangle at the current bar 10 ticks below the low\nDrawTriangleUp(\nMyTriangleUp\n, true, 0, Low[0] - 10*TickSize, Color.LightGreen);\n\n\n\n\nDrawTriangleDown()\n\n\nDescription\n\n\nDrawTriangleDown() draws a small downwards-pointing triangle:\n\n\n\n\nSee [\nDrawArrowUp()\n], [\nDrawArrowDown()\n], [\nDrawDiamond()\n], [\nDrawDot()\n], [\nDrawSquare()\n], [\nDrawTriangleUp()\n].\n\n\nUsage\n\n\nDrawTriangleDown(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawTriangleDown(string tag, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITriangleDown (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the triangle should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time for the bar at which the triangle should be drawn\n\n\n\n\n\n\nY\n\n\ny-value at which the triangle should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a small red triangle at the current bar 10 ticks above the high\nDrawTriangleDown(\nMyTriangleDown\n, true, 0, High[0] + 10*TickSize, Color.Red);\n\n\n\n\nDrawVerticalLine()\n\n\nDescription\n\n\nDrawVerticalLine() draws a vertical line in the chart.\n\n\nSee [\nDrawLine()\n], [\nDrawHorizontalLine()\n], [\nDrawExtendedLine()\n], [\nDrawRay()\n].\n\n\nUsage\n\n\nDrawVerticalLine(string tag, int barsAgo, Color color)\nDrawVerticalLine(string tag, int barsAgo, Color color, DashStyle dashStyle, int width)\nDrawVerticalLine(string tag, DateTime time, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IVerticalLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the vertical line should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nDate/time of the bar at which the vertical line should be drawn\n\n\n\n\n\n\ncolor\n\n\nLine color\n\n\n\n\n\n\ndashStyle\n\n\nLine style\n\n\n\n\n\n\n\n\n         DashStyle.Dash                                                              \n         DashStyle.DashDot                                                           \n         DashStyle.DashDotDot                                                        \n         DashStyle.Dot                                                               \n         DashStyle.Solid\n\n         You may have to integrate:                                                  \n         using System.Drawing.Drawing2D;                                             |\n\n\n\n| width     | Line strength                                                              |\n\n\nExample\n\n\n// Draws a vertical line at the bar from 10 periods ago\nDrawVerticalLine(\nMyVerticalLine\n, 10, Color.Black);", 
            "title": "Drawing objects"
        }, 
        {
            "location": "/drawing_objects/#drawingobjects", 
            "text": "", 
            "title": "DrawingObjects"
        }, 
        {
            "location": "/drawing_objects/#drawandrewspitchfork", 
            "text": "", 
            "title": "DrawAndrewsPitchfork()"
        }, 
        {
            "location": "/drawing_objects/#description", 
            "text": "This drawing object draws an Andrew\u2019s Pitchfork.  Information concerning its usage:\n- [ http://vtadwiki.vtad.de/index.php/Andrews_Pitchfork ]\n- [ http://www.volumen-analyse.de/blog/?p=917 ]\n- [ http://www.godmode-trader.de/wissen/index.php/Chartlehrgang:Andrews_Pitchfork ]", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage", 
            "text": "DrawAndrewsPitchfork(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y, Color color, DashStyle dashStyle, int width)\nDrawAndrewsPitchfork(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value", 
            "text": "A drawing object of the type IAndrewsPitchfork (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    anchor1BarsAgo  Number of bars ago for anchor point 1 (x-axis)    anchor1Time  Date/time for anchor point 1 (x-axis)    anchor1Y  y-value for anchor point 1    anchor2BarsAgo  Number of bars ago for anchor point 2 (x-axis)    anchor2Time  Date/time for anchor point 2 (x-axis)    anchor2Y  y-value for anchor point 2    anchor3BarsAgo  Number of bars ago for anchor point 3 (x-axis)    anchor3Time  Date/time for anchor point 3 (x-axis)    anchor3Y  y-value for anchor point 3    color  Color of the object    dashStyle  Line styles:     DashStyle.Dash, DashStyle.DashDot, DashStyle.DashDotDot, DashStyle.Dot DashStyle.Solid     You need to integrate:     using System.Drawing.Drawing2D;.    width  Line strength in points", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example", 
            "text": "// Draw the Andrew\u2019s Pitchfork (\u201cMyAPF\u201d)\nDrawAndrewsPitchfork( MyAPF , true, 4, Low[4], 3, High[3], 1, Low[1], Color.Black, DashStyle.Solid, 2);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawarc", 
            "text": "", 
            "title": "DrawArc()"
        }, 
        {
            "location": "/drawing_objects/#description_1", 
            "text": "DrawArc() draws a circular arc.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_1", 
            "text": "DrawArcstring tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawArc(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, DashStyle dashStyle, int width)\nDrawArc(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_1", 
            "text": "A drawing object of the type IArc (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_1", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Number of bars ago for the starting point    startTime  Date/time for the starting point    startY  y-value for the starting point    endBarsAgo  Number of bars ago for the end point    endTime  Date/time for the end point    endY  y-value for the end point    color  Color of the drawing object    dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    width  Line strength in points", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_1", 
            "text": "// Draws a blue arc\nDrawArc( MyArc , true, 10, 10, 0, 20, Color.Blue, DashStyle.Solid, 3);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawarrowdown", 
            "text": "", 
            "title": "DrawArrowDown()"
        }, 
        {
            "location": "/drawing_objects/#description_2", 
            "text": "DrawArrowDown() draws an arrow pointing downwards:   See [ DrawArrowUp() ], [ DrawDiamond() ], [ DrawDot() ], [ DrawSquare() ], [ DrawTriangleUp() ], [ DrawTriangleDown() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_2", 
            "text": "DrawArrowDown(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawArrowDown(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_2", 
            "text": "A drawing object of the type IArrowDown (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_2", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar on which the arrow should be drawn (0 = current bar)    time  Date/time of the bar on which the arrow should be drawn    y  y-value for the arrow    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_2", 
            "text": "// Draws a red arrow 3 ticks above the high for the current bar\nDrawArrowDown( MyArrow , true, 0, High[0] + 3*TickSize, Color.Red);\n// Draws a red arrow on a three-bar reversal pattern\nif(High[2]   High[3]   High[1]   High[2]   Close[0]   Open[0])\nDrawArrowDown(CurrentBar.ToString(), true, 0, High[0] + 3*TickSize, Color.Red);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawarrowline", 
            "text": "", 
            "title": "DrawArrowLine()"
        }, 
        {
            "location": "/drawing_objects/#description_3", 
            "text": "DrawArrowLine() draws an arrow:", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_3", 
            "text": "DrawArrowLine (string tag,  int  startBarsAgo,  double  startY,  int  endBarsAgo,  double  endY, Color color)\n DrawArrowLine (string tag,  bool  autoScale,  int  startBarsAgo,  double  startY,  int  endBarsAgo,  double  endY, Color color, DashStyle dashStyle,  int  width)\n DrawArrowLine (string tag,  bool  autoScale, DateTime startTime,  double  startY, DateTime endTime,  double  endY, Color color, DashStyle dashStyle,  int  width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_3", 
            "text": "A drawing object of the type IArrowLine (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_3", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Sets the preceding bar at which the arrow should start (0 = current bar)    startTime  Date/time of the bar at which the arrow should start    startY  y-value for the starting point of the arrow    endBarsAgo  Sets the preceding bar at which the arrow should end (0 = current bar)    endTime  Date/time at which the arrow should end    endY  y-value at which the arrow should end    color  Color of the drawing object    dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    width  Line strength in points", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_3", 
            "text": "// Draws a black arrow\nDrawArrowLine( MyArrow , false, 10, 10, 0, 5, Color.Black, DashStyle.Solid, 4);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawarrowup", 
            "text": "", 
            "title": "DrawArrowUp()"
        }, 
        {
            "location": "/drawing_objects/#description_4", 
            "text": "DrawArowUp() draws an arrow pointing upwards:   See [ DrawArrowDown() ], [ DrawDiamond() ], [ DrawDot() ], [ DrawSquare() ], [ DrawTriangleUp() ], [ DrawTriangleDown() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_4", 
            "text": "DrawArrowUp(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawArrowUp(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_4", 
            "text": "A drawing object of the type IArrowUp (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_4", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar on which the arrow should be drawn (0 = current bar)    time  Date/time at which the arrow should be drawn    y  y-value for the arrow    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_4", 
            "text": "// Draws a green arrow for the current bar 3 ticks below the low\nDrawArrowUp( MyArrow , true, 0, Low[0] - 3*TickSize, Color.Green);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawdiamond", 
            "text": "", 
            "title": "DrawDiamond()"
        }, 
        {
            "location": "/drawing_objects/#description_5", 
            "text": "DrawDiamond() draws a diamond:   See [ DrawArrowUp() ], [ DrawArrowDown() ], [ DrawDot() ], [ DrawSquare() ], [ DrawTriangleUp() ], [ DrawTriangleDown() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_5", 
            "text": "DrawDiamond(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawDiamond(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_5", 
            "text": "A drawing object of the type IDiamond (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_5", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Defines the preceding bar on which the diamond should be drawn    time  Date/time of the bar on which the diamond should be drawn    y  y-value on which the diamond should be drawn    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_5", 
            "text": "// Draws a light blue diamond for the current bar 5 ticks below the low\nDrawDiamond( MyDiamond , true, 0, Low[0] - 5*TickSize, Color.SteelBlue);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawdot", 
            "text": "", 
            "title": "DrawDot()"
        }, 
        {
            "location": "/drawing_objects/#description_6", 
            "text": "DrawDot() draws a dot:   See [ DrawArrowUp() ], [ DrawArrowDown() ], [ DrawDiamond() ], [ DrawSquare() ], [ DrawTriangleUp() ], [ DrawTriangleDown() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_6", 
            "text": "DrawDot(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawDot(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_6", 
            "text": "A drawing object of the type IDot (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_6", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Defines the preceding bar on which the dot should be drawn (0 = current bar)    time  The date/time at which the dot should be drawn    y  y-value at which the dot should be drawn    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_6", 
            "text": "// Draws an orange dot for the current bar 5 ticks above the high\nDrawDot( MyDot , true, 0, High[0] + 5*TickSize, Color.Orange);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawellipse", 
            "text": "", 
            "title": "DrawEllipse()"
        }, 
        {
            "location": "/drawing_objects/#description_7", 
            "text": "DrawEllipse() draws an ellipse.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_7", 
            "text": "DrawEllipse(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawEllipse(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, Color areaColor, int areaOpacity)\nDrawEllipse(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_7", 
            "text": "A drawing object of the type IEllipse (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_7", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Sets the preceding bar at which the ellipse should start    startTime  Date/time at which the ellipse should start    startY  y-value for the start of the ellipse    endBarsAgo  Sets the preceding bar at which the ellipse should end (0 = current bar)    endTime  Date/time at which the ellipse should end    endY  y-value for the end of the ellipse    color  Border color of the drawing object    areaColor  Fill color of the drawing object    areaOpacity  Transparency of the fill color    Value between 0 and 10     0 = completely transparent     10 = completely opaque", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_7", 
            "text": "// Draws a yellow ellipse from the current bar to 5 bars ago\nDrawEllipse( MyEllipse , true, 5, High[5], 0, Close[0], Color.Yellow, Color.Yellow, 1);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawextendedline", 
            "text": "", 
            "title": "DrawExtendedLine()"
        }, 
        {
            "location": "/drawing_objects/#description_8", 
            "text": "DrawExtendedLine() draws a line with an infinite end point.  See [ DrawLine() ], [ DrawHorizontalLine() ], [ DrawVerticalLine() ], [ DrawRay() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_8", 
            "text": "DrawExtendedLine(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawExtendedLine(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, DashStyle dashStyle, int width)\nDrawExtendedLine(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_8", 
            "text": "A drawing object of the type IExtendedLine (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_8", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Number of bars ago for the start point    startTime  Date/time for the start point    startY  y-value for the start point    endBarsAgo  Number of bars ago for the second point (a true end point does not exist; the line extends to infinity)    endTime  Date/time for the end point    endY  y-value for the end point    color  Color of the drawing object    dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    width  Line strength in points", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_8", 
            "text": "// Draws a line without an end point\nDrawExtendedLine( MyExt.Line , false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawfibonaccicircle", 
            "text": "", 
            "title": "DrawFibonacciCircle()"
        }, 
        {
            "location": "/drawing_objects/#description_9", 
            "text": "DrawFibonacciCircle() draws a Fibonacci circle.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_9", 
            "text": "DrawFibonacciCircle(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY)\nDrawFibonacciCircle(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_9", 
            "text": "A drawing object of the type IFibonacciCircle (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_9", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Defines the starting point in terms of bars ago    startTime  Date/time of the bar for the starting point    startY  y-value for the start of the Fibonacci circle    endBarsAgo  Defines the end point in terms of bars ago    endTime  Date/time for the end of the Fibonacci circle    endY  y-value for the end point of the Fibonacci circle", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_9", 
            "text": "//Draws a Fibonacci circle\nDrawFibonacciCircle( MyFibCircle , true, 5, Low[5], 0, High[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawfibonacciextensions", 
            "text": "", 
            "title": "DrawFibonacciExtensions()"
        }, 
        {
            "location": "/drawing_objects/#description_10", 
            "text": "DrawFibonacciExtensions() draws Fibonacci extensions.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_10", 
            "text": "DrawFibonacciExtensions(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y)\nDrawFibonacciExtensions(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_10", 
            "text": "A drawing object of the type IFibonacciExtensions (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_10", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    anchor1BarsAgo  Number of bars ago for anchor point 1    anchor1Time  Date/time for anchor point 1    anchor1Y  y-value for anchor point 1    anchor2BarsAgo  Number of bars ago for anchor point 2    anchor2Time  Date/time for anchor point 2    anchor2Y  y-value for the anchor point 2    anchor3BarsAgo  Number of bars ago for anchor point 3    anchor3Time  Date/time for anchor point 3    anchor3Y  y-value for anchor point 3", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_10", 
            "text": "// Draws Fibonacci extensions\nDrawFibonacciExtensions( MyFibExt , true, 4, Low[4], 3, High[3], 1, Low[1]);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawfibonacciretracements", 
            "text": "", 
            "title": "DrawFibonacciRetracements()"
        }, 
        {
            "location": "/drawing_objects/#description_11", 
            "text": "DrawFibonacciRetracements() draws Fibonacci retracements.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_11", 
            "text": "DrawFibonacciRetracements(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY)\nDrawFibonacciRetracements(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_11", 
            "text": "A drawing object of the type IFibonacciRetracements (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_11", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Defines how many bars ago the starting point of the Fibonacci retracement is located    startTime  Date/time of the bar at which the Fibonacci retracement should begin    startY  y-value at which the Fibonacci retracement will begin    endBarsAgo  Defines how many bars ago the end point of the Fibonacci retracement is located    endTime  Date/time at which the Fibonacci retracement should end    endY  y-value at which the Fibonacci retracement should end", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_11", 
            "text": "// Draws Fibonnaci retracements\nDrawFibonacciRetracements( MyFibRet , true, 10, Low[10], 0, High[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawfibonaccitimeextensions", 
            "text": "", 
            "title": "DrawFibonacciTimeExtensions()"
        }, 
        {
            "location": "/drawing_objects/#description_12", 
            "text": "DrawFibonacciTimeExtensions() draws Fibonacci time extensions.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_12", 
            "text": "DrawFibonacciTimeExtensions(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY)\nDrawFibonacciTimeExtensions(string tag, DateTime startTime, double startY, DateTime endTime, double endY)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_12", 
            "text": "A drawing object of the type IFibonacciTimeExtensions (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_12", 
            "text": "tag  A clearly identifiable name for the drawing object    startBarsAgo  Defines how many bars ago the extensions should start    startTime  Date/time at which the extensions should start    startY  y-value at which the extensions should start    endBarsAgo  Defines how many bars ago the extensions should end    endTime  Date/time at which the extensions should end    endY  y-value at which the extensions should end", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_12", 
            "text": "// Draws Fibonacci time extensions\nDrawFibonacciTimeExtensions( MyFibTimeExt , 10, Low[10], 0, High[0]);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawgannfan", 
            "text": "", 
            "title": "DrawGannFan()"
        }, 
        {
            "location": "/drawing_objects/#description_13", 
            "text": "DrawGannFan() draws a Gann fan.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_13", 
            "text": "DrawGannFan(string tag, bool autoScale, int barsAgo, double y)\nDrawGannFan(string tag, bool autoScale, DateTime time, double y)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_13", 
            "text": "A drawing object of the type IGannFan (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_13", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar on which the Gann fan should be drawn    time  Date/time at which the Gann fan should start    y  y-value for the Gann fan", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_13", 
            "text": "// Shows a Gann fan at the low of the bar from 10 periods ago\nDrawGannFan( MyGannFan , true, 10, Low[10]);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawline", 
            "text": "", 
            "title": "DrawLine()"
        }, 
        {
            "location": "/drawing_objects/#description_14", 
            "text": "DrawLine() draws a (trend) line.  See [ DrawHorizontalLine() ], [ DrawVerticalLine() ], [ DrawExtendedLine() ], [ DrawRay() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_14", 
            "text": "DrawLine(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawLine(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, DashStyle dashStyle, int width)\nDrawLine(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_14", 
            "text": "A drawing object of the type ITrendLine (interface).", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_14", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Number of bars ago for the starting point    startTime  Date/time for the starting point    startY  y-value for the starting point    endBarsAgo  Number of bars ago for the end point    endTime  Date/time for the end point    endY  y-value for the end point    color  Color of the drawing object    dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    width  Line strength in points", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_14", 
            "text": "// Draws a line\nDrawLine( MyLine , false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawhorizontalline", 
            "text": "", 
            "title": "DrawHorizontalLine()"
        }, 
        {
            "location": "/drawing_objects/#description_15", 
            "text": "DrawHorizontalLine() draws a horizontal line in the chart.  See [ DrawLine() ], [ DrawVerticalLine() ], [ DrawExtendedLine() ], [ DrawRay() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_15", 
            "text": "DrawHorizontalLine(string tag, double y, Color color)\nDrawHorizontalLine(string tag, bool autoScale, double y, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_15", 
            "text": "A drawing object of the type IHorizontalLine (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_15", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    y  Any double value of your choice    color  Line color    dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    width  Line strength", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_15", 
            "text": "// Draws a horizontal line at y=10\nDrawHorizontalLine( MyHorizontalLine , 10, Color.Black);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawray", 
            "text": "", 
            "title": "DrawRay()"
        }, 
        {
            "location": "/drawing_objects/#description_16", 
            "text": "DrawRay() draws a (trend) line and extends it to infinity.  See [ DrawLine() ], [ DrawHorizontalLine() ], [ DrawVerticalLine() ], [ DrawExtendedLine() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_16", 
            "text": "DrawRay(string tag, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, Color color)\nDrawRay(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, Color color, DashStyle dashStyle, int width)\nDrawRay(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_16", 
            "text": "A drawing object of the type IRay (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_16", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    anchor1BarsAgo  Number of bars ago for anchor point 1    anchor1Time  Date/time for anchor point 1    anchor1Y  y-value for anchor point 1    anchor2BarsAgo  Number of bars ago for anchor point 2    anchor2Time  Date/time for anchor point 2    anchor2Y  y-value for anchor point 2    color  Color of the drawing object    dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    width  Line strength", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_16", 
            "text": "// Draws a line from the bar from 10 periods ago to the current bar (x-axis)\n// --  line is extended to the right\n// from y=3 to y=7\nDrawRay( MyRay , 10, 3, 0, 7, Color.Green);\n// Draws a line from the current bar to the bar from 10 periods ago\n// --  line is extended to the left\n// from y=3 to y=7\nDrawRay( MyRay , 0, 3, 10, 7, Color.Green);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawrectangle", 
            "text": "", 
            "title": "DrawRectangle()"
        }, 
        {
            "location": "/drawing_objects/#description_17", 
            "text": "DrawRectangle() draws a rectangle.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_17", 
            "text": "DrawRectangle(string tag, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color)\nDrawRectangle(string tag, bool autoScale, int startBarsAgo, double startY, int endBarsAgo, double endY, Color color, Color areaColor, int areaOpacity)\nDrawRectangle(string tag, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_17", 
            "text": "A drawing object of the type IRectangle (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_17", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Sets the preceding bar at which the one corner of the rectangle should be located (0 = current bar)    startTime  Date/time at which the start of the one rectangle corner should be located    startY  y-value at which the one corner of the rectangle should be located    endBarsAgo  Sets the preceding bar at which the second corner of the rectangle should be located (0 = current bar)    endTime  Date/time of the second rectangle corner    endY  y-value of the second rectangle corner    color  Color of the drawing object    areaColor  Fill color of the drawing object    areaOpacity  Transparency of the fill color    Value between 0 and 10     0 = completely transparent     10 = completely opaque", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_17", 
            "text": "// Draws a green rectangle from the low of 10 periods ago to the high of 5 periods ago\n// with a fill color of pale green and a transparency of 2\nDrawRectangle( MyRect , true, 10, Low[10], 5, High[5], Color.PaleGreen, Color.PaleGreen, 2);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawregion", 
            "text": "", 
            "title": "DrawRegion()"
        }, 
        {
            "location": "/drawing_objects/#description_18", 
            "text": "DrawRegion() fills a specific area on a chart.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_18", 
            "text": "DrawRegion(string tag, int startBarsAgo, int endBarsAgo, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nDrawRegion(string tag, int startBarsAgo, int endBarsAgo, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)\nDrawRegion(string tag, DateTime startTime, DateTime endTime, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nDrawRegion(string tag, DateTime startTime, DateTime endTime, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_18", 
            "text": "A drawing object of the type IRegion (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_18", 
            "text": "tag  A clearly identifiable name for the drawing object    startBarsAgo  Sets the preceding bar at which the drawing should begin (0 = current bar)    startTime  Start time for the drawing    endBarsAgo  Sets the preceding bar at which the drawing should end (0 = current bar)    endTime  End time for the drawing    series1, series2  Every data series, for example an indicator, close, high, low and so on.                     The respective value of the data series for the current bar is used as a y-value.  |  | y                | Any double value                                                                  |\n| outlineColor     | Color for the border                                                              |\n| areaColor        | Fill color for the area                                                           |\n| areaOpacity      | Transparency of the fill color                                                   \n                    Value between 0 and 10                                                            \n                    0 = completely transparent                                                        \n                    10 = completely opaque                                                             |", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_18", 
            "text": "// Fills the area between the upper and lower Bollinger Bands\nDrawRegion( MyRegion , CurrentBar, 0, Bollinger(2, 14).Upper, Bollinger(2, 14).Lower, Color.Empty, Color.Lime, 100);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawregressionchannel", 
            "text": "", 
            "title": "DrawRegressionChannel()"
        }, 
        {
            "location": "/drawing_objects/#description_19", 
            "text": "DrawRegressionChannel() draws a regression channel.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_19", 
            "text": "DrawRegressionChannel(string tag, int startBarsAgo, int endBarsAgo, Color color)\nDrawRegressionChannel(string tag, bool autoScale, int startBarsAgo, int endBarsAgo, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)\nDrawRegressionChannel(string tag, bool autoScale, DateTime startTime, DateTime endTime, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_19", 
            "text": "A drawing object of the type IRegressionChannel (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_19", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    startBarsAgo  Sets the preceding bar at which the regression channel should start (0 = current bar)    startTime  Start time for the regression channel    endBarsAgo  Sets the preceding bar at which the regression channel should end (0 = current bar)    endTime  End time for the regression channel    color  Color of the drawing object    upperDashStyle,     middleDashStyle,     lowerDashStyle     dashStyle  Line style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:     using System.Drawing.Drawing2D;    upperColor,     middleColor,     lowerColor  Line color    upperWidth,     middleWidth,     lowerWidth  Line strength", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_19", 
            "text": "// Draws a regression channel from the low of the bar from 10 days ago to the high of the bar from 5 days ago.\nDrawRegressionChannel( MyRegChannel , 10, 0, Color.Black);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawsquare", 
            "text": "", 
            "title": "DrawSquare()"
        }, 
        {
            "location": "/drawing_objects/#description_20", 
            "text": "DrawSquare() draws a square:   See [ DrawArrowUp() ], [ DrawArrowDown() ], [ DrawDiamond() ], [ DrawDot() ], [ DrawTriangleUp() ], [ DrawTriangleDown() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_20", 
            "text": "DrawSqare(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawSqare(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_20", 
            "text": "A drawing object of the type ISquare (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_20", 
            "text": "Tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar at which the square should be drawn (0 = current bar)    Time  Date/time of the bar at which the square should be drawn    Y  y-value for the square    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_20", 
            "text": "// Draws a dark red square at the current bar 10 ticks above the high\nDrawSquare( MySquare , true, 0, High[0] + 10*TickSize, Color.DarkRed);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawtext", 
            "text": "", 
            "title": "DrawText()"
        }, 
        {
            "location": "/drawing_objects/#description_21", 
            "text": "DrawText() writes whatever text you want onto the chart.  See [ DrawTextFixed() ],  PlotMethod .", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_21", 
            "text": "DrawText(string tag, string text, int barsAgo, double y, Color color)\nDrawText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity)\nDrawText(string tag, bool autoScale, string text, DateTime x, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity)\nDrawText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment HAlign, VerticalAlignment VAlign, Color outlineColor, Color areaColor, int areaOpacity)\nDrawText(string tag, bool autoScale, string text, DateTime x, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment HAlign, VerticalAlignment VAlign, Color outlineColor, Color areaColor, int areaOpacity)  Important note: \nWhen using signatures that contain horizontal alignment and vertical alignment, you need to add the following lines:  using System.Windows.Forms;\nusing System.Windows.Forms.VisualStyles;", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_21", 
            "text": "A drawing object of the type IText (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_21", 
            "text": "Tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    Text  Text to be displayed (may contain escape sequences)    barsAgo  Sets how many bars ago the text should be displayed    Time  Date/time of the bar at which the text should begin    Y  y-value at which the text should be written    yPixelOffset  Vertical offset of the text; positive numbers move it up, and negative numbers move it down    textColor  Text color    Font  Font    Alignment  Possible values are:    - StringAlignment.Center     - StringAlignment.Far     - StringAlignment.Near     HAlign  Possible values are:    - HorizontalAlign.Left     - HorizontalAlign.Center     - HorizontalAlign.Right     VAlign  Possible values are:    - VerticalAlign.Top     - VerticalAlign.Center     - VerticalAlign.Bottom     outlineColor  Border color around the text    For no border, select Color.Empty     areaColor  Fill color for the text box    areaOpacity  Transparency of the fill color    Value between 0 and 10     0 = completely transparent     10 = completely opaque", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_21", 
            "text": "// writes text at y=3.0\nDrawText( MyText ,  This is sample text. , 10, 3, Color.Black);\n// writes red text in the font Arial 7\nDrawText( MyText , false,  This is sample text. , Time[0], Close[0]+50*TickSize, 0,\nColor.Red, new Font( Arial ,7), StringAlignment.Center, Color.Blue, Color.DarkOliveGreen, 10);  This leads to the following result:   DrawText( MyTag ,true, Text ,1,\n// barsAgo\nHigh[1], // y\n10, // yPixelOffset\nColor.Blue, // Text color\nnew Font( Arial , 10, FontStyle.Bold),\nStringAlignment.Center,\nHorizontalAlignment.Center,\nVerticalAlignment.Bottom,\nColor.Red, // Outline color\nColor.Yellow, // Fill color\n100); // Opacity", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawtextfixed", 
            "text": "", 
            "title": "DrawTextFixed()"
        }, 
        {
            "location": "/drawing_objects/#description_22", 
            "text": "DrawTextFixed() writes text into one of 5 predetermined locations on the chart.  See [ DrawText() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_22", 
            "text": "DrawTextFixed(string tag, string text, TextPosition textPosition)\nDrawTextFixed(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor, int areaOpacity)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_22", 
            "text": "A drawing object of the type ITextFixed (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_22", 
            "text": "tag  A clearly identifiable name for the drawing object    text  The text to be displayed    TextPosition  TextPosition.BottomLeft    TextPosition.BottomRight     TextPosition.Center     TextPosition.TopLeft     TextPosition.TopRight     textColor  Text color    font  Font    outlineColor  Color for the border around the text. For no border color, use Color.Empty    areaColor  Fill color of the text box    For no fill color, use Color.Empty     areaOpacity  Transparency of the fill color    Value between 0 and 10     0 = completely transparent     10 = completely opaque", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_22", 
            "text": "// Writes text into the middle of the chart\nDrawTextFixed( MyText ,  This is sample text. , TextPosition.Center);\n// Writes red text with a blue border into the middle of the chart\nDrawTextFixed( MyText ,  This is sample text. , TextPosition.Center,\nColor.Red, new Font( Arial ,35), Color.Blue, Color.Empty, 10);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawtrendchannel", 
            "text": "", 
            "title": "DrawTrendChannel()"
        }, 
        {
            "location": "/drawing_objects/#description_23", 
            "text": "DrawTrendChannel() draws a trend channel.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_23", 
            "text": "DrawTrendChannel(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y)\nDrawTrendChannel(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_23", 
            "text": "A drawing object of the type ITrendChannel (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_23", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    anchor1BarsAgo  Number of bars ago for anchor point 1 (x-axis)    anchor1Time  Date/time for anchor point 1 (x-axis)    anchor1Y  y-value for anchor point 1    anchor2BarsAgo  Number of bars ago for anchor point 2 (x-axis)    anchor2Time  Date/time for anchor point 2 (x-axis)    anchor2Y  y-value for anchor point 2    anchor3BarsAgo  Number of bars ago for anchor point 3 (x-axis)    anchor3Time  Date/time for anchor point 3 (x-axis)    anchor3Y  y-value for anchor point 3", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_23", 
            "text": "// Draws a trend channel\nDrawTrendChannel( MyTrendChannel , true, 10, Low[10], 0, High[0], 10, High[10] + 5 * TickSize);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawtriangle", 
            "text": "", 
            "title": "DrawTriangle()"
        }, 
        {
            "location": "/drawing_objects/#description_24", 
            "text": "DrawTriangle() draws a triangle.", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_24", 
            "text": "DrawTriangle(string tag, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y, Color color)\nDrawTriangle(string tag, bool autoScale, int anchor1BarsAgo, double anchor1Y, int anchor2BarsAgo, double anchor2Y, int anchor3BarsAgo, double anchor3Y, Color color, Color areaColor, int areaOpacity)\nDrawTriangle(string tag, bool autoScale, DateTime anchor1Time, double anchor1Y, DateTime anchor2Time, double anchor2Y, DateTime anchor3Time, double anchor3Y, Color color, Color areaColor, int areaOpacity)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_24", 
            "text": "A drawing object of the type ITriangle (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_24", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    anchor1BarsAgo  Number of bars ago for anchor point 1 (x-axis)    anchor1Time  Date/time for anchor point 1 (x-axis)    anchor1Y  y-value for anchor point 1    anchor2BarsAgo  Number of bars ago for anchor point 2 (x-axis)    anchor2Time  Date/time for anchor point 2 (x-axis)    anchor2Y  y-value for anchor point 2    anchor3BarsAgo  Number of bars ago for anchor point 3 (x-axis)    anchor3Time  Date/time for anchor point 3 (x-axis)    anchor3Y  y-value for anchor point 3    color  Color of the drawing object    areaColor  Fill color of the drawing object    areaOpacity  Transparency of the fill color    Value between 0 and 10     0 = completely transparent     10 = completely opaque", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_24", 
            "text": "// Draws a green triangle\nDrawTriangle( tag1 , 4, Low[4], 3, High[3], 1, Low[1], Color.Green);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawtriangleup", 
            "text": "", 
            "title": "DrawTriangleUp()"
        }, 
        {
            "location": "/drawing_objects/#description_25", 
            "text": "DrawTriangleUp() draws a small upwards-pointing triangle:   See [ DrawArrowUp() ], [ DrawArrowDown() ], [ DrawDiamond() ], [ DrawDot() ], [ DrawSquare() ], [ DrawTriangleDown() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_25", 
            "text": "DrawTriangleUp(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawTriangleUp(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_25", 
            "text": "A drawing object of the type ITriangleUp (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_25", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets how many bars ago the triangle should be drawn    time  Date/time for the bar at which the triangle should be drawn    y  y-value at which the triangle should be drawn    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_25", 
            "text": "// Draws a small light green triangle at the current bar 10 ticks below the low\nDrawTriangleUp( MyTriangleUp , true, 0, Low[0] - 10*TickSize, Color.LightGreen);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawtriangledown", 
            "text": "", 
            "title": "DrawTriangleDown()"
        }, 
        {
            "location": "/drawing_objects/#description_26", 
            "text": "DrawTriangleDown() draws a small downwards-pointing triangle:   See [ DrawArrowUp() ], [ DrawArrowDown() ], [ DrawDiamond() ], [ DrawDot() ], [ DrawSquare() ], [ DrawTriangleUp() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_26", 
            "text": "DrawTriangleDown(string tag, bool autoScale, int barsAgo, double y, Color color)\nDrawTriangleDown(string tag, bool autoScale, DateTime time, double y, Color color)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_26", 
            "text": "A drawing object of the type ITriangleDown (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_26", 
            "text": "tag  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets how many bars ago the triangle should be drawn    time  Date/time for the bar at which the triangle should be drawn    Y  y-value at which the triangle should be drawn    color  Color of the drawing object", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_26", 
            "text": "// Draws a small red triangle at the current bar 10 ticks above the high\nDrawTriangleDown( MyTriangleDown , true, 0, High[0] + 10*TickSize, Color.Red);", 
            "title": "Example"
        }, 
        {
            "location": "/drawing_objects/#drawverticalline", 
            "text": "", 
            "title": "DrawVerticalLine()"
        }, 
        {
            "location": "/drawing_objects/#description_27", 
            "text": "DrawVerticalLine() draws a vertical line in the chart.  See [ DrawLine() ], [ DrawHorizontalLine() ], [ DrawExtendedLine() ], [ DrawRay() ].", 
            "title": "Description"
        }, 
        {
            "location": "/drawing_objects/#usage_27", 
            "text": "DrawVerticalLine(string tag, int barsAgo, Color color)\nDrawVerticalLine(string tag, int barsAgo, Color color, DashStyle dashStyle, int width)\nDrawVerticalLine(string tag, DateTime time, Color color, DashStyle dashStyle, int width)", 
            "title": "Usage"
        }, 
        {
            "location": "/drawing_objects/#return-value_27", 
            "text": "A drawing object of the type IVerticalLine (interface)", 
            "title": "Return Value"
        }, 
        {
            "location": "/drawing_objects/#parameter_27", 
            "text": "tag  A clearly identifiable name for the drawing object    barsAgo  Sets how many bars ago the vertical line should be drawn (0 = current bar)    time  Date/time of the bar at which the vertical line should be drawn    color  Line color    dashStyle  Line style              DashStyle.Dash                                                              \n         DashStyle.DashDot                                                           \n         DashStyle.DashDotDot                                                        \n         DashStyle.Dot                                                               \n         DashStyle.Solid\n\n         You may have to integrate:                                                  \n         using System.Drawing.Drawing2D;                                             |  | width     | Line strength                                                              |", 
            "title": "Parameter"
        }, 
        {
            "location": "/drawing_objects/#example_27", 
            "text": "// Draws a vertical line at the bar from 10 periods ago\nDrawVerticalLine( MyVerticalLine , 10, Color.Black);", 
            "title": "Example"
        }, 
        {
            "location": "/hints_and_advice/", 
            "text": "Hints \n Advice\n\n\nBar Numbering Within the Chart\n\n\nThe following example demonstrates the usage of the plot method and the properties of the [\nChartControl\n] object.\n\n\n\n\nNote:\n\nFor demonstration purposes, each time Paint is called up within the \u201cBar Numbering\u201d section, \u201cNew\u201d and \u201cDispose\u201d will also be called up multiple times.\nFrom a performance point of view, this solution can be better implemented by using constant variable declarations and calling up \u201cDispose\u201d within the OnTermination statement.\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n[Description(\nPlotSample\n)]\npublic class PlotSample : UserIndicator\n{\nPen pen = new Pen(Color.Blue);\nStringFormat sf = new StringFormat();\nSolidBrush brush = new SolidBrush(Color.Black);\nFont font = new Font(\nArial\n, 10, FontStyle.Bold);\nprotected override void Initialize()\n{\nOverlay = true;\n}\nprotected override void OnTermination()\n{\nif (pen!=null) pen.Dispose();\nif (sf!=null) sf.Dispose();\nif (brush!=null) brush.Dispose();\nif (font!=null) font.Dispose();\n}\nprotected override void OnBarUpdate()\n{}\npublic override void Plot(Graphics g, Rectangle r, double min, double max)\n{\nif (Bars == null || ChartControl == null) return;\n// Properties of ChartControl\nstring s;\ns = \nbounds: \n+r.X.ToString()+\n \n+r.Y.ToString()+\n \n+r.Height.ToString()+\n \n+r.Width.ToString();\ng.DrawString(s, font, brush, 10, 50, sf);\ns = \nmin: \n+Instrument.Round2TickSize(min).ToString()+\n max: \n+Instrument.Round2TickSize(max).ToString();\ng.DrawString(s, font, brush, 10, 70, sf);\ns = \nBarSpace: \n+ChartControl.BarSpace.ToString()+\n BarWidth: \n+ChartControl.BarWidth.ToString();\ng.DrawString(s, font, brush, 10, 90, sf);\ns = \nBars.Count: \n+Bars.Count.ToString();\ng.DrawString(s, font, brush, 10, 110, sf);\ns = \nBarsPainted: \n+ChartControl.BarsPainted.ToString() + \n FirstBarPainted: \n+ChartControl.FirstBarPainted.ToString() + \n LastBarPainted: \n+ChartControl.LastBarPainted.ToString();\ng.DrawString(s, font, brush, 10, 130, sf);\ns = \nBarsVisible: \n+ChartControl.BarsVisible.ToString() + \n FirstBarVisible: \n+ChartControl.FirstBarVisible.ToString() + \n LastBarVisible: \n+ChartControl.LastBarVisible.ToString();\ng.DrawString(s, font, brush, 10, 150, sf);\n// Bar numbering\nStringFormat _sf = new StringFormat();\nSolidBrush _brush = new SolidBrush(Color.Blue);\nFont _font = new Font(\nArial\n, 8);\nSizeF _stringSize = new SizeF();\n_sf.Alignment = StringAlignment.Center;\nfor (int i=ChartControl.FirstBarVisible; i\n=ChartControl.LastBarVisible; i++)\n{\nstring text = i.ToString();\n_stringSize = g.MeasureString(text, _font);\nint x = ChartControl.GetXByBarIdx(Bars, i);\nint y = ChartControl.GetYByValue(this, High[Abs2Ago(i)] + 3*TickSize) - (int) _stringSize.Height;\ng.DrawString(text, _font, _brush, x, y, _sf);\n}\n_sf.Dispose();\n_brush.Dispose();\n_font.Dispose();\n}\nprivate int Abs2Ago(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnBarClose?1:0));\n}\n}\n}\n\n\n\n\nCustom Chart Background Image\n\n\nThe plot method allows you to add a background image to the chart.\nThe following example uses an image with the JPG format located in the main directory on the hard drive (C:).\n\n\nusing System;\nusing System.Drawing;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\npublic class BackgroundPicture : UserIndicator\n{\nImage img;\nprotected override void OnStartUp()\n{\ntry { img = Image.FromFile(\nC:\\\\\\\\MyCar.jpg\n); } catch {}\n}\npublic override void Plot(Graphics g, Rectangle r, double min, double max)\n{\nif (ChartControl == null || img == null) return;\ng.DrawImage(img,r);\n}\n}\n}\n\n\n\n\n\n\nFile Selection in the Properties\n\n\nTo enable file selection within the properties dialog of an indicator, you will need a type converter.\nThe following example displays how a selection of WAV files can be programmed for an alert:\n\n\nusing System;\nusing System.IO;\nusing System.Collections;\nusing System.ComponentModel;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\nFile Picker Example.\n)]\npublic class FilePicker : UserIndicator\n{\nprivate string _soundFile = \nAlert4.wav\n;\nprivate static string _dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @\n\\\\AgenaTrader\\\\Sounds\\\\\n;\ninternal class MyConverter : TypeConverter\n{\npublic override bool GetStandardValuesSupported(ITypeDescriptorContext context)\n{\nreturn true;\n}\npublic override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n{\nif (context == null) return null;\nArrayList list = new ArrayList();\nDirectoryInfo dir = new DirectoryInfo(_dir);\nFileInfo[] files = dir.GetFiles(\n*.wav\n);\nforeach (FileInfo file in files) list.Add(file.Name);\nreturn new TypeConverter.StandardValuesCollection(list);\n}\n}\nprotected override void OnStartUp()\n{\nPlaySound(_soundFile);\n}\n[Description(\nChoose file to play.\n)]\n[Category (\nSound\n)]\n[TypeConverter(typeof(MyConverter))]\npublic string SoundFile\n{\nget { return _soundFile; }\nset { _soundFile = value; }\n}\n}\n}\n\n\n\n\nFormatting of Numbers\n\n\nFormatting of Numbers\n\n\nGeneral information on formatting in C#\n\n\ndouble d = 123.4567890;\nPrint(\nWithout formatting : \n + d.ToString()); // 123.456789\nPrint(\nAs a currency : \n + d.ToString(\nC\n)); // 123.46 \u20ac\nPrint(\nExponential : \n + d.ToString(\nE\n)); // 1.234568E+002\nPrint(\nAs a fixed point : \n + d.ToString(\nF2\n)); // 123.46\nPrint(\nGeneral : \n + d.ToString(\nG\n)); // 123.456789\nPrint(\nAs a percentage : \n + d.ToString(\nP0\n)); // 12.346%\nPrint(\nTo 2 decimal places : \n + d.ToString(\nN2\n)); // 123.45\nPrint(\nTo 3 decimal places : \n + d.ToString(\nN3\n)); // 123.457\nPrint(\nTo 4 decimal places : \n + d.ToString(\nN4\n)); // 123.4568\n\n\n\n\nUseful Functions\n\n\nReturns the currency symbol for the current instrument:\n\n\npublic string getWaehrungssymbol() {\nstring s = \n;\nswitch (Instrument.Currency) {\ncase Currencies.USD : s = \n$\n; break;\ncase Currencies.EUR : s = \n\u20ac\n; break;\ncase Currencies.CHF : s = \nCHF\n; break;\ncase Currencies.GBP : s = ((char)163).ToString(); break;\ncase Currencies.JPY : s = ((char)165).ToString(); break;\n}\nreturn s;\n}\n\n\n\n\nConverts a number into a currency with a thousands separator and 2 decimal places.\nThe block separation per 1000 units can be set in \u201cCulture\u201d.\n\n\npublic string getWaehrungOhneSymbol(double d) {\n// Separate 1000s and two decimal points\nreturn d.ToString(\n\\#,\\#\\#0.00\n);\n}\n\n\n\n\nConverts a number into a currency with a thousands separator and 2 decimal places and a currency symbol:\n\n\npublic string getWaehrungMitSymbol(double d) {\n// Dollar is prefixed, everything else is added afterwards\nstring s=getWaehrungOhneSymbol(d);\nstring w=getWaehrungssymbol();\nif (w==\n$\n) s=w+\n \n+s; else s+=\n \n+w;\nreturn s;\n}\n\n\n\n\nConverts a number into a currency with a thousands separator and 2 decimal places as well as a currency symbol, and fills up to a fixed length with empty spaces.\nThe function is great for outputting values into a table.\n\n\npublic string getWaehrungMitSymbol(double d, int Laenge) {\n// Leading spaces until a fixed length has been reached\nstring s=getWaehrungMitSymbol(d);\nfor (int i=s.Length; i\nLaenge; i++) s=\n \n+s;\nreturn s;\n}\n\n\n\n\nConverts a number into a percentage. Nothing is calculated, only formatted.\nLeading plus sign, a decimal place and a percent sign.\n\n\npublic string getPercent(double d) {\nd=Math.Round(d, 1);\nstring s=(d\n0)?\n+\n:\n; // Leading plus sign\nreturn s+d.ToString(\n0.0\n)+\n%\n;\n}\n\n\n\n\nFormats the market price depending on the number of decimal places to which the currency is notated.\nThis includes a thousands separator and fixed length, meaning that zeros are filled on the right hand side.\nBecause Culture Info is being used, you must integrate the NameSpace \nSystem.Globalization\n.\n\n\npublic string format(double d)\n{\nint tickLength = 0;\n// ticksize.ToString() is for example 6J = \n1E-06\n and length is then 5\n// and not 8 as it should be with \n0.000001\n)\nif (TickSize \n 1) tickLength = TickSize.ToString(\n0.\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\n).Length - 2;\nstring f = \n{0:n\n+tickLength.ToString()+\n}\n;\nreturn string.Format(CultureInfo.CurrentCulture, f, d);\n}\n\n\n\n\nExample\n\n\ndouble profit = 1234.567890;\nPrint(\ngetCurrencyWithoutSymbol \n: + getWaehrungOhneSymbol(Gewinn)); // 1234.57\nPrint(\ngetCurrencyWithSymbol :\n + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\nPrint(\ngetCurrencyWithSymbol :\n + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\ndouble percentage profit = 12.3456789;\nPrint(\ngetPercent :\n + getPercent(ProzGewinn)); // +12.3%\ndouble price = 123.4567;\nPrint(\ngetPrice :\n + getKurs(Kurs)); // 123.46\n\n\n\n\nIndex Conversion\n\n\nThere are two types of indexing in AgenaTrader.\n\n\n\n\n\n\nThe bars are numbered from youngest to oldest.\nThis type is used in the OnBarUpdate() method.\nThe last bar has an index of 0, while the oldest bar has the index Bars.Count-1.\n\n\n\n\n\n\nThe bars are numbered from oldest to youngest.\nThis type is most commonly used in the Plot() method in \u201cfor\u201d loops.\nThe oldest Bbar receives an index of 0, while the youngest bar has the index Bars.Count-1.\nThe following function can be used to recalculate the index types:\n\n\n\n\n\n\nprivate int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnBarClose?1:0));\n}\n\n\n\n\nOverwriting Indicator Names\n\n\nThe name of an indicator (or a strategy) is displayed within the properties dialog and at the top edge of the chart. Use the ToString() property to overwrite it.\n\n\npublic override string ToString()\n{\nreturn \nMy Name\n;\n}\n\n\n\n\nRectangle with Rounded Corners\n\n\nBy using the graphics methods, you can create interesting forms and place them onto the chart.\nOne example of this is the RoundedRectangle class, which is a rectangle with rounded corners.\n\n\n\n\nExample Code:\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\nDemo of RoundedRectangles\n)]\npublic class DemoRoundedRectangle : UserIndicator\n{\nprotected override void Initialize()\n{\nOverlay = true;\n}\nprotected override void OnBarUpdate() {}\npublic override void Plot(Graphics g, Rectangle r, double min, double max)\n{\nGraphicsPath path;\n// draws a rectangle with rounded corners\npath = RoundedRectangle.Create(30, 50, 100, 100,8);\ng.DrawPath(Pens.Black, path);\n// draws a filled rectangle with a radius of 20\n// only round the upper left and lower right corner\npath = RoundedRectangle.Create(160, 50, 100, 100, 20,\nRoundedRectangle.RectangleCorners.TopLeft|RoundedRectangle.RectangleCorners.BottomRight);\ng.FillPath(Brushes.Orange, path);\n}\n}\npublic abstract class RoundedRectangle\n{\npublic enum RectangleCorners\n{\nNone = 0, TopLeft = 1, TopRight = 2, BottomLeft = 4, BottomRight = 8,\nAll = TopLeft | TopRight | BottomLeft | BottomRight\n}\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius, RectangleCorners corners)\n{\nRectangle r = new Rectangle(x,y,width, height);\nRectangle tlc = new Rectangle(r.Left, r.Top,Math.Min(2 * radius, r.Width),Math.Min(2 * radius, r.Height));\nRectangle trc = tlc;\ntrc.X = r.Right - 2 * radius;\nRectangle blc = tlc;\nblc.Y = r.Bottom - 2 * radius;\nRectangle brc = blc;\nbrc.X = r.Right - 2 * radius;\nPoint[] n = new Point[]\n{\nnew Point(tlc.Left, tlc.Bottom), tlc.Location,\nnew Point(tlc.Right, tlc.Top), trc.Location,\nnew Point(trc.Right, trc.Top),\nnew Point(trc.Right, trc.Bottom),\nnew Point(brc.Right, brc.Top),\nnew Point(brc.Right, brc.Bottom),\nnew Point(brc.Left, brc.Bottom),\nnew Point(blc.Right, blc.Bottom),\nnew Point(blc.Left, blc.Bottom), blc.Location\n};\nGraphicsPath p = new GraphicsPath();\np.StartFigure();\n//Top left corner\nif ((RectangleCorners.TopLeft \n corners) == RectangleCorners.TopLeft)\np.AddArc(tlc, 180, 90);\nelse\np.AddLines(new Point[] { n[0], n[1], n[2] });\n//Top edge\np.AddLine(n[2], n[3]);\n//Top right corner\nif ((RectangleCorners.TopRight \n corners) == RectangleCorners.TopRight)\np.AddArc(trc, 270, 90);\nelse\np.AddLines(new Point[] { n[3], n[4], n[5] });\n//Right edge\np.AddLine(n[5], n[6]);\n//Bottom right corner\nif ((RectangleCorners.BottomRight \n corners) == RectangleCorners.BottomRight)\np.AddArc(brc, 0, 90);\nelse\np.AddLines(new Point[] { n[6], n[7], n[8] });\n//Bottom edge\np.AddLine(n[8], n[9]);\n//Bottom left corner\nif ((RectangleCorners.BottomLeft \n corners) == RectangleCorners.BottomLeft)\np.AddArc(blc, 90, 90);\nelse\np.AddLines(new Point[] { n[9], n[10], n[11] });\n//Left edge\np.AddLine(n[11], n[0]);\np.CloseFigure();\nreturn p;\n}\npublic static GraphicsPath Create(Rectangle rect, int radius, RectangleCorners c)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius), c); }\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius)\n{ return Create(x, y, width, height, Math.Max(1,radius), RectangleCorners.All); }\npublic static GraphicsPath Create(Rectangle rect, int radius)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius)); }\npublic static GraphicsPath Create(int x, int y, int width, int height)\n{ return Create(x, y, width, height, 8); }\npublic static GraphicsPath Create(Rectangle rect)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height); }\n}\n}", 
            "title": "Hints and advice"
        }, 
        {
            "location": "/hints_and_advice/#hints-advice", 
            "text": "", 
            "title": "Hints &amp; Advice"
        }, 
        {
            "location": "/hints_and_advice/#bar-numbering-within-the-chart", 
            "text": "The following example demonstrates the usage of the plot method and the properties of the [ ChartControl ] object.   Note: \nFor demonstration purposes, each time Paint is called up within the \u201cBar Numbering\u201d section, \u201cNew\u201d and \u201cDispose\u201d will also be called up multiple times.\nFrom a performance point of view, this solution can be better implemented by using constant variable declarations and calling up \u201cDispose\u201d within the OnTermination statement.  using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n[Description( PlotSample )]\npublic class PlotSample : UserIndicator\n{\nPen pen = new Pen(Color.Blue);\nStringFormat sf = new StringFormat();\nSolidBrush brush = new SolidBrush(Color.Black);\nFont font = new Font( Arial , 10, FontStyle.Bold);\nprotected override void Initialize()\n{\nOverlay = true;\n}\nprotected override void OnTermination()\n{\nif (pen!=null) pen.Dispose();\nif (sf!=null) sf.Dispose();\nif (brush!=null) brush.Dispose();\nif (font!=null) font.Dispose();\n}\nprotected override void OnBarUpdate()\n{}\npublic override void Plot(Graphics g, Rectangle r, double min, double max)\n{\nif (Bars == null || ChartControl == null) return;\n// Properties of ChartControl\nstring s;\ns =  bounds:  +r.X.ToString()+   +r.Y.ToString()+   +r.Height.ToString()+   +r.Width.ToString();\ng.DrawString(s, font, brush, 10, 50, sf);\ns =  min:  +Instrument.Round2TickSize(min).ToString()+  max:  +Instrument.Round2TickSize(max).ToString();\ng.DrawString(s, font, brush, 10, 70, sf);\ns =  BarSpace:  +ChartControl.BarSpace.ToString()+  BarWidth:  +ChartControl.BarWidth.ToString();\ng.DrawString(s, font, brush, 10, 90, sf);\ns =  Bars.Count:  +Bars.Count.ToString();\ng.DrawString(s, font, brush, 10, 110, sf);\ns =  BarsPainted:  +ChartControl.BarsPainted.ToString() +   FirstBarPainted:  +ChartControl.FirstBarPainted.ToString() +   LastBarPainted:  +ChartControl.LastBarPainted.ToString();\ng.DrawString(s, font, brush, 10, 130, sf);\ns =  BarsVisible:  +ChartControl.BarsVisible.ToString() +   FirstBarVisible:  +ChartControl.FirstBarVisible.ToString() +   LastBarVisible:  +ChartControl.LastBarVisible.ToString();\ng.DrawString(s, font, brush, 10, 150, sf);\n// Bar numbering\nStringFormat _sf = new StringFormat();\nSolidBrush _brush = new SolidBrush(Color.Blue);\nFont _font = new Font( Arial , 8);\nSizeF _stringSize = new SizeF();\n_sf.Alignment = StringAlignment.Center;\nfor (int i=ChartControl.FirstBarVisible; i =ChartControl.LastBarVisible; i++)\n{\nstring text = i.ToString();\n_stringSize = g.MeasureString(text, _font);\nint x = ChartControl.GetXByBarIdx(Bars, i);\nint y = ChartControl.GetYByValue(this, High[Abs2Ago(i)] + 3*TickSize) - (int) _stringSize.Height;\ng.DrawString(text, _font, _brush, x, y, _sf);\n}\n_sf.Dispose();\n_brush.Dispose();\n_font.Dispose();\n}\nprivate int Abs2Ago(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnBarClose?1:0));\n}\n}\n}", 
            "title": "Bar Numbering Within the Chart"
        }, 
        {
            "location": "/hints_and_advice/#custom-chart-background-image", 
            "text": "The plot method allows you to add a background image to the chart.\nThe following example uses an image with the JPG format located in the main directory on the hard drive (C:).  using System;\nusing System.Drawing;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\npublic class BackgroundPicture : UserIndicator\n{\nImage img;\nprotected override void OnStartUp()\n{\ntry { img = Image.FromFile( C:\\\\\\\\MyCar.jpg ); } catch {}\n}\npublic override void Plot(Graphics g, Rectangle r, double min, double max)\n{\nif (ChartControl == null || img == null) return;\ng.DrawImage(img,r);\n}\n}\n}", 
            "title": "Custom Chart Background Image"
        }, 
        {
            "location": "/hints_and_advice/#file-selection-in-the-properties", 
            "text": "To enable file selection within the properties dialog of an indicator, you will need a type converter.\nThe following example displays how a selection of WAV files can be programmed for an alert:  using System;\nusing System.IO;\nusing System.Collections;\nusing System.ComponentModel;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description( File Picker Example. )]\npublic class FilePicker : UserIndicator\n{\nprivate string _soundFile =  Alert4.wav ;\nprivate static string _dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @ \\\\AgenaTrader\\\\Sounds\\\\ ;\ninternal class MyConverter : TypeConverter\n{\npublic override bool GetStandardValuesSupported(ITypeDescriptorContext context)\n{\nreturn true;\n}\npublic override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n{\nif (context == null) return null;\nArrayList list = new ArrayList();\nDirectoryInfo dir = new DirectoryInfo(_dir);\nFileInfo[] files = dir.GetFiles( *.wav );\nforeach (FileInfo file in files) list.Add(file.Name);\nreturn new TypeConverter.StandardValuesCollection(list);\n}\n}\nprotected override void OnStartUp()\n{\nPlaySound(_soundFile);\n}\n[Description( Choose file to play. )]\n[Category ( Sound )]\n[TypeConverter(typeof(MyConverter))]\npublic string SoundFile\n{\nget { return _soundFile; }\nset { _soundFile = value; }\n}\n}\n}", 
            "title": "File Selection in the Properties"
        }, 
        {
            "location": "/hints_and_advice/#formatting-of-numbers", 
            "text": "", 
            "title": "Formatting of Numbers"
        }, 
        {
            "location": "/hints_and_advice/#formatting-of-numbers_1", 
            "text": "General information on formatting in C#  double d = 123.4567890;\nPrint( Without formatting :   + d.ToString()); // 123.456789\nPrint( As a currency :   + d.ToString( C )); // 123.46 \u20ac\nPrint( Exponential :   + d.ToString( E )); // 1.234568E+002\nPrint( As a fixed point :   + d.ToString( F2 )); // 123.46\nPrint( General :   + d.ToString( G )); // 123.456789\nPrint( As a percentage :   + d.ToString( P0 )); // 12.346%\nPrint( To 2 decimal places :   + d.ToString( N2 )); // 123.45\nPrint( To 3 decimal places :   + d.ToString( N3 )); // 123.457\nPrint( To 4 decimal places :   + d.ToString( N4 )); // 123.4568", 
            "title": "Formatting of Numbers"
        }, 
        {
            "location": "/hints_and_advice/#useful-functions", 
            "text": "Returns the currency symbol for the current instrument:  public string getWaehrungssymbol() {\nstring s =  ;\nswitch (Instrument.Currency) {\ncase Currencies.USD : s =  $ ; break;\ncase Currencies.EUR : s =  \u20ac ; break;\ncase Currencies.CHF : s =  CHF ; break;\ncase Currencies.GBP : s = ((char)163).ToString(); break;\ncase Currencies.JPY : s = ((char)165).ToString(); break;\n}\nreturn s;\n}  Converts a number into a currency with a thousands separator and 2 decimal places.\nThe block separation per 1000 units can be set in \u201cCulture\u201d.  public string getWaehrungOhneSymbol(double d) {\n// Separate 1000s and two decimal points\nreturn d.ToString( \\#,\\#\\#0.00 );\n}  Converts a number into a currency with a thousands separator and 2 decimal places and a currency symbol:  public string getWaehrungMitSymbol(double d) {\n// Dollar is prefixed, everything else is added afterwards\nstring s=getWaehrungOhneSymbol(d);\nstring w=getWaehrungssymbol();\nif (w== $ ) s=w+   +s; else s+=   +w;\nreturn s;\n}  Converts a number into a currency with a thousands separator and 2 decimal places as well as a currency symbol, and fills up to a fixed length with empty spaces.\nThe function is great for outputting values into a table.  public string getWaehrungMitSymbol(double d, int Laenge) {\n// Leading spaces until a fixed length has been reached\nstring s=getWaehrungMitSymbol(d);\nfor (int i=s.Length; i Laenge; i++) s=   +s;\nreturn s;\n}  Converts a number into a percentage. Nothing is calculated, only formatted.\nLeading plus sign, a decimal place and a percent sign.  public string getPercent(double d) {\nd=Math.Round(d, 1);\nstring s=(d 0)? + : ; // Leading plus sign\nreturn s+d.ToString( 0.0 )+ % ;\n}  Formats the market price depending on the number of decimal places to which the currency is notated.\nThis includes a thousands separator and fixed length, meaning that zeros are filled on the right hand side.\nBecause Culture Info is being used, you must integrate the NameSpace  System.Globalization .  public string format(double d)\n{\nint tickLength = 0;\n// ticksize.ToString() is for example 6J =  1E-06  and length is then 5\n// and not 8 as it should be with  0.000001 )\nif (TickSize   1) tickLength = TickSize.ToString( 0.\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\# ).Length - 2;\nstring f =  {0:n +tickLength.ToString()+ } ;\nreturn string.Format(CultureInfo.CurrentCulture, f, d);\n}", 
            "title": "Useful Functions"
        }, 
        {
            "location": "/hints_and_advice/#example", 
            "text": "double profit = 1234.567890;\nPrint( getCurrencyWithoutSymbol  : + getWaehrungOhneSymbol(Gewinn)); // 1234.57\nPrint( getCurrencyWithSymbol :  + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\nPrint( getCurrencyWithSymbol :  + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\ndouble percentage profit = 12.3456789;\nPrint( getPercent :  + getPercent(ProzGewinn)); // +12.3%\ndouble price = 123.4567;\nPrint( getPrice :  + getKurs(Kurs)); // 123.46", 
            "title": "Example"
        }, 
        {
            "location": "/hints_and_advice/#index-conversion", 
            "text": "There are two types of indexing in AgenaTrader.    The bars are numbered from youngest to oldest.\nThis type is used in the OnBarUpdate() method.\nThe last bar has an index of 0, while the oldest bar has the index Bars.Count-1.    The bars are numbered from oldest to youngest.\nThis type is most commonly used in the Plot() method in \u201cfor\u201d loops.\nThe oldest Bbar receives an index of 0, while the youngest bar has the index Bars.Count-1.\nThe following function can be used to recalculate the index types:    private int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnBarClose?1:0));\n}", 
            "title": "Index Conversion"
        }, 
        {
            "location": "/hints_and_advice/#overwriting-indicator-names", 
            "text": "The name of an indicator (or a strategy) is displayed within the properties dialog and at the top edge of the chart. Use the ToString() property to overwrite it.  public override string ToString()\n{\nreturn  My Name ;\n}", 
            "title": "Overwriting Indicator Names"
        }, 
        {
            "location": "/hints_and_advice/#rectangle-with-rounded-corners", 
            "text": "By using the graphics methods, you can create interesting forms and place them onto the chart.\nOne example of this is the RoundedRectangle class, which is a rectangle with rounded corners.   Example Code:\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description( Demo of RoundedRectangles )]\npublic class DemoRoundedRectangle : UserIndicator\n{\nprotected override void Initialize()\n{\nOverlay = true;\n}\nprotected override void OnBarUpdate() {}\npublic override void Plot(Graphics g, Rectangle r, double min, double max)\n{\nGraphicsPath path;\n// draws a rectangle with rounded corners\npath = RoundedRectangle.Create(30, 50, 100, 100,8);\ng.DrawPath(Pens.Black, path);\n// draws a filled rectangle with a radius of 20\n// only round the upper left and lower right corner\npath = RoundedRectangle.Create(160, 50, 100, 100, 20,\nRoundedRectangle.RectangleCorners.TopLeft|RoundedRectangle.RectangleCorners.BottomRight);\ng.FillPath(Brushes.Orange, path);\n}\n}\npublic abstract class RoundedRectangle\n{\npublic enum RectangleCorners\n{\nNone = 0, TopLeft = 1, TopRight = 2, BottomLeft = 4, BottomRight = 8,\nAll = TopLeft | TopRight | BottomLeft | BottomRight\n}\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius, RectangleCorners corners)\n{\nRectangle r = new Rectangle(x,y,width, height);\nRectangle tlc = new Rectangle(r.Left, r.Top,Math.Min(2 * radius, r.Width),Math.Min(2 * radius, r.Height));\nRectangle trc = tlc;\ntrc.X = r.Right - 2 * radius;\nRectangle blc = tlc;\nblc.Y = r.Bottom - 2 * radius;\nRectangle brc = blc;\nbrc.X = r.Right - 2 * radius;\nPoint[] n = new Point[]\n{\nnew Point(tlc.Left, tlc.Bottom), tlc.Location,\nnew Point(tlc.Right, tlc.Top), trc.Location,\nnew Point(trc.Right, trc.Top),\nnew Point(trc.Right, trc.Bottom),\nnew Point(brc.Right, brc.Top),\nnew Point(brc.Right, brc.Bottom),\nnew Point(brc.Left, brc.Bottom),\nnew Point(blc.Right, blc.Bottom),\nnew Point(blc.Left, blc.Bottom), blc.Location\n};\nGraphicsPath p = new GraphicsPath();\np.StartFigure();\n//Top left corner\nif ((RectangleCorners.TopLeft   corners) == RectangleCorners.TopLeft)\np.AddArc(tlc, 180, 90);\nelse\np.AddLines(new Point[] { n[0], n[1], n[2] });\n//Top edge\np.AddLine(n[2], n[3]);\n//Top right corner\nif ((RectangleCorners.TopRight   corners) == RectangleCorners.TopRight)\np.AddArc(trc, 270, 90);\nelse\np.AddLines(new Point[] { n[3], n[4], n[5] });\n//Right edge\np.AddLine(n[5], n[6]);\n//Bottom right corner\nif ((RectangleCorners.BottomRight   corners) == RectangleCorners.BottomRight)\np.AddArc(brc, 0, 90);\nelse\np.AddLines(new Point[] { n[6], n[7], n[8] });\n//Bottom edge\np.AddLine(n[8], n[9]);\n//Bottom left corner\nif ((RectangleCorners.BottomLeft   corners) == RectangleCorners.BottomLeft)\np.AddArc(blc, 90, 90);\nelse\np.AddLines(new Point[] { n[9], n[10], n[11] });\n//Left edge\np.AddLine(n[11], n[0]);\np.CloseFigure();\nreturn p;\n}\npublic static GraphicsPath Create(Rectangle rect, int radius, RectangleCorners c)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius), c); }\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius)\n{ return Create(x, y, width, height, Math.Max(1,radius), RectangleCorners.All); }\npublic static GraphicsPath Create(Rectangle rect, int radius)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius)); }\npublic static GraphicsPath Create(int x, int y, int width, int height)\n{ return Create(x, y, width, height, 8); }\npublic static GraphicsPath Create(Rectangle rect)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height); }\n}\n}", 
            "title": "Rectangle with Rounded Corners"
        }
    ]
}