{
    "docs": [
        {
            "location": "/",
            "text": "The following API documentation requires AgenaTrader in version 2.0.1.x\n\n\nWelcome to the official AgenaScript documentation!\n\n\nWant to learn more about the AgenaTrader scripting language? We've got the resources to help you get started. Start by browsing the documentation on the list below.\n\n\nIntroductory Words\n\n\nAgenaScript is AgenaTrader\u2019s integrated programming language. The syntax is derived from C# and thus closely resembles it.\n\n\nAgenaScript allows you to execute any ideas/methods that are too complex for the ConditionEscort. From simple indicators to entire applications where AgenaTrader is only required to run in the background, anything that can be written in .NET can be implemented.\n\n\nInformation contained in this help document:\n\n\nDrawing objects\n\n\nAll drawing objects that can be used within the chart can also be accessed using AgenaScript. In this way, you can turn on/off certain lines, arrows, rectangles and other objects with specified conditions.\n\n\nEvents\n\n\nAgenaScript is event-based and -driven. When (for example) a candle closes or a new candle opens, then an event has occurred. When a new price value is delivered by your data provider or a new order is executed by your broker, then these too are considered events. AgenaScript allows you to react to these events. You can read about the exact methodology in this and the following chapters.\n\n\nHandling bars and instruments\n\n\nYou will find a detailed explanation of how AgenaScript reacts and interacts with individual bars or candles as well as various trading instruments.\n\n\nHints and advice\n\n\nThis section provides solutions to problems of an unusual nature. To solve such problems, you need to be able to trace and understand source code and programming. More advanced programmers and users may find solutions and suggestions that could help them in their own programming.\n\n\nKeywords\n\n\nLike every other programming language, AgenaTrader has a set of commands that can be converted and used via Scripts. You should be relatively well versed in these if you wish to create your own indicators or trading systems.\n\n\nStrategy programming\n\n\nAgenaScript allows you to create your own trading strategies and execute them live within the market. Information pertaining to prerequisites and how orders are sent to the broker and managed internally can be found here.",
            "title": "Lets start"
        },
        {
            "location": "/#welcome-to-the-official-agenascript-documentation",
            "text": "Want to learn more about the AgenaTrader scripting language? We've got the resources to help you get started. Start by browsing the documentation on the list below.",
            "title": "Welcome to the official AgenaScript documentation!"
        },
        {
            "location": "/#introductory-words",
            "text": "AgenaScript is AgenaTrader\u2019s integrated programming language. The syntax is derived from C# and thus closely resembles it.  AgenaScript allows you to execute any ideas/methods that are too complex for the ConditionEscort. From simple indicators to entire applications where AgenaTrader is only required to run in the background, anything that can be written in .NET can be implemented.  Information contained in this help document:  Drawing objects  All drawing objects that can be used within the chart can also be accessed using AgenaScript. In this way, you can turn on/off certain lines, arrows, rectangles and other objects with specified conditions.  Events  AgenaScript is event-based and -driven. When (for example) a candle closes or a new candle opens, then an event has occurred. When a new price value is delivered by your data provider or a new order is executed by your broker, then these too are considered events. AgenaScript allows you to react to these events. You can read about the exact methodology in this and the following chapters.  Handling bars and instruments  You will find a detailed explanation of how AgenaScript reacts and interacts with individual bars or candles as well as various trading instruments.  Hints and advice  This section provides solutions to problems of an unusual nature. To solve such problems, you need to be able to trace and understand source code and programming. More advanced programmers and users may find solutions and suggestions that could help them in their own programming.  Keywords  Like every other programming language, AgenaTrader has a set of commands that can be converted and used via Scripts. You should be relatively well versed in these if you wish to create your own indicators or trading systems.  Strategy programming  AgenaScript allows you to create your own trading strategies and execute them live within the market. Information pertaining to prerequisites and how orders are sent to the broker and managed internally can be found here.",
            "title": "Introductory Words"
        },
        {
            "location": "/handling_bars_and_instruments/",
            "text": "Handling bars and instruments\n\n\nData is understood as information that is retrieved externally and uploaded to AgenaTrader, or as data series that are created by AgenaScripts.\n\n\nFurther detailed information can be found using the appropriate shortcuts:\n\n\nBars\n\n\nCollections\n\n\nData series\n\n\nInstruments\n\n\nMultibars\n\n\nBars\n\n\nFunctionality\n\n\nA classical indicator calculates one or multiple values using an existing data series.\n\n\nData series can be anything from closing prices to daily lows or values of an hourly period etc.\n\n\nEvery period (meaning all candles of one day, one hour etc.) is assigned one or more indicator values.\nThe following example is based on an indicator value, such as with a moving average, for example.\nTo calculate a smoothed moving average, AgenaTrader needs a data series. In this example we will use the closing prices. All closing prices of a bar (candle) that are represented in the chart will be saved in a list and indexed.\n\n\nThe current closing price, meaning the closing price of the bar that is on the right-hand side of the chart, will be assigned an index of 0. The bar to the left of that will have an index of 1 and so on. The oldest bar displayed will have an index value of 500.\n\n\nWhenever a new bar is added within a session it will become the new index 0; the bar to the left of it, which previously had an index of 0, will become index 1 and so on. The oldest bar will become index 501.\nWithin a script (a self-created program/algorithm) the \nClose\n will be representative for the array (list) of all closing prices.\nThe last closing price is thus \nClose [0]\n; the closing price previous to this will become \nClose [1]\n, the value before that will become \nClose [2]\n and the oldest bar will be \nClose [501]\n. The number within the squared brackets represents the index. AgenaTrader allows you to use the \u201ebars ago\" expression for this in general cases.\n\n\nObviously, every bar will not only have a closing value but also a \nHigh\n, \nLow\n, \nOpen\n, \nMedian\n, \nTypical\n, \nWeighted\n, \nTime\n and \nVolume\n. Thus, the high of the candle that occurred 10 days ago will be \nHigh [10]\n, yesterday\u2019s low \nLow [1]\n...\n\n\nImportant tip:\n\n\nThe previous examples all assume that the calculations will occur at the end of a period. The value of the currently running index is not being taken into consideration.\n\n\nIf you wish to use the values of the currently forming candle then you will need to set the value of\n\n\nCalculateOnClosedBar\n to \u201efalse\".\n\n\nIn this case the currently running bar will have the value 0, the bar next to the current bar will have the value 1 and so on. The oldest bar (as in the example above) would now have the value 502.\n\n\nWith close [0] you would receive the most recent value of the last price that your data provider transmitted to AgenaTrader. All values of the bar (high [0], low [0]\u2026) may still change as long as the bar is not yet finished/closed and a new bar has not yet started. Only the open [0] value will not change.\n\n\nProperties\n\n\nProperties of Bars\n\n\n\"Bars\" represents a list of all bars (candles) within a chart (see \nFunctionality\n, \nBars\n).\n\n\nBars (\npublic\n IBars Bars) can be used directly in a script and equates to BarsArray [0] (see Bars.GetNextSessionTimeSpan for more information).\n\n\nThe list of bars itself has many properties that can be used in AgenaScript. Properties are always indicated by a dot before the objects (in this case bars, list of candles).\n\n\nBars.Count\n\n\nBars.CurrentSessionBeginTime\n\n\nBars.CurrentSessionEndTime\n\n\nBars.GetBar\n\n\nBars.GetBarIndex\n\n\nBars.GetBarsAgo\n\n\nBars.GetByIndex\n\n\nBars.GetClose\n\n\nBars.GetHigh\n\n\nBars.GetLow\n\n\nBars.GetNextSessionTimeSpan\n\n\nBars.GetOpen\n\n\nBars.GetSessionBegin\n\n\nBars.GetTime\n\n\nBars.GetVolume\n\n\nBars.Instrument\n\n\nBars.IsEod\n\n\nBars.IsFalling\n\n\nBars.IsFirstBarInSession\n\n\nBars.IsGrowing\n\n\nBars.IsIntraday\n\n\nBars.IsNtb\n\n\nBars.SessionBreak\n\n\nBars.LastBarCompleteness\n\n\nBars.NextSessionBeginTime\n\n\nBars.NextSessionEndTime\n\n\nBars.TailBottom\n\n\nBars.TailTop\n\n\nBars.TicksCountForLastBar\n\n\nBars.TicksCountInTotal\n\n\nBars.TimeFrame\n\n\nBarsCountForSession\n\n\nIsProcessingBarIndexLast\n\n\nWith the \nOnCalculate()\n method you can use any properties you want without having to test for a null reference.\nAs soon as the function \nOnCalculate()\n is called up by AgenaScript, it is assumed that an object is also available. If you wish to use these properties outside of \nOnCalculate()\n then you should first perform a test for null references using \nif\n (Bars != \nnull\n).\n\n\nBars.Count\n\n\nDescription\n\n\nBars.Count gives you the amount of bars in a data series.\n\n\nSee \nProperties\n for additional information.\n\n\nReturn Value\n\n\nType int Amount of Bars\n\n\nUsage\n\n\nBars.Count\n\n\nMore Information\n\n\nThe value of \nProcessingBarIndex\n can only be lesser than or equal to Bars.Count - 1\n\n\nWhen you specify how many bars are to be loaded within AgenaTrader, then the value of Bars.Count is equal to this setting. In the following example, Bars.Count would give back a value of 500.\n\n\n\n\nExample\n\n\nPrint (\"There are a total of\" + Bars.Count + \"bars available.\");\n\n\n\n\nBars.CurrentSessionBeginTime\n\n\nDescription\n\n\nBars.CurrentSessionBeginTime outputs the date and time for the beginning of the current trading session.\n\n\nDate and time for the beginning of the current trading session will be displayed correctly when the function is used on a bar that has occurred in the past.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionBegin\n\n\nMore Information\n\n\nThe time for the returned value will equal the starting time defined in the Market Escort for the specified exchange. The value itself is set within the Instrument Escort and can be called up in AgenaScript using the function \nInstrument.Exchange\n .\n\n\n\n\nExample\n\n\nPrint(\"The currently running trading session started at \" + Bars.CurrentSessionBeginTime );\n\n\n\n\nBars.CurrentSessionEndTime\n\n\nDescription\n\n\nBars.CurrentSessionEndTime outputs the time for the end of the currently running trading session.\nDate and time for the end of the current trading session will, in this case, also be outputted correctly when the function is used on a previous bar.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionEnd\n\n\nMore Information\n\n\nThe time for the returned value will correlate with the end time of the trading session defined in the Market Escort for the exchange. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the \nInstrument.Exchange\n function.\n\n\n\n\nExample\n\n\nPrint(\"The current trading session will end at \" + Bars.CurrentSessionEndTime);\n\n\n\n\nBars.GetBar\n\n\nDescription\n\n\nBars.GetBar outputs the first bars (from oldest to newest) that correspond to the specified date/time.\n\n\nSee \nBars.GetBarsAgo\n, \nBars.GetByIndex\n, \nBars.GetBarIndex\n.\n\n\nParameter\n\n\nType DateTime\n\n\nReturn Value\n\n\nType IBar Bar Object, for the bars corresponding to the timestamp\n\n\nFor a timestamp older than the oldest bar: 0 (null)\nFor a timestamp younger than the newest bar: index of the last bar\n\n\nUsage\n\n\nBars.GetBar(DateTime time)\n\n\n\n\nMore Information\n\n\nFor the indexing of bars please see \nFunctionality\n, \nBars\n\n\nFor more information about using DateTime see \nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n\n\nExample\n\n\nPrint (\"The closing price for 01.03.2012 at 18:00:00 was \" + Bars.GetBar(new DateTime(2012, 01, 03, 18, 0, 0)).Close);\n\n\n\n\nBars.GetBarIndex\n\n\nDescription\n\n\nBars.GetBarIndex outputs the index of a bar \u2013 you can input either a bar object or a date-time object using this method.\n\n\nSee \nBars.GetBar\n, \nBars.GetBarsAgo\n, \nBars.GetByIndex\n.\n\n\nParameter\n\n\nType IBar bar\nor\nType DateTime\n\n\nReturn Value\n\n\nType int The bar index of the specified bar object or DateTime object\n\n\nUsage\n\n\nBars.GetBarIndex (IBar bar)\nBars.GetBarIndex (DateTime dt)\n\n\n\n\nMore Information\n\n\nFor more information about indexing see \nFunctionality\n, \nBars\n\n\nExample\n\n\nint barsAgo = 5;\nIBar bar = Bars.GetBar(Time[barsAgo]);\nPrint(barsAgo + \" and \" + Bars.GetBarIndex(bar) + \" are equal in this example.\");\n\n\n\n\nBars.GetBarsAgo\n\n\nDescription\n\n\nBars.GetBarsAgo outputs the index of the first bars (from oldest to newest) that correspond to the specified date/time.\n\n\nSee: \nBars.GetBar\n, \nBars.GetByIndex\n, \nBars.GetBarIndex\n.\n\n\nParameter\n\n\nType DateTime\n\n\nReturn Value\n\n\nType int Index of the bar that corresponds to the timestamp\n\n\nWith a timestamp older than the oldest bar: 0 (null)\nWith a timestamp newer than the youngest bar: index of the last bar\n\n\nUsage\n\n\nBars.GetBarsAgo(DateTime time)\n\n\n\n\nMore Information\n\n\nFor more information about indexing please see \nFunctionality\n, \nBars\n\n\nFor more information about using DateTime see \nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n\n\nExample\n\n\nPrint(\"The bar for 01.03.2012 at 18:00:00 O\u2019clock has an index of \" + Bars.GetBarsAgo(new DateTime(2012, 01, 03, 18, 0, 0)));\n\n\n\n\nBars.GetByIndex\n\n\nDescription\n\n\nBars.GetByIndex outputs the index for the specified bar object\n\n\nSee \nBars.GetBar\n, \nBars.GetBarsAgo\n, \nBars.GetBarIndex\n.\n\n\nParameter\n\n\nType int Index\n\n\nReturn Value\n\n\nType IBar Bar object for the specified index\n\n\nUsage\n\n\nBars.GetByIndex (int Index)\n\n\n\n\nMore Information\n\n\nFor indexing of bars see \nFunctionality\n, \nBars\n\n\nExample\n\n\nPrint(Close[0] + \" and \" + Bars.GetByIndex(ProcessingBarIndex).Close + \" are equal in this example.\");\n\n\n\n\nBars.GetClose\n\n\nBars.GetClose(int index) \u2013 see \nBars.GetOpen\n.\n\n\nBars.GetHigh\n\n\nBars.GetHigh(int index) \u2013 see \nBars.GetOpen\n.\n\n\nBars.GetLow\n\n\nBars.GetLow(int index) \u2013 see \nBars.GetOpen\n.\n\n\nBars.GetNextSessionTimeSpan\n\n\nDescription\n\n\nBars.GetNextSessionTimeSpan outputs the date and time for the beginning and end of a trading session.\n\n\nSee \nBars.CurrentSessionBeginTime\n, \nBars.CurrentSessionEndTime\n, \nBars.NextSessionBeginTime\n, \nBars.NextSessionEndTime\n.\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDateTime\n\n\ntime\n\n\nDate or time for which the data of the following trading session will be scanned/searched.\n\n\n\n\n\n\niBars\n\n\nbars\n\n\nBar object for which the data will be scanned/searched.\n\n\n\n\n\n\nint\n\n\nbarsago\n\n\nNumber of days in the past for which the data will be searched/scanned.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nDateTime session begin\nDateTime session end\n\n\nNote:\n\nThe date for the beginning and the end of a trading session are connected components. If the specified date corresponds to the end date of the current trading session then the returned value for the beginning of a trading session may already be in the past. In this case the date for the following trading session cannot be returned.\n\n\nUsage\n\n\nBars.GetNextSessionTimeSpan(Bars bars, int barsAgo, out DateTime sessionBegin, out DateTime sessionEnd)\nBars.GetNextSessionTimeSpan(DateTime time, out DateTime sessionBegin, out DateTime sessionEnd)\n\n\n\n\nMore Information\n\n\nThe two signatures will not necessarily output the same result.\nWhen using the bar signature, the supplied bar will be inspected for its session template association. The beginning and end of the next session will be taken from this template.\n\n\nWhen using the time signature, the date and time of the supplied bar will be used to calculate the data for the current and the following sessions.\n\n\nWhen using the time signature, a timestamp is transmitted that corresponds exactly to the beginning or the end time of a session.\n\n\nMore information can be found here \nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n\n\nExample\n\n\nDateTime sessionBegin;\nDateTime sessionEnd;\nprotected override void OnCalculate()\n{\nBars.GetNextSessionTimeSpan(Bars, 0, out sessionBegin, out sessionEnd);\nPrint(\"Session Start: \" + sessionBegin + \" Session End: \" + sessionEnd);\n}\n\n\n\n\nBars.GetOpen\n\n\nDescription\n\n\nFor reasons of compatibility, the following methods are available.\n\n\n\n\nBars.GetOpen(int index) outputs the open for the bars referenced with <index>.\n\n\nBars.GetHigh(int index) outputs the high for the bars referenced with <index>.\n\n\nBars.GetLow(int index) outputs the low for the bars referenced with <index>.\n\n\nBars.GetClose(int index) outputs the close for the bars referenced with <index>.\n\n\nBars.GetTime(int index) outputs the timestamp for the bars referenced with <index>.\n\n\nBars.GetVolume(int index) outputs the volume for the bars referenced with <index>.\n\n\n\n\nCaution\n: The indexing will deviate from the \nIndexing\n, \nBars\n normally used.\nHere, the indexing will begin with 0 for the oldest bar (on the left of the chart) and end with the newest bar on the right of the chart (=Bars.Count-1).\n\n\nThe indexing can easily be recalculated:\n\n\nprivate int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnClosedBar?1:0));\n}\n\n\n\n\nParameter\n\n\nint index (0 .. Bars.Count-1)\n\n\nReturn Value\n\n\nType double for GetOpen, GetHigh, GetLow, GetClose and GetVolume\n\n\nType DateTime for GetTime\n\n\nBars.GetSessionBegin\n\n\nDescription\n\n\nBars.GetSessionBegin provides the date and time of the particular session start. The date and time for the start of the current trading session are also correctly indicated when the function is called from a bar in the past. See also other \nProperties\n of bars.\n\n\nParameter\n\n\nNone\n\n\nReturn value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionBegin(DateTime dt)\n\n\nFurther Information\n\n\nThe time of the returned value corresponds to the start time of the trading session.  The relevant trading center which is specified in the MarketEscort. The trading place used for the value is set in the Instrumet Escort and can be determined in AgenaSript with the Instrument.Exchange function.\n\n\n\n\nExample\n\n\nPrint(\"Die Handelssitzung am 25.03.2015 hat um \"+ Bars.GetSessionBegin(new DateTime(2015, 03, 25)) + \" begonnen.\");\n}\n\n\n\n\nBars.GetTime\n\n\nBars.GetTime(int index) \u2013 see \nBars.GetOpen\n.\n\n\nBars.GetVolume\n\n\nBars.GetVolume(int index) \u2013 see \nBars.GetOpen\n.\n\n\nBars.Instrument\n\n\nDescription\n\n\nBars.Instrument outputs an instrument object for the trading instrument displayed within the chart.\n\n\nSee \nProperties\n for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType Instrument\n\n\nUsage\n\n\nBars.Instrument\n\n\nMore Information\n\n\nFor more information regarding the trading instruments please see \nInstruments\n.\n\n\nExample\n\n\n// both outputs will provide the same result\nPrint(\"The currently displayed trading instrument has the symbol: \" + Bars.Instrument);\nInstrument i = Bars.Instrument;\nPrint(\"The currently displayed trading instrument has the symbol \" + i.Symbol);\n\n\n\n\nBars.IsEod\n\n\nDescription\n\n\nBars.IsEod can be used to check whether they are end-of-day bars.\n\n\nSee \nProperties\n for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType bool\n\n\nUsage\n\n\nBars.IsEod\n\n\nMore Information\n\n\nWithin \nOnCalculate()\n, this property can be used without having to test for null reference. As soon as the method OnCalculate () is called by AgenaScript, there is always a bar object.\n\n\nIf this property  used outside of OnCalculate (), then a corresponding test should be set to zero reference, e.g. With if (bars! = Null).\n\n\nExample\n\n\nPrint(\"The bars are EOD: \" + Bars.IsEod);\n\n\n\n\nBars.IsFalling\n\n\nDescription\n\n\nBar properties used when Bar is falling down.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nNone\n\n\nUsage\n\n\nBars[0].IsFalling;\n\n\n\n\nBars.IsFirstBarInSession\n\n\nDescription\n\n\nWith Bars.IsFirstBarInSession you can determine whether the current bar is the first bar of the trading session.\n\n\nSee \nProperties\n of bars for more information.\n\n\nReturn Value\n\n\nType bool\n\n\ntrue\n: The bar is the first bar of the current trading session\n\nfalse\n: The bar is not the first bar of the current trading session\n\n\nUsage\n\n\nBars.IsFirstBarInSession\n\n\nMore Information\n\n\nWith \nOnCalculate()\n this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up, an object will become available.\nIf this property is called up outside of OnCalculate() you should test for a null reference using if (Bars != null).\n\n\nExample\n\n\nif (Bars.IsFirstBarInSession)\nPrint (\"The current trading session started at\" + Time [0]);\n\n\n\n\nBars.isGrowing\n\n\nDescription\n\n\nBar properties used when Bar is growing up.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nNone\n\n\nUsage\n\n\nBars[0].isGrowing;\n\n\n\n\nBars.IsIntraday\n\n\nDescription\n\n\nBars.IsIntraday returns a boolean which indicates if the TimeFrame is intra-day.\n\n\nReturn Value\n\n\nbool\n\n\nIt returns \"true\" if TimeFrame is intra-day (e.g. 1 min, 15 min, 1 hour, etc.) and \"false\" in other cases.\n\n\nUsage\n\n\nBars.IsIntraday\n\n\n\n\nExample\n\n\nif(Bars.IsIntraday) {\n    Print(\"TimeFrame is Intraday.\");\n} else {\n    Print(\"TimeFrame is not Intraday.\");\n}\n\n\n\n\nBars.IsNtb\n\n\nDescription\n\n\nWith Bars.IsNtb it can be checked whether it is not-time-based bars. For example Ntb bars are Point & Figure or Renko Charts.\n\n\nSee \nProperties\n for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType bool\n\n\nUsage\n\n\nBars.IsNtb\n\n\nMore Information\n\n\nOnCalculate()\n property can be used without having to test for null reference first. As soon as the method OnCalculate() is called by AgenaScript, there is always a bar object. If this property is used outside of OnCalculate(), then a corresponding test should be set to zero reference, e.g. With if (bars! = Null).\n\n\nExample\n\n\nPrint(\"The bars are Ntb: \" + Bars.IsNtb);\n\n\n\n\nBars.IsSessionBreak\n\n\nDescription\n\n\nBars.IsSessionBreak can be used to determine whether the bars are within the commercial trading session in the commercial breaks defined in the marketplace escort.\n\n\nSee \nProperties\n for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType bool\n\n\nUsage\n\n\nBars.IsSessionBreak\n\n\nMore Information\n\n\n\n\nExample\n\n\nif (Bars.IsSessionBreak)\n{\n    Print(\"The stock exchange Xetra has just a trade pause.\");\n}\n\n\n\n\nBars.LastBarCompleteness\n\n\nDescription\n\n\nBars.LastBarCompleteness outputs the value that displays what percentage a bar has already completed. A bar with a period of 10 minutes has completed 50% after 5 minutes.\n\n\nFor non-time-based charts (Kagi, LineBreak, Renko, Range, P&F etc.) this will output 0 during backtesting.\n\n\nReturn Value\n\n\ndouble\n\n\nA percentage value; 30% will be outputted as 0.3\n\n\nUsage\n\n\nBars.LastBarCompleteness\n\n\nMore Information\n\n\nWith \nOnCalculate()\n this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnCalculate() you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\n// A 60 minute chart is looked at from an intraday perspective\n// every 5 minutes before the current bar closes\n// an acoustic signal shall be played\n// 55 min. equals 92%\nbool remind = false;\nprotected override void OnCalculate()\n{\nif (FirstTickOfBar) remind = true;\n    if (remind && Bars.LastBarCompleteness >= 0.92)\n    {\n    remind = false;\n    PlaySound(\"Alert1\");\n    }\n}\n\n\n\n\nBars.NextSessionBeginTime\n\n\nDescription\n\n\nBars.NextSessionBeginTime outputs the date and time for the start of the next trading session.\nDate and time for the next session will be correctly outputted when the function is used on a bar in the past.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionNextBegin\n\n\nMore Information\n\n\nThe time for the returned value will correlate to the value displayed in the MarketEscort. The value can be set within the Instrument Escort and can be called up using the \nInstrument.Exchange\n function.\n\n\n\n\nExample\n\n\nPrint(\"The next trading session starts at \" + Bars.NextSessionBeginTime);\n\n\n\n\nBars.NextSessionEndTime\n\n\nDescription\n\n\nBars.NextSessionEndTime outputs the date and time for the end of the next session.\nSee \nProperties\n for more information.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nUsage\n\n\nBars.GetSessionNextEnd\n\n\nMore Information\n\n\nThe time for the returned value will correlate with the value specified within the MarketEscort. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the \nInstrument.Exchange\n function.\n\n\n\n\nExample\n\n\nPrint(\"The next trading session ends at \" + Bars.NextSessionEndTime);\n\n\n\n\nBars.TailBottom\n\n\nDescription\n\n\nWith this property you are able to get the height of the bottom candle tail.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nNone\n\n\nUsage\n\n\nBars[0].TailBottom;\n\n\n\n\nExample\n\n\nPrint(\"The height of the bottom candle tail is: \" + Bars.TailBottom);\n\n\n\n\nBars.TailTop\n\n\nDescription\n\n\nWith this property you are able to get the height of the top candle tail.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nNone\n\n\nUsage\n\n\nBars[0].TailTop;\n\n\n\n\nExample\n\n\nPrint(\"The height of the top candle tail is: \" + Bars.TailTop);\n\n\n\n\nBars.TicksCountForLastBar\n\n\nDescription\n\n\nBars.TicksCountForLastBar outputs the total numbers of ticks contained within a bar.\n\n\nMore information can be found in \nProperties\n of bars.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType int\n\n\nUsage\n\n\nBars.TicksCountForLastBar\n\n\nMore Information\n\n\nWith \nOnCalculate()\n this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnCalculate(), you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\nPrint(\"The current bar consists of \" + Bars.TicksCountForLastBar + \" Ticks.\");\n\n\n\n\nBars.TicksCountInTotal\n\n\nDescription\n\n\nBars.TicksCountInTotal outputs the total number of ticks from the moment the function is called up.\n\n\nMore information can be found here: \nProperties\n.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType int\n\n\nUsage\n\n\nBars.TicksCountInTotal\n\n\nMore Information\n\n\nThe data type int has a positive value range of 2147483647. When you assume 10 ticks per second, there will be no overlaps within 2 trading months with a daily runtime of 24 hours.\n\n\nWith \nOnCalculate()\n this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnCalculate(), you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\n**Print**(\"The total amount of ticks is \" + Bars.TicksCountInTotal);\n\n\n\n\nBars.TimeFrame\n\n\nDescription\n\n\nBars.TimeFrame outputs the timeframe object containing information regarding the currently used timeframe.\n\n\nMore information can be found here: \nProperties\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType ITimeFrame\n\n\nUsage\n\n\nBars.TimeFrame\n\n\nMore Information\n\n\nFor more information about timeframe objects please see \nTimeFrame\n.\n\n\nWith \nOnCalculate()\n this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnCalculate(),you should test for a null reference before executing it. You can test using \nif\n (Bars != \nnull\n)\n\n\nExample\n\n\n//Usage within a 30 minute chart\nTimeFrame tf = (TimeFrame) Bars.TimeFrame;\nPrint(Bars.TimeFrame); // outputs \"30 Min\"\nPrint(tf.Periodicity); // outputs \"Minute\"\nPrint(tf.PeriodicityValue); // outputs \"30\"\n\n\n\n\nBarsCountForSession\n\n\nDescription\n\n\nBars.BarsCountForSession outputs the amount of bars that have occurred since the beginning of the current trading session.\n\n\nSee further \nProperties\n of bars.\n\n\nReturn Value\n\n\nType int Amount of Bars\n\n\nA value of -1 indicates a problem with referencing the correct session beginning.\n\n\nUsage\n\n\nBars.BarsCountForSession\n\n\nFurther Information\n\n\nWithin \nOnCalculate()\n this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.\n\n\nIf this property is used outside of OnCalculate() then you should test for a null reference before executing it. You can test using \nif\n (Bars!= \nnull\n) .\n\n\nExample\n\n\nPrint (\"Since the start of the last trading session there have been\" + Bars.BarsCountForSession + \"bars.\");\n\n\n\n\nProcessingBarIndexLast\n\n\nDescription\n\n\nIndicates if current bar is last in calculation.\n\n\nParameter\n\n\nnone\n\n\nReturn value\n\n\nType bool\n\n\nUsage\n\n\nProcessingBarIndexLast\n\n\nMore Information\n\n\nused for complicated calculation on a last bar\n\n\nExample\n\n\nprotected override void OnCalculate()\n        {\n            base.OnCalculate();\n            if (!IsProcessingBarIndexLast)\n                return;\n            bool isUpdated;\n}\n\n\n\n\nCollections\n\n\nChartDrawings\n\n\nDescription\n\n\nChartDrawings is a collection containing all drawing objects within the chart. The property hold all drawings which were generated by the script.\nThe index for ChartDrawings is the explicit name for the drawing object (string tag).\n\n\nUsage\n\n\nChartDrawings [string tag]\n\n\nExample\n\n\nNote:\n To be able to use the interface definitions you must use the using method.\n\n\nusing AgenaTrader.Plugins;\n// Output number of drawing objects within the chart and their tags\nPrint(\"The chart contains \" + ChartDrawings.Count + \" drawing objects.\");\nfor each (IDrawObject draw in ChartDrawings) Print(draw.Tag);\n//Draw a black trend line...\nAddChartLine(\"MyLine\", true, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 3);\n// ... and change the color to red\nITrendLine line = (ITrendLine) ChartDrawings[\"MyLine\"];\nif (line != null) line.Pen.Color = Color.Red;\n// Set all lines within the chart to a line strength of 3,\n// and lock it so that it cannot be edited or moved\nforeach (IDrawObject draw in ChartDrawings)\nif (draw is IVerticalLine)\n{\nIVerticalLine vline = (IVerticalLine) draw;\nvline.IsLocked = true;\nvline.Editable = false;\nvline.Pen.Width = 3;\n}\n\n\n\n\nInSeries\n\n\nDescription\n\n\nInSeries is a \nDataSeries\n object in which the input data for an indicator or strategy is stored.\n\n\nIf the indicator is used without any explicit instructions for the input data, then the closing price for the current market prices will be used.\n\n\nWhen calling up the SMA(20) the smoothing average is calculated on the basis of the closing prices for the current chart price data (this is equivalent to SMA(close,20).\n\n\nInSeries[0] = Close[0].\n\n\nWhen calling up the SMA(high, 20) the high price values are loaded and used for the calculation of the smoothing average.\n\n\nInSeries[0] = High[0].\n\n\nThis way you can select which data series should be used for the calculation of the indicator.\n\n\ndouble\n d = \nRSI\n(\nSMA\n(20), 14, 3)[0]; calculates the 14 period RSI using the SMA(20) as the input data series.\nInSeries[0] = SMA(20)[0].\n\n\nUsage\n\n\nInSeries\nInSeries[int barsAgo]\n\n\n\n\nExample\n\n\nPrint(\"The input data for the indicators are \" + Input[0]);\n\n\n\n\nLines\n\n\nDescription\n\n\nLines is a collection that contains all \nLevelLine\n objects of an indicator.\n\n\nWhen a line object is added to the indicator using the \nAdd()\n method, this line is automatically added to the \"lines\" collection.\n\n\nThe order of the add commands determines how these lines are sorted. The first information request of Add() will create Lines[0], the next information request will be Lines[1] etc.\n\n\nSee \nOutputDescriptor\n.\n\n\nUsage\n\n\nLines[int index]\n\n\n\n\nExample\n\n\n// Add \"using System.Drawing.Drawing2D;\" for DashStyle\nprotected override void OnInit()\n{\nAdd(new LevelLine(Color.Blue, 70, \"Upper\")); // saves into Lines[0]\nAdd(new LevelLine(Color.Blue, 30, \"Lower\")); // saves into Lines[1]\n}\nprotected override void OnCalculate()\n{\n// When the RSI is above 70, properties of the lines will be changed\nif (RSI(14 ,3)[0] >= 70)\n{\n    Lines[0].Width = 3;\n    Lines[0].Color = Color.Red;\n    Lines[0].DashStyle = DashStyle.Dot;\n}\nelse\n{\n    Lines[0].Width = 1;\n    Lines[0].Color = Color.Blue;\n    Lines[0].DashStyle = DashStyle.Solid;\n}\n}\n\n\n\n\nPlotColors\n\n\nDescription\n\n\nPlotColors is a collection that contains all color series of all plot objects.\n\n\nWhen a plot is added using the \nAdd()\n method it automatically creates a color series object and is added to the PlotColors collection.\n\n\nThe order of the add commands determines how the plot colors are sorted. The first information request of Add() will create PlotColors[0], the following information request will create PlotColors[1] etc.\n\n\nUsage\n\n\nPlotColors[int PlotIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nMore information regarding the collection class:\n\nhttp://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing AgenaTrader.API;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"PlotColor Demo\")]\npublic class PlotColorsDemo : UserIndicator\n{\npublic DataSeries SMA20 { get {return Outputs[0];} }\npublic DataSeries SMA50 { get {return Outputs[1];} }\npublic DataSeries SMA100 { get {return Outputs[2];} }\nprivate Pen pen;\nprotected override void OnInit()\n{\n// Set line strength (width) to 4\npen = new Pen(Color.Empty, 4);\n// Add three plots with the defined line strength to the chart\nAdd(new OnPaint(pen, OutputSeriesDisplayStyle.LevelLine, \"SMA20\" )); //attached to PlotColors[0]\nAdd(new OnPaint(pen, OutputSeriesDisplayStyle.LevelLine, \"SMA50\" )); //attached to PlotColors[1]\nAdd(new OnPaint(pen, OutputSeriesDisplayStyle.LevelLine, \"SMA100\")); //attached to PlotColors[2]\nIsOverlay = true;\n}\nprotected override void OnCalculate()\n{\n// Add values to the three plots\nSMA20.Set (SMA(20) [0]);\nSMA50.Set (SMA(50) [0]);\nSMA100.Set(SMA(100)[0]);\n// Change colors depending on the trend\nif (IsSerieRising(Close))\n{\n    PlotColors[0][0] = Color.LightGreen;\n    PlotColors[1][0] = Color.Green;\n    PlotColors[2][0] = Color.DarkGreen;\n}\nelse if (IsSerieFalling(Close))\n{\n    PlotColors[0][0] = Color.LightSalmon;\n    PlotColors[1][0] = Color.Red;\n    PlotColors[2][0] = Color.DarkRed;\n}\nelse\n{\n    PlotColors[0][0] = Color.LightGray;\n    PlotColors[1][0] = Color.Gray;\n    PlotColors[2][0] = Color.DarkGray;\n}\n}\n}\n}\n\n\n\n\nOutputDescriptor\n\n\nDescription\n\n\nOutputDescriptor is a collection that contains the plot objects of an indicator.\n\n\nWhen a plot object is added to an indicator using the Add() method, it is also automatically added to the \"plots\" collection.\n\n\nThe order of the add commands determines how the plots are sorted. The first Add() information request will create Plots[0], the following information request will create OutputDescriptor[1] etc.\n\n\nSee \nLines\n.\n\n\nUsage\n\n\nOutputDescriptor[int index]\n\n\n\n\nExample\n\n\nprotected override void OnInit()\n{\n    Add(new OnPaint(Color.Blue, \"MySMA 20\")); // saved to OutputDescriptor[0]\n}\nprotected override void OnCalculate()\n{\nValue.Set(SMA(20)[0]);\n// If the market price is above the SMA colorize it green, otherwise red\nif (Close[0] > SMA(20)[0])\n    OutputDescriptor[0].PlotColor = Color.Green;\nelse\n    OutputDescriptor[0].PlotColor = Color.Red;\n}\n\n\n\n\nValues\n\n\nDescription\n\n\nValues is a collection that contains the data series objects of an indicator.\n\n\nWhen a plot is added to an indicator using the Add() method, a value object is automatically created and added to the \"values\" collection.\n\n\nThe order of the add commands determines how the values are sorted. The first information request will create Values[0], the next information request will create Values[1] etc.\n\n\nValue\n is always identical to Values[0].\n\n\nUsage\n\n\nOutputs[int index]\nOutputs[int index][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe methods known for a collection, Set() Reset() and Count(), are applicable for values.\n\n\nInformation on the class collection:\n\nhttp://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx\n\n\nExample\n\n\n// Check the second indicator value of one bar ago and set the value of the current indicator value based on it.\nif (Instrument.Compare(Outputs[1][1], High[0] - Low[0]) < 0)\n    Value.Set(High[0] - Low[0]);\nelse\n    Value.Set(High[0] - Close[0]);\n\n\n\n\nData Series\n\n\nDescription\n\n\nData series are interpreted as freely usable data storage containers for your programs. Additionally, they an integrated component of AgenaTrader that saves the price changes for individual bars. We will be focusing on the latter function here.\nIn the following section, the concept of data series will be explained in detail and understandably. All price data for the individual bars are organized and saved within data series.\nThe following are available:\n\n\nOpen\n \nOpens\n\n\nHigh\n \nHighs\n\n\nLow\n \nLows\n\n\nClose\n \nCloses\n\n\nMedian\n \nMedians\n\n\nTypical\n  \nTypicals\n\n\nWeighted\n \nWeighteds\n\n\nTime\n \nTimes\n\n\nTimeFrame\n \nTimeFrames\n\n\nVolume\n \nVolumes\n\n\nOpen\n\n\nDescription\n\n\nOpen is a \nDataSeries\n of the type \nDataSeries\n, in which the historical opening prices are saved.\n\n\nParameter\n\n\nBarsAgo Index Value (see \nBars\n)\n\n\nUsage\n\n\nOpen\nOpen[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of \nCalculateOnClosedBar\n.\n\n\nExample\n\n\n// Opening price for the current period\nPrint(Time[0] + \" \" + Open[0]);\n// Opening price for the bars of 5 periods ago\nPrint(Time[5] + \" \" + Open[5]);\n// Current value for the SMA 14 that is based on the opening prices (rounded)\nPrint(\"SMA(14) calculated using the opening prices: \" + Instrument.Round2TickSize(SMA(Open, 14)[0]));\n\n\n\n\nOpens\n\n\nDescription\n\n\nOpens is an array of data series that contains all open data series.\n\n\nThis array is only useful or meaningful for indicators or strategies that use multiple data from multiple timeframes.\nA new entry is entered into the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nOpens[0] The open data series of the chart timeframe\nOpens[1] The open data series of all bars in a daily timeframe\nOpens[2] The open data series of all bars in a weekly timeframe\n\n\nOpens[0][0] is equivalent to Open[0].\n\n\nIn addition, please see \nMultiBars\n for more information.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within the data series (see \nBars\n)\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nOpens[int barSeriesIndex]\nOpens[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example: \nMultibars\n.\n\n\nHigh\n\n\nDescription\n\n\nHigh is a \nData Series\n of the type \nData Series\n, in which the historical high prices are saved.\n\n\nParameter\n\n\nbarsAgo IndexValue (see \nBars\n)\n\n\nUsage\n\n\nHigh\nHigh[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of \nCalculateOnClosedBar\n.\n\n\nExample\n\n\n// High values of the current period\nPrint(Time[0] + \" \" + High[0]);\n// High values of the bar from 5 periods ago\nPrint(Time[5] + \" \" + High[5]);\n// the current value for the SMA 14 calculated on the basis of the high prices\nPrint(\"SMA(14) Calculated using the high prices: \" + Instrument.Round2TickSize(SMA(High, 14)[0]));\n\n\n\n\nHighs\n\n\nDescription\n\n\nHighs is an array of [\nDataSeries\n][1] that contains all high data series.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new time unit is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nHighs[0] the high data series of the chart timeframe\nHighs[1] the high data series of all bars in a daily timeframe\nHighs[2] the high data series of all bars in a weekly timeframe\n\n\nHighs[0][0] is equivalent to High[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within the data series (see \nBars\n)\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nHighs[int barSeriesIndex]\nHighs[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nPlease see examples under \nMultibars\n.\n\n\nLow\n\n\nDescription\n\n\nLow is a \nDataSeries\n of the type \nDataSeries\n, in which the historical low prices are saved.\n\n\nParameter\n\n\nbarsAgo IndexValue (see \nBars\n)\n\n\nUsage\n\n\nLow\nLow[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property of \nCalculateOnClosedBar\n.\n\n\nExample\n\n\n// Lowest value of the current period\nPrint(Time[0] + \" \" + Low[0]);\n// Lowest value of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Low[5]);\n// The current value for the SMA 14 calculated on the basis of the low prices (smoothed)\nPrint(\"SMA(14) calculated using the high prices: \" + Instrument.Round2TickSize(SMA(Low, 14)[0]));\n\n\n\n\nLows\n\n\nDescription\n\n\nLows is an array of [\nDataSeries\n][1] that contains all \nLow\n data series.\n\n\nThis array is only of value to indicators or strategies that use data from multiple time units.\n\n\nA new entry is added whenever a new time unit is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nLows[0] the low data series for the chart timeframe\nLows[1] the low data series for all bars in a daily timeframe\nLows[2] the low data series for all bars in a weekly timeframe\n\n\nLows[0][0] is equivalent to Low[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nLows[int barSeriesIndex]\nLows[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nClose\n\n\nDescription\n\n\nClose is a \nDataSeries\n of the type \nDataSeries\n, in which the historical closing prices are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nClose\nClose[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nIndicators are usually calculated using the closing prices.\n\n\nExample\n\n\n// Closing price of the current period\nPrint(Time[0] + \" \" + Close[0]);\n// Closing price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Close[5]);\n// Current value for the SMA 14 based on the closing prices\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(Close, 14)[0]));\n// Close does not need to be mentioned since it is used by default\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(14)[0]));\n\n\n\n\nCloses\n\n\nDescription\n\n\nCloses is an array of [\nDataSeries\n][1] that contains all \nLow\n data series.\n\n\nThis array is only of importance to indicators or strategies that use data from multiple time units.\n\n\nA new entry is added to the array whenever a timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nCloses[0] the close data series of the chart timeframe\nCloses[1] the close data series of all bars in a daily timeframe\nCloses[2] the close data series of all bars in a weekly timeframe\n\n\nCloses[0][0] is equivalent to Close[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nCloses[int barSeriesIndex]\nCloses[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nMedian\n\n\nDescription\n\n\nMedian is a \nDataSeries\n of the type \nDataSeries\n, in which the historical median values are saved.\n\n\nThe median price of a bar is calculated using (high + low) / 2\n\n\nSee \nTypical\n & \nWeighted\n.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nMedian\nMedian[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nFurther information about median, typical und weighted:\n\nhttp://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html\n\n\nExample\n\n\n// Median price for the current period\nPrint(Time[0] + \" \" + Median[0]);\n// Median price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Median[5]);\n// Current value for the SMA 14 calculated using the median prices\nPrint(\"SMA(14) calculated using the median prices: \" + Instrument.Round2TickSize(SMA(Median, 14)[0]));\n\n\n\n\nMedians\n\n\nDescription\n\n\nMedians is an array of [\nDataSeries\n][1] that contains all \nMedian\n data series.\n\n\nThis array is only of value to indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new time frame is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nMedians[0] the median data series of the chart timeframe\nMedians[1] the median data series of all bars in a daily timeframe\nMedians[2] the median data series of all bars in a weekly timeframe\n\n\nMedians[0][0] is equivalent to Medians[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nMedians[int barSeriesIndex]\nMedians[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nFurther information on median: \nhttp://www.investopedia.com/terms/m/median.asp\n\n\nExample\n\n\nSee example in \nMultibars\n.\n\n\nTypical\n\n\nDescription\n\n\nTypical is a \nDataSeries\n of the type \nDataSeries\n, in which the historical typical values are saved.\n\n\nThe typical price of a bar is calculated using (high + low + close) / 3.\n\n\nSee \nMedian\n and \nWeighted\n.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nTypical\nTypical[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nFurther information on typical: \nhttps://technicianapp.com/resources/typical-price/\n\n\nExample\n\n\n// Typical price for the current period\nPrint(Time[0] + \" \" + Typical[0]);\n// Typical price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Typical[5]);\n// Current value for the SMA 14 calculated using the typical price\nPrint(\"SMA(14) calculated using the typical price: \" + Instrument.Round2TickSize(SMA(Typical, 14)[0]));\n\n\n\n\nTypicals\n\n\nDescription\n\n\nTypicals is an array of \nDataSeries\n that contains all \nTypical\n data series.\n\n\nThis array is only of value to indicators and strategies that make use of multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTypicals[0] the typical data series of the chart timeframe\nTypicals[1] the typical data series of all bars in a daily timeframe\nTypicals[2] the typical data series of all bars in a weekly timeframe\n\n\nTypicals[0][0] is equivalent to Typicals[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value of the various timeframes\n\n\nUsage\n\n\nTypicals[int barSeriesIndex]\nTypicals[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nWeighted\n\n\nDescription\n\n\nWeighted is a \nDataSeries\n of the type \nDataSeries\n, in which the historical weighted values are saved.\n\n\nThe weighted price of a bar is calculated using the formula (high + low + 2*close) / 4 and then weighted on the closing price.\n\n\nSee also \nMedian\n and \nTypical\n.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nWeighted\n\n\nWeighted[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nInformation regarding weighted: \nhttp://www.stock-trading-infocentre.com/pivot-points.html\n\n\nExample\n\n\n// Weighted price for the current period\nPrint(Time[0] + \" \" + Weighted[0]);\n// Weighted price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Weighted[5]);\n// Current value for the SMA 14 using the weighted price\nPrint(\"SMA(14) calculated using the weighted price: \" + Instrument.Round2TickSize(SMA(Weighted, 14)[0]));\n\n\n\n\nWeighteds\n\n\nDescription\n\n\nWeighteds is an array of [\nDataSeries\n][1] that contains all \nWeighted\n data series.\n\n\nThe array is only of value for indicators and strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nWeighteds[0] the weighted data series of the chart timeframe\nWeighteds[1] the weighted data series of all bars in a daily timeframe\nWeighteds[2] the weighted data series of all bars in a weekly timeframe\n\n\nWeighteds[0][0] is equivalent to Weighteds[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nWeighteds[int barSeriesIndex]\nWeighteds[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example under \nMultibars\n.\n\n\nTime\n\n\nDescription\n\n\nTime is a \nDataSeries\n of the type \nDateTimeSeries\n, in which the timestamps of the individual bars are saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nTime\nTime[int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\n// Timestamp of the current period\nPrint(Time[0]);\n// Timestamp of the bar from 5 periods ago\nPrint(Time[5]);\n\n\n\n\nTimes\n\n\nDescription\n\n\nTimes is an array of \nDataSeries\n that contains all \nTime\n data series.\n\n\nThis array is only of value to indicators and strategies that make use of multiple timeframes.\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTimes[0] the time data series of the chart timeframe\nTimes[1] the time data series of all bars in a daily timeframe\nTimes[2] the time data series of all bars in a weekly timeframe\n\n\nTimes[0][0] is equivalent to Times[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nTimes[int barSeriesIndex]\nTimes[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nVolume\n\n\nDescription\n\n\nVolume is a \nDataSeries\n of the type \nDataSeries\n, in which the historical volume information is saved.\n\n\nParameter\n\n\nbarsAgo Index value (see \nBars\n)\n\n\nUsage\n\n\nVolume\n\n\nVolume[\nint\n barsAgo]\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nThe value returned by the \nVOL()\n indicator is identical with the volume described here;\nfor example, Vol()[3] will have the same value as Volume[3].\n\n\nExample\n\n\n// Volume for the current period\nPrint(Time[0] + \" \" + Volume[0]);\n// Volume of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Volume[5]);\n// Current value for the SMA 14 calculated using the volume\nPrint(\"SMA(14) calculated using the volume: \" + Instrument.Round2TickSize(SMA(Volume, 14)[0]));\n\n\n\n\nVolumes\n\n\nDescription\n\n\nVolumes is an array of \nDataSeries\n that contains all \nVolume\n data series.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nVolumes[0] the volume data series of the chart timeframe\nVolumes[1] the volume data series of all bars in the daily timeframe\nVolumes[2] the volume data series of all bars in the weekly timeframe\n\n\nVolumes[0][0] is equivalent to Volumes[0].\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarsAgo Index value of the individual bars within a data series\n\n\nbarSeriesIndex Index value of the various timeframes\n\n\nUsage\n\n\nVolumes[int barSeriesIndex]\nVolumes[int barSeriesIndex][int barsAgo]\n\n\n\n\nMore Information\n\n\nThe returned value is dependent upon the property \nCalculateOnClosedBar\n.\n\n\nExample\n\n\nSee example \nMultibars\n.\n\n\nTimeFrame\n\n\nDescription\n\n\nTimeFrame is a timeframe object. This property is used to read the current TimeFrame and not to set it.\n\n\nUsage\n\n\nTimeFrame\n\n\n\n\nTimeFrames\n\n\nDescription\n\n\nTimeFrames is an array of timeframe objects that contains a timeframe object for each individual bar object.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nTimeFrames [0] Timeframe of the primary data series (chart timeframe)\nTimeFrames [1] \nPrint\n(TimeFrames[1]); // returns \"1 Day\"\nTimeFrames [2] \nPrint\n(TimeFrames[2]); // returns \"1 Week\"\n\n\nTimeFrames [0] is equivalent to \nTimeFrame\n.\n\n\nSee \nMultiBars\n.\n\n\nParameter\n\n\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nTimeFrames [int barSeriesIndex]\n\n\n\n\nExample\n\n\nif (ProcessingBarSeriesIndex == 0 && ProcessingBarIndex == 0)\nfor (int i = BarsArray.Count-1; i >= 0; i--)\nPrint(\"The Indicator \" + this.Name + \" uses Bars of the Timeframe \" + TimeFrames[i]);\n\n\n\n\nInstruments\n\n\nThe term \"instrument\" denotes a tradable value such as a stock, ETF, future etc.\n\n\nAn instrument has various properties that can be used in AgenaScripts created by the user:\n\n\nInstrument.Compare\n\n\nInstrument.Currency\n\n\nInstrument.Digits\n\n\nInstrument.ETF\n\n\nInstrument.Exchange\n\n\nInstrument.Expiry\n\n\nInstrument.GetCurrencyFactor\n\n\nInstrument.InstrumentType\n\n\nInstrument.MainSector\n\n\nInstrument.Margin\n\n\nInstrument.Name\n\n\nInstrument.PointValue\n\n\nInstrument.Round2TickSize\n\n\nInstrument.Symbol\n\n\nInstrument.TickSize\n\n\nWith the \nOnCalculate()\n method you can use any properties you wish without having to test for a null reference.\nAs soon as the \nOnCalculate()\n function is called up by AgenaScript, an object will become available. If you wish to use these properties outside of \nOnCalculate()\n, you should first perform a test for null references using \nif\n (Bars != \nnull\n)\n\n\nInstrument.Compare\n\n\nDescription\n\n\nThe Instrument.Compare function compares two market prices whilst taking into account the correct number of decimal points. The smallest possible price change is displayed by the value TickSize. This function simplifies the otherwise time-consuming comparison using floating-point operations.\n\n\nParameter\n\n\ndouble value1\ndouble value2\n\n\nReturn value\n\n\nType int\n\n\n1 - value1 is bigger than value2\n-1 - value1 is smaller than value2\n0 - value1 and value2 are equal\n\n\nUsage\n\n\nInstrument.Compare(double Value1, double Value2)\n\n\n\n\nMore Information\n\n\nBe aware this function compares prices based on TickSize.\n If the ticksize of your instrument is 0.01 these prices will be rounded and compared on 2 decimal digits. If you want a regular comparation of two numbers, you should use the operator \"greater than\" (>) or the operator \"smaller than\" (<).\n\n\nMore infomation about \nmath.round()\n\n\nIf the tick size is 0,00001 \u2013 as it usually is with FX values \u2013 then the following will be displayed:\n\n\nCompare(2, 1.99999) a 1, meaning 2 is bigger than 1.99999\nCompare(2, 2.000001) a 0, meaning the values are equal\nCompare(2, 1.999999) a 0, meaning the values are equal\nCompare(2, 2.00001) a -1, meaning 2 is smaller than 2.00001\n\n\nExample\n\n\nPrint(Instrument.Compare(2, 1.999999));\n\n\n\n\nInstrument.Currency\n\n\nDescription\n\n\nInstrument.Currency outputs a currency object that contains the corresponding currency in which the instrument is traded.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nA constant of the type \"public enum currencies\"\n\n\nUsage\n\n\nInstrument.Currency\n\n\nMore Information\n\n\nThe common currencies are: AUD, CAD, EUR, GBP, JPY or USD.\n\n\nExample\n\n\nPrint(Instrument.Name + \" is traded in \" + Instrument.Currency);\n\n\n\n\nInstrument.Digits\n\n\nDescription\n\n\nInstrument.Digits outputs the number of decimal points in which the market price of the instrument is traded.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nint Digits\n\n\nUsage\n\n\nInstrument.Digits\n\n\nMore Information\n\n\nStocks are usually traded to two decimal points. Forex can be traded (depending on the data provider) with 4 or 5 decimal places.\n\n\nThis function is especially useful when formatting the output of various instruments that need rounding. Also see \nTickSize\n and \nInstrument.Round2Ticks\n, \nInstrument.Round2TickSize\n.\n\n\nMore information can be found here: \nFormatting of Numbers\n.\n\n\nExample\n\n\nPrint(\"The value of \" +Instrument.Name + \" is noted with a precision of \" + Instrument.Digits +\" Decimal points.\");\n\n\n\n\nInstrument.ETF\n\n\nDescription\n\n\nInstrument.ETF is used to differentiate between a stock and an ETF. This is necessary since ETFs are considered to be \u201estocks\" by some exchanges.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nType bool\n\n\nUsage\n\n\nInstrument.ETF\n\n\nMore Information\n\n\nWhat is an ETF?\n\n\nWikipedia: \nhttp://de.wikipedia.org/wiki/Exchange-traded_fund\n\n\nExample\n\n\nif (Instrument.InstrumentType == InstrumentType.Stock)\nif (Instrument.ETF)\nPrint(\"The value is an ETF.\");\nelse\nPrint(\"The value is a stock.\");\n\n\n\n\nInstrument.Exchange\n\n\nDescription\n\n\nInstrument.Exchange outputs the description/definition of the current exchange for the current instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nAn exchange object of the type \"public enum exchanges\"\n\n\nUsage\n\n\nInstrument.Exchange\n\n\nMore Information\n\n\nAn overview of various exchange: \nhttps://en.wikipedia.org/wiki/List_of_stock_exchanges\n\n\nExample\n\n\nPrint(\"The instrument \" + Instrument.Name +\" is traded on the \" + Instrument.Exchange + \" exchange.\");\n\n\n\n\nInstrument.Expiry\n\n\nDescription\n\n\nInstrument.Expiry outputs the date (month and year) of the expiry of a financial instrument. Only derivative instruments such as options or futures will have an expiry date.\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nType DateTime\n\n\nFor instruments without an expiry date the returned value is set to DateTime.MaxValue(= 31.12.9999 23.59:59)\n\n\nUsage\n\n\nInstrument.Expiry\n\n\nMore Information\n\n\nThe expiry date (expiry) can also be seen within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\"The instrument \" + Instrument.Name +\" will expire on \" + Instrument.Expiry);\n\n\n\n\nInstrument.GetCurrencyFactor\n\n\nDescription\n\n\nInstrument.GetCurrencyFactor returns a conversion factor that can be used to convert an instrument's currency to the account's currency.\n\n\nParameter\n\n\nType Currencies\n\n\nReturn Value\n\n\nType double\n\n\nUsage\n\n\nInstrument.GetCurrencyFactor(Currencies)\n\n\nMore Information\n\n\nCommon currencies are.B. AUD, CAD, EUR, GBP, JPY oder USD.\n\n\nExample\n\n\nProtected override void OnCalculate()\n{\n   double currFactor = Instrument.GetCurrencyFactor(Account.Currency);\n   Print(Close[0] + \" in \" + Instrument.Currency.ToString() + \" = \" + (Close[0] * currFactor) + \" in \" + Account.Currency.ToString());\n}\n\n\n\n\nInstrument.InstrumentType\n\n\nDescription\n\n\nInstrument.InstrumentType outputs a type object of the trading instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nObject of the type \"public enum instrument\"\n\n\nUsage\n\n\nInstrument.InstrumentType\n\n\nMore Information\n\n\nPotential values are: future, stock, index, currency, option, CFD and unknown.\n\n\nThere is no ETF type. ETFs are considered to be of the type \"stock\" \u2013 see \nInstrument.ETF\n.\n\n\nThe instrument type can also be viewed within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\"The instrument \" + Instrument.Name + \" is of the type \" + Instrument.InstrumentType);\n\n\n\n\nInstrument.MainSector\n\n\nDescription\n\n\nInstrument.MainSector returns the main sector of the trading instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nString\n\n\nUsage\n\n\nInstrument.MainSector\n\n\nMore Information\n\n\nThe main sector is also visible in the instrument escort:\n\n\n\nExample\n\n\nPrint(\"Das Instrument \" + Instrument.Name + \" ist im Sektor \" + Instrument.MainSector + \" t\u00e4tig.\");\n\n\n\n\nInstrument.Margin\n\n\nDescription\n\n\nInstrument.MainSector returns the required margin of the trading instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nint\n\n\nUsage\n\n\nInstrument.Margin\n\n\nMore Information\n\n\nMargin is also visible in the instrument escort:\n\n\n\nExample\n\n\nPrint(\"Das Instrument \" + Instrument.Name + \" has a margin of \" + Instrument.Margin);\n\n\n\n\nInstrument.Name\n\n\nDescription\n\n\nInstrument.Name outputs the name/description of the trading instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nType string\n\n\nUsage\n\n\nInstrument.Name\n\n\nMore Information\n\n\nThe instrument name can also be seen within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\"The currently loaded instrument inside the chart is named \" + Instrument.Name);\n\n\n\n\nInstrument.PointValue\n\n\nDescription\n\n\nInstrument.PointValue outputs the monetary value for a full point movement of the instrument.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\ndouble \u2013 point value\n\n\nUsage\n\n\nInstrument.PointValue\n\n\nMore Information\n\n\nExample for various point values\n (per amount, CFD, futures contract, lot etc.)\n\n\nStock: generally 1.00 Euro or 1.00 USD.\nEUR/USD: 100,000 USD\nDAX future: 25.00 Euro\n\n\nTick Value\n\n\nThe tick value can be calculated by multiplying the point value with the tick size.\n\n\nFor example, the E-mini S&P 500 has a point value of $50. The tick size equals 0.25. This means that there are 4 ticks in one full point for the E-mini S&P 500.\nSince 50 * 0.25 = 50/4 this means that the tick value is $12.50.\n\n\nThe point value can also be viewed within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\"When \" + Instrument.Name + \" rises for one full point then this is equal to \" + Instrument.PointValue + \" \" + Instrument.Currency);\n\n\n\n\nInstrument.Round2TickSize\n\n\nDescription\n\n\nThe function Instrument.Round2TickSize rounds the supplied market price to the smallest value divisible by the tick size of the instrument.\n\n\nParameter\n\n\ndouble \u2013 market value\n\n\nReturn value\n\n\ndouble\n\n\nUsage\n\n\nInstrument.Round2TickSize(double MarketPrice)\n\n\n\n\nMore Information\n\n\nThe number of decimal places to which the price is rounded depends on the instrument.\nIf, for example, an instrument is a stock, then the rounding will be performed to 2 decimal places. For a Forex instrument, it may be carried out to 4 or 5 decimal places.\n\n\nSee \nTickSize\n and \nInstrument.Digits\n.\n\n\nExample of professional \nFormatting\n, \nFormatting of Numbers\n.\n\n\nExample\n\n\ndouble Price = 12.3456789;\nPrint(Price + \" rounded for a \" + Instrument.Name + \" valid value is \" + Instrument.Round2TickSize(Price));\n\n\n\n\nInstrument.Symbol\n\n\nDescription\n\n\nInstrument.Symbol outputs the symbol that identifies the trading instrument within AgenaTrader. Depending on the symbol, the mappings for the various data feed providers and brokers will be managed in different ways.\n\n\nParameter\n\n\nnone\n\n\nReturn value\n\n\nType string\n\n\nUsage\n\n\nInstrument.Symbol\n\n\nMore Information\n\n\nBy using symbols, identical stocks being traded on different exchanges can be identified and separated from each other. The symbol BMW.DE is the BMW stock on the XETRA exchange. BMW.CFG is the CFD for the BMW stock.\n\n\nThe instrument symbol can also be viewed within the Instrument Escort:\n\n\n\n\nExample\n\n\nPrint(\"The instrument currently loaded within the chart has the symbol: \" + Instrument.Symbol);\n\n\n\n\nInstrument.TickSize\n\n\nDescription\n\n\nThe tick size is the smallest measurable unit that a financial instrument can move. This is usually called 1 tick.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\ndouble\n\n\nUsage\n\n\nInstrument.TickSize or simply TickSize\n\n\nMore Information\n\n\nThe keyword \nTickSize\n is equivalent to Instrument.TickSize. Both information requests will produce the same value and are thus interchangeable.\n\n\nExample\n\n\nStock: 0.01\nES future: 0.25\nEUR/USD: 0.00001\n\n\nSee \nInstrument.PointValue\n and \nInstrument.Digits\n.\n\n\nExamples of professional \nFormatting\n, \nFormatting of Numbers\n.\n\n\nExample\n\n\nPrint(\"The value of \" + Instrument.Name + \" can change for a minimum of \" + Instrument.TickSize + \" Tick(s).\");\n\n\n\n\nMultibars\n\n\nDescription\n\n\nAn indicator or a strategy will always have the same underlying timeframe-units as those units being displayed within the chart. The values of an SMA(14) indicator displayed in a 5 minute chart will be calculated based on the last fourteen 5 minute bars. A daily chart, on the other hand, would use the closing prices of the past 14 days in order to calculate this value.\nThe same method applies for your self-programmed indicators. A 5 minute chart will call up the \nOnCalculate()\n for each 5 minute bar.\nIf you want your self-created indicator to use a different timeframe, this is possible using multibars.\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n    [Description(\"Multibar Demo\")]\n    // The indicator requires daily and weekly data\n    [TimeFrameRequirements(\"1 Day\", \"1 Week\")]\n    public class MultiBarDemo : UserIndicator\n    {\n        private static readonly TimeFrame TF_Day = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\n        private static readonly TimeFrame TF_Week = new TimeFrame(DatafeedHistoryPeriodicity.Week, 1);\n\n        protected override void OnBarsRequirements()\n        {\n            Add(TF_Day);\n            Add(TF_Week);\n        }\n\n        protected override void OnInit()\n        {\n            CalculateOnClosedBar = true;\n        }\n        protected override void OnCalculate()\n        {\n            // The current value for the SMA 14 in the timeframe of the chart\n            Print(\"TF0: \" + SMA(Closes[0], 14)[0]);\n            // The current value for the SMA 14 in a daily timeframe\n            Print(\"TF1: \" + SMA(Closes[1], 14)[0]);\n            // Current value for the SMA 14 in a weekly timeframe\n            Print(\"TF2: \" + SMA(Closes[2], 14)[0]);\n        }\n    }\n}\n\n\n\n\nAdditional Notes\n\n\nWhen using additional timeframes, a further entry with the respective data series for the bars of the new timeframe will be added to the arrays \nOpens\n, \nHighs\n, \nLows\n, \nCloses\n, \nMedians\n, \nTypicals\n, \nWeighteds\n, \nTimes\n and \nVolumes\n. The indexing will occur in the order of the addition of the new timeframes.\nCloses[0][0] is equivalent to Close[0].\nCloses[1][0] equals the current closing price for the daily data series\nCloses[2][0] equals the current closing price for the weekly data series\n\n\n\"Closes\" is, of course, interchangeable with Opens, Highs, Lows etc.\n\n\nSee \nProcessingBarIndexes\n, \nProcessingBarSeriesIndex\n, \nTimeFrames\n, \nTimeFrameRequirements\n.\n\n\nAdditional syntax methods are available for multibars:\n\n\n// Declare the variable TF_DAY and define it\nprivate static readonly TimeFrame TF_Day = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\nprivate static readonly TimeFrame TF_Week = new TimeFrame(DatafeedHistoryPeriodicity.Week, 1);\n// The following instruction is identical to double d = Closes[1][0];\ndouble d = MultiBars.GetBarsItem(TF_Day).Close[0];\n// The following instruction is identical to double w = Closes[2][0];\ndouble w = MultiBars.GetBarsItem(TF_Week).Close[0];\n\n\n\n\nProcessingBarIndexes\n\n\nDescription\n\n\nProcessingBarIndexes is an array of int values that contains the number of \nProcessingBarIndex\n for each bar.\n\n\nThis array is only of value for indicators or strategies that use data from multiple timeframes.\n\n\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.\n\n\nWith \n[TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]\n the array will contain 3 entries:\n\n\nProcessingBarIndexes[0] Current bar for the primary data series (chart timeframe)\nProcessingBarIndexes[1] Current bar for the daily bars\nProcessingBarIndexes[2] Current bar for the weekly bars\n\n\nProcessingBarIndexes[0] is equivalent to \nProcessingBarIndex\n.\n\n\nAlso see \nMultiBars\n.\n\n\nParameter\n\n\nbarSeriesIndex Index value for the various timeframes\n\n\nUsage\n\n\nProcessingBarIndexes[int barSeriesIndex]\n\n\n\n\nExample\n\n\n//Ensure that a minimum of 20 bars is loaded\nfor (int i=0; i<ProcessingBarIndexes.Count; i++)\nif (ProcessingBarIndexes[i] < 20) return;\n\n\n\n\nProcessingBarSeriesIndex\n\n\nDescription\n\n\nWithin a multibars script, multiple bars objects are available. The OnCalculate() method\nwill therefore also be called up for every bar within your script. In order to include/exclude events of specific data series, you can use the ProcessingBarSeriesIndex property.\n\n\nProcessingBarSeriesIndex is only of value for indicators or strategies that use data from multiple timeframes.\nWith \n[TimeFrameRequirements(\"1 Day\", \"1 Week\")]\n two timeframes will be added to the primary chart timeframe.\n\n\nIf OnCalculate() is called up by the primary data series, then ProcessingBarSeriesIndex will equal zero. If OnCalculate() is called up by the daily bars, then ProcessingBarSeriesIndex will equal 1. Weekly bars will have a value of 2.\n\n\nSee \nMultibars\n and \nProcessingBarIndexes\n.\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nProcessingBarSeriesIndex\n\n\nMore Information\n\n\nWithin a script that only works with primary timeframes, the value will always equal zero.\n\n\nExample\n\n\n// To demonstrate the methodology\n// set CalculateOnClosedBar=false\nPrint(Time[0] + \" \" + ProcessingBarSeriesIndex);\n// Calculate only for the chart timeframe\nprotected override void OnCalculate()\n{\nif (ProcessingBarSeriesIndex > 0) return;\n// Logic for the primary data series\n}",
            "title": "Handling bars and instruments"
        },
        {
            "location": "/handling_bars_and_instruments/#handling-bars-and-instruments",
            "text": "Data is understood as information that is retrieved externally and uploaded to AgenaTrader, or as data series that are created by AgenaScripts.  Further detailed information can be found using the appropriate shortcuts:  Bars  Collections  Data series  Instruments  Multibars",
            "title": "Handling bars and instruments"
        },
        {
            "location": "/handling_bars_and_instruments/#bars",
            "text": "",
            "title": "Bars"
        },
        {
            "location": "/handling_bars_and_instruments/#functionality",
            "text": "A classical indicator calculates one or multiple values using an existing data series.  Data series can be anything from closing prices to daily lows or values of an hourly period etc.  Every period (meaning all candles of one day, one hour etc.) is assigned one or more indicator values.\nThe following example is based on an indicator value, such as with a moving average, for example.\nTo calculate a smoothed moving average, AgenaTrader needs a data series. In this example we will use the closing prices. All closing prices of a bar (candle) that are represented in the chart will be saved in a list and indexed.  The current closing price, meaning the closing price of the bar that is on the right-hand side of the chart, will be assigned an index of 0. The bar to the left of that will have an index of 1 and so on. The oldest bar displayed will have an index value of 500.  Whenever a new bar is added within a session it will become the new index 0; the bar to the left of it, which previously had an index of 0, will become index 1 and so on. The oldest bar will become index 501.\nWithin a script (a self-created program/algorithm) the  Close  will be representative for the array (list) of all closing prices.\nThe last closing price is thus  Close [0] ; the closing price previous to this will become  Close [1] , the value before that will become  Close [2]  and the oldest bar will be  Close [501] . The number within the squared brackets represents the index. AgenaTrader allows you to use the \u201ebars ago\" expression for this in general cases.  Obviously, every bar will not only have a closing value but also a  High ,  Low ,  Open ,  Median ,  Typical ,  Weighted ,  Time  and  Volume . Thus, the high of the candle that occurred 10 days ago will be  High [10] , yesterday\u2019s low  Low [1] ...  Important tip:  The previous examples all assume that the calculations will occur at the end of a period. The value of the currently running index is not being taken into consideration.  If you wish to use the values of the currently forming candle then you will need to set the value of  CalculateOnClosedBar  to \u201efalse\".  In this case the currently running bar will have the value 0, the bar next to the current bar will have the value 1 and so on. The oldest bar (as in the example above) would now have the value 502.  With close [0] you would receive the most recent value of the last price that your data provider transmitted to AgenaTrader. All values of the bar (high [0], low [0]\u2026) may still change as long as the bar is not yet finished/closed and a new bar has not yet started. Only the open [0] value will not change.",
            "title": "Functionality"
        },
        {
            "location": "/handling_bars_and_instruments/#properties",
            "text": "",
            "title": "Properties"
        },
        {
            "location": "/handling_bars_and_instruments/#properties-of-bars",
            "text": "\"Bars\" represents a list of all bars (candles) within a chart (see  Functionality ,  Bars ).  Bars ( public  IBars Bars) can be used directly in a script and equates to BarsArray [0] (see Bars.GetNextSessionTimeSpan for more information).  The list of bars itself has many properties that can be used in AgenaScript. Properties are always indicated by a dot before the objects (in this case bars, list of candles).  Bars.Count  Bars.CurrentSessionBeginTime  Bars.CurrentSessionEndTime  Bars.GetBar  Bars.GetBarIndex  Bars.GetBarsAgo  Bars.GetByIndex  Bars.GetClose  Bars.GetHigh  Bars.GetLow  Bars.GetNextSessionTimeSpan  Bars.GetOpen  Bars.GetSessionBegin  Bars.GetTime  Bars.GetVolume  Bars.Instrument  Bars.IsEod  Bars.IsFalling  Bars.IsFirstBarInSession  Bars.IsGrowing  Bars.IsIntraday  Bars.IsNtb  Bars.SessionBreak  Bars.LastBarCompleteness  Bars.NextSessionBeginTime  Bars.NextSessionEndTime  Bars.TailBottom  Bars.TailTop  Bars.TicksCountForLastBar  Bars.TicksCountInTotal  Bars.TimeFrame  BarsCountForSession  IsProcessingBarIndexLast  With the  OnCalculate()  method you can use any properties you want without having to test for a null reference.\nAs soon as the function  OnCalculate()  is called up by AgenaScript, it is assumed that an object is also available. If you wish to use these properties outside of  OnCalculate()  then you should first perform a test for null references using  if  (Bars !=  null ).",
            "title": "Properties of Bars"
        },
        {
            "location": "/handling_bars_and_instruments/#barscount",
            "text": "",
            "title": "Bars.Count"
        },
        {
            "location": "/handling_bars_and_instruments/#description",
            "text": "Bars.Count gives you the amount of bars in a data series.  See  Properties  for additional information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value",
            "text": "Type int Amount of Bars",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage",
            "text": "Bars.Count",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information",
            "text": "The value of  ProcessingBarIndex  can only be lesser than or equal to Bars.Count - 1  When you specify how many bars are to be loaded within AgenaTrader, then the value of Bars.Count is equal to this setting. In the following example, Bars.Count would give back a value of 500.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example",
            "text": "Print (\"There are a total of\" + Bars.Count + \"bars available.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barscurrentsessionbegintime",
            "text": "",
            "title": "Bars.CurrentSessionBeginTime"
        },
        {
            "location": "/handling_bars_and_instruments/#description_1",
            "text": "Bars.CurrentSessionBeginTime outputs the date and time for the beginning of the current trading session.  Date and time for the beginning of the current trading session will be displayed correctly when the function is used on a bar that has occurred in the past.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_1",
            "text": "Type DateTime",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_1",
            "text": "Bars.GetSessionBegin",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_1",
            "text": "The time for the returned value will equal the starting time defined in the Market Escort for the specified exchange. The value itself is set within the Instrument Escort and can be called up in AgenaScript using the function  Instrument.Exchange  .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_1",
            "text": "Print(\"The currently running trading session started at \" + Bars.CurrentSessionBeginTime );",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barscurrentsessionendtime",
            "text": "",
            "title": "Bars.CurrentSessionEndTime"
        },
        {
            "location": "/handling_bars_and_instruments/#description_2",
            "text": "Bars.CurrentSessionEndTime outputs the time for the end of the currently running trading session.\nDate and time for the end of the current trading session will, in this case, also be outputted correctly when the function is used on a previous bar.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_1",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_2",
            "text": "Type DateTime",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_2",
            "text": "Bars.GetSessionEnd",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_2",
            "text": "The time for the returned value will correlate with the end time of the trading session defined in the Market Escort for the exchange. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the  Instrument.Exchange  function.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_2",
            "text": "Print(\"The current trading session will end at \" + Bars.CurrentSessionEndTime);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetbar",
            "text": "",
            "title": "Bars.GetBar"
        },
        {
            "location": "/handling_bars_and_instruments/#description_3",
            "text": "Bars.GetBar outputs the first bars (from oldest to newest) that correspond to the specified date/time.  See  Bars.GetBarsAgo ,  Bars.GetByIndex ,  Bars.GetBarIndex .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_2",
            "text": "Type DateTime",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_3",
            "text": "Type IBar Bar Object, for the bars corresponding to the timestamp  For a timestamp older than the oldest bar: 0 (null)\nFor a timestamp younger than the newest bar: index of the last bar",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_3",
            "text": "Bars.GetBar(DateTime time)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_3",
            "text": "For the indexing of bars please see  Functionality ,  Bars  For more information about using DateTime see  http://msdn.microsoft.com/de-de/library/system.datetime.aspx",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_3",
            "text": "Print (\"The closing price for 01.03.2012 at 18:00:00 was \" + Bars.GetBar(new DateTime(2012, 01, 03, 18, 0, 0)).Close);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetbarindex",
            "text": "",
            "title": "Bars.GetBarIndex"
        },
        {
            "location": "/handling_bars_and_instruments/#description_4",
            "text": "Bars.GetBarIndex outputs the index of a bar \u2013 you can input either a bar object or a date-time object using this method.  See  Bars.GetBar ,  Bars.GetBarsAgo ,  Bars.GetByIndex .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_3",
            "text": "Type IBar bar\nor\nType DateTime",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_4",
            "text": "Type int The bar index of the specified bar object or DateTime object",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_4",
            "text": "Bars.GetBarIndex (IBar bar)\nBars.GetBarIndex (DateTime dt)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_4",
            "text": "For more information about indexing see  Functionality ,  Bars",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_4",
            "text": "int barsAgo = 5;\nIBar bar = Bars.GetBar(Time[barsAgo]);\nPrint(barsAgo + \" and \" + Bars.GetBarIndex(bar) + \" are equal in this example.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetbarsago",
            "text": "",
            "title": "Bars.GetBarsAgo"
        },
        {
            "location": "/handling_bars_and_instruments/#description_5",
            "text": "Bars.GetBarsAgo outputs the index of the first bars (from oldest to newest) that correspond to the specified date/time.  See:  Bars.GetBar ,  Bars.GetByIndex ,  Bars.GetBarIndex .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_4",
            "text": "Type DateTime",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_5",
            "text": "Type int Index of the bar that corresponds to the timestamp  With a timestamp older than the oldest bar: 0 (null)\nWith a timestamp newer than the youngest bar: index of the last bar",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_5",
            "text": "Bars.GetBarsAgo(DateTime time)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_5",
            "text": "For more information about indexing please see  Functionality ,  Bars  For more information about using DateTime see  http://msdn.microsoft.com/de-de/library/system.datetime.aspx",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_5",
            "text": "Print(\"The bar for 01.03.2012 at 18:00:00 O\u2019clock has an index of \" + Bars.GetBarsAgo(new DateTime(2012, 01, 03, 18, 0, 0)));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetbyindex",
            "text": "",
            "title": "Bars.GetByIndex"
        },
        {
            "location": "/handling_bars_and_instruments/#description_6",
            "text": "Bars.GetByIndex outputs the index for the specified bar object  See  Bars.GetBar ,  Bars.GetBarsAgo ,  Bars.GetBarIndex .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_5",
            "text": "Type int Index",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_6",
            "text": "Type IBar Bar object for the specified index",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_6",
            "text": "Bars.GetByIndex (int Index)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_6",
            "text": "For indexing of bars see  Functionality ,  Bars",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_6",
            "text": "Print(Close[0] + \" and \" + Bars.GetByIndex(ProcessingBarIndex).Close + \" are equal in this example.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetclose",
            "text": "Bars.GetClose(int index) \u2013 see  Bars.GetOpen .",
            "title": "Bars.GetClose"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgethigh",
            "text": "Bars.GetHigh(int index) \u2013 see  Bars.GetOpen .",
            "title": "Bars.GetHigh"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetlow",
            "text": "Bars.GetLow(int index) \u2013 see  Bars.GetOpen .",
            "title": "Bars.GetLow"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetnextsessiontimespan",
            "text": "",
            "title": "Bars.GetNextSessionTimeSpan"
        },
        {
            "location": "/handling_bars_and_instruments/#description_7",
            "text": "Bars.GetNextSessionTimeSpan outputs the date and time for the beginning and end of a trading session.  See  Bars.CurrentSessionBeginTime ,  Bars.CurrentSessionEndTime ,  Bars.NextSessionBeginTime ,  Bars.NextSessionEndTime .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_6",
            "text": "DateTime  time  Date or time for which the data of the following trading session will be scanned/searched.    iBars  bars  Bar object for which the data will be scanned/searched.    int  barsago  Number of days in the past for which the data will be searched/scanned.",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_7",
            "text": "DateTime session begin\nDateTime session end  Note: \nThe date for the beginning and the end of a trading session are connected components. If the specified date corresponds to the end date of the current trading session then the returned value for the beginning of a trading session may already be in the past. In this case the date for the following trading session cannot be returned.",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_7",
            "text": "Bars.GetNextSessionTimeSpan(Bars bars, int barsAgo, out DateTime sessionBegin, out DateTime sessionEnd)\nBars.GetNextSessionTimeSpan(DateTime time, out DateTime sessionBegin, out DateTime sessionEnd)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_7",
            "text": "The two signatures will not necessarily output the same result.\nWhen using the bar signature, the supplied bar will be inspected for its session template association. The beginning and end of the next session will be taken from this template.  When using the time signature, the date and time of the supplied bar will be used to calculate the data for the current and the following sessions.  When using the time signature, a timestamp is transmitted that corresponds exactly to the beginning or the end time of a session.  More information can be found here  http://msdn.microsoft.com/de-de/library/system.datetime.aspx",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_7",
            "text": "DateTime sessionBegin;\nDateTime sessionEnd;\nprotected override void OnCalculate()\n{\nBars.GetNextSessionTimeSpan(Bars, 0, out sessionBegin, out sessionEnd);\nPrint(\"Session Start: \" + sessionBegin + \" Session End: \" + sessionEnd);\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetopen",
            "text": "",
            "title": "Bars.GetOpen"
        },
        {
            "location": "/handling_bars_and_instruments/#description_8",
            "text": "For reasons of compatibility, the following methods are available.   Bars.GetOpen(int index) outputs the open for the bars referenced with <index>.  Bars.GetHigh(int index) outputs the high for the bars referenced with <index>.  Bars.GetLow(int index) outputs the low for the bars referenced with <index>.  Bars.GetClose(int index) outputs the close for the bars referenced with <index>.  Bars.GetTime(int index) outputs the timestamp for the bars referenced with <index>.  Bars.GetVolume(int index) outputs the volume for the bars referenced with <index>.   Caution : The indexing will deviate from the  Indexing ,  Bars  normally used.\nHere, the indexing will begin with 0 for the oldest bar (on the left of the chart) and end with the newest bar on the right of the chart (=Bars.Count-1).  The indexing can easily be recalculated:  private int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnClosedBar?1:0));\n}",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_7",
            "text": "int index (0 .. Bars.Count-1)",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_8",
            "text": "Type double for GetOpen, GetHigh, GetLow, GetClose and GetVolume  Type DateTime for GetTime",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetsessionbegin",
            "text": "",
            "title": "Bars.GetSessionBegin"
        },
        {
            "location": "/handling_bars_and_instruments/#description_9",
            "text": "Bars.GetSessionBegin provides the date and time of the particular session start. The date and time for the start of the current trading session are also correctly indicated when the function is called from a bar in the past. See also other  Properties  of bars.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_8",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_9",
            "text": "Type DateTime",
            "title": "Return value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_8",
            "text": "Bars.GetSessionBegin(DateTime dt)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#further-information",
            "text": "The time of the returned value corresponds to the start time of the trading session.  The relevant trading center which is specified in the MarketEscort. The trading place used for the value is set in the Instrumet Escort and can be determined in AgenaSript with the Instrument.Exchange function.",
            "title": "Further Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_8",
            "text": "Print(\"Die Handelssitzung am 25.03.2015 hat um \"+ Bars.GetSessionBegin(new DateTime(2015, 03, 25)) + \" begonnen.\");\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgettime",
            "text": "Bars.GetTime(int index) \u2013 see  Bars.GetOpen .",
            "title": "Bars.GetTime"
        },
        {
            "location": "/handling_bars_and_instruments/#barsgetvolume",
            "text": "Bars.GetVolume(int index) \u2013 see  Bars.GetOpen .",
            "title": "Bars.GetVolume"
        },
        {
            "location": "/handling_bars_and_instruments/#barsinstrument",
            "text": "",
            "title": "Bars.Instrument"
        },
        {
            "location": "/handling_bars_and_instruments/#description_10",
            "text": "Bars.Instrument outputs an instrument object for the trading instrument displayed within the chart.  See  Properties  for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_9",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_10",
            "text": "Type Instrument",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_9",
            "text": "Bars.Instrument",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_8",
            "text": "For more information regarding the trading instruments please see  Instruments .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_9",
            "text": "// both outputs will provide the same result\nPrint(\"The currently displayed trading instrument has the symbol: \" + Bars.Instrument);\nInstrument i = Bars.Instrument;\nPrint(\"The currently displayed trading instrument has the symbol \" + i.Symbol);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsiseod",
            "text": "",
            "title": "Bars.IsEod"
        },
        {
            "location": "/handling_bars_and_instruments/#description_11",
            "text": "Bars.IsEod can be used to check whether they are end-of-day bars.  See  Properties  for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_10",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_11",
            "text": "Type bool",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_10",
            "text": "Bars.IsEod",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_9",
            "text": "Within  OnCalculate() , this property can be used without having to test for null reference. As soon as the method OnCalculate () is called by AgenaScript, there is always a bar object.  If this property  used outside of OnCalculate (), then a corresponding test should be set to zero reference, e.g. With if (bars! = Null).",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_10",
            "text": "Print(\"The bars are EOD: \" + Bars.IsEod);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsisfalling",
            "text": "",
            "title": "Bars.IsFalling"
        },
        {
            "location": "/handling_bars_and_instruments/#description_12",
            "text": "Bar properties used when Bar is falling down.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_11",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_12",
            "text": "None",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_11",
            "text": "Bars[0].IsFalling;",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#barsisfirstbarinsession",
            "text": "",
            "title": "Bars.IsFirstBarInSession"
        },
        {
            "location": "/handling_bars_and_instruments/#description_13",
            "text": "With Bars.IsFirstBarInSession you can determine whether the current bar is the first bar of the trading session.  See  Properties  of bars for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_13",
            "text": "Type bool  true : The bar is the first bar of the current trading session false : The bar is not the first bar of the current trading session",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_12",
            "text": "Bars.IsFirstBarInSession",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_10",
            "text": "With  OnCalculate()  this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up, an object will become available.\nIf this property is called up outside of OnCalculate() you should test for a null reference using if (Bars != null).",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_11",
            "text": "if (Bars.IsFirstBarInSession)\nPrint (\"The current trading session started at\" + Time [0]);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsisgrowing",
            "text": "",
            "title": "Bars.isGrowing"
        },
        {
            "location": "/handling_bars_and_instruments/#description_14",
            "text": "Bar properties used when Bar is growing up.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_12",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_14",
            "text": "None",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_13",
            "text": "Bars[0].isGrowing;",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#barsisintraday",
            "text": "",
            "title": "Bars.IsIntraday"
        },
        {
            "location": "/handling_bars_and_instruments/#description_15",
            "text": "Bars.IsIntraday returns a boolean which indicates if the TimeFrame is intra-day.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_15",
            "text": "bool  It returns \"true\" if TimeFrame is intra-day (e.g. 1 min, 15 min, 1 hour, etc.) and \"false\" in other cases.",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_14",
            "text": "Bars.IsIntraday",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_12",
            "text": "if(Bars.IsIntraday) {\n    Print(\"TimeFrame is Intraday.\");\n} else {\n    Print(\"TimeFrame is not Intraday.\");\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsisntb",
            "text": "",
            "title": "Bars.IsNtb"
        },
        {
            "location": "/handling_bars_and_instruments/#description_16",
            "text": "With Bars.IsNtb it can be checked whether it is not-time-based bars. For example Ntb bars are Point & Figure or Renko Charts.  See  Properties  for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_13",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_16",
            "text": "Type bool",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_15",
            "text": "Bars.IsNtb",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_11",
            "text": "OnCalculate()  property can be used without having to test for null reference first. As soon as the method OnCalculate() is called by AgenaScript, there is always a bar object. If this property is used outside of OnCalculate(), then a corresponding test should be set to zero reference, e.g. With if (bars! = Null).",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_13",
            "text": "Print(\"The bars are Ntb: \" + Bars.IsNtb);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsissessionbreak",
            "text": "",
            "title": "Bars.IsSessionBreak"
        },
        {
            "location": "/handling_bars_and_instruments/#description_17",
            "text": "Bars.IsSessionBreak can be used to determine whether the bars are within the commercial trading session in the commercial breaks defined in the marketplace escort.  See  Properties  for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_14",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_17",
            "text": "Type bool",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_16",
            "text": "Bars.IsSessionBreak",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_12",
            "text": "",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_14",
            "text": "if (Bars.IsSessionBreak)\n{\n    Print(\"The stock exchange Xetra has just a trade pause.\");\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barslastbarcompleteness",
            "text": "",
            "title": "Bars.LastBarCompleteness"
        },
        {
            "location": "/handling_bars_and_instruments/#description_18",
            "text": "Bars.LastBarCompleteness outputs the value that displays what percentage a bar has already completed. A bar with a period of 10 minutes has completed 50% after 5 minutes.  For non-time-based charts (Kagi, LineBreak, Renko, Range, P&F etc.) this will output 0 during backtesting.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_18",
            "text": "double  A percentage value; 30% will be outputted as 0.3",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_17",
            "text": "Bars.LastBarCompleteness",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_13",
            "text": "With  OnCalculate()  this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnCalculate() you should test for a null reference before executing it. You can test using  if  (Bars !=  null )",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_15",
            "text": "// A 60 minute chart is looked at from an intraday perspective\n// every 5 minutes before the current bar closes\n// an acoustic signal shall be played\n// 55 min. equals 92%\nbool remind = false;\nprotected override void OnCalculate()\n{\nif (FirstTickOfBar) remind = true;\n    if (remind && Bars.LastBarCompleteness >= 0.92)\n    {\n    remind = false;\n    PlaySound(\"Alert1\");\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsnextsessionbegintime",
            "text": "",
            "title": "Bars.NextSessionBeginTime"
        },
        {
            "location": "/handling_bars_and_instruments/#description_19",
            "text": "Bars.NextSessionBeginTime outputs the date and time for the start of the next trading session.\nDate and time for the next session will be correctly outputted when the function is used on a bar in the past.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_15",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_19",
            "text": "Type DateTime",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_18",
            "text": "Bars.GetSessionNextBegin",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_14",
            "text": "The time for the returned value will correlate to the value displayed in the MarketEscort. The value can be set within the Instrument Escort and can be called up using the  Instrument.Exchange  function.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_16",
            "text": "Print(\"The next trading session starts at \" + Bars.NextSessionBeginTime);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barsnextsessionendtime",
            "text": "",
            "title": "Bars.NextSessionEndTime"
        },
        {
            "location": "/handling_bars_and_instruments/#description_20",
            "text": "Bars.NextSessionEndTime outputs the date and time for the end of the next session.\nSee  Properties  for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_16",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_20",
            "text": "Type DateTime",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_19",
            "text": "Bars.GetSessionNextEnd",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_15",
            "text": "The time for the returned value will correlate with the value specified within the MarketEscort. The value itself can be set within the Instrument Escort and can be called up with AgenaScript using the  Instrument.Exchange  function.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_17",
            "text": "Print(\"The next trading session ends at \" + Bars.NextSessionEndTime);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barstailbottom",
            "text": "",
            "title": "Bars.TailBottom"
        },
        {
            "location": "/handling_bars_and_instruments/#description_21",
            "text": "With this property you are able to get the height of the bottom candle tail.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_17",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_21",
            "text": "None",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_20",
            "text": "Bars[0].TailBottom;",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_18",
            "text": "Print(\"The height of the bottom candle tail is: \" + Bars.TailBottom);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barstailtop",
            "text": "",
            "title": "Bars.TailTop"
        },
        {
            "location": "/handling_bars_and_instruments/#description_22",
            "text": "With this property you are able to get the height of the top candle tail.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_18",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_22",
            "text": "None",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_21",
            "text": "Bars[0].TailTop;",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_19",
            "text": "Print(\"The height of the top candle tail is: \" + Bars.TailTop);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barstickscountforlastbar",
            "text": "",
            "title": "Bars.TicksCountForLastBar"
        },
        {
            "location": "/handling_bars_and_instruments/#description_23",
            "text": "Bars.TicksCountForLastBar outputs the total numbers of ticks contained within a bar.  More information can be found in  Properties  of bars.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_19",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_23",
            "text": "Type int",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_22",
            "text": "Bars.TicksCountForLastBar",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_16",
            "text": "With  OnCalculate()  this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnCalculate(), you should test for a null reference before executing it. You can test using  if  (Bars !=  null )",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_20",
            "text": "Print(\"The current bar consists of \" + Bars.TicksCountForLastBar + \" Ticks.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barstickscountintotal",
            "text": "",
            "title": "Bars.TicksCountInTotal"
        },
        {
            "location": "/handling_bars_and_instruments/#description_24",
            "text": "Bars.TicksCountInTotal outputs the total number of ticks from the moment the function is called up.  More information can be found here:  Properties .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_20",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_24",
            "text": "Type int",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_23",
            "text": "Bars.TicksCountInTotal",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_17",
            "text": "The data type int has a positive value range of 2147483647. When you assume 10 ticks per second, there will be no overlaps within 2 trading months with a daily runtime of 24 hours.  With  OnCalculate()  this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnCalculate(), you should test for a null reference before executing it. You can test using  if  (Bars !=  null )",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_21",
            "text": "**Print**(\"The total amount of ticks is \" + Bars.TicksCountInTotal);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barstimeframe",
            "text": "",
            "title": "Bars.TimeFrame"
        },
        {
            "location": "/handling_bars_and_instruments/#description_25",
            "text": "Bars.TimeFrame outputs the timeframe object containing information regarding the currently used timeframe.  More information can be found here:  Properties",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_21",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_25",
            "text": "Type ITimeFrame",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_24",
            "text": "Bars.TimeFrame",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_18",
            "text": "For more information about timeframe objects please see  TimeFrame .  With  OnCalculate()  this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnCalculate(),you should test for a null reference before executing it. You can test using  if  (Bars !=  null )",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_22",
            "text": "//Usage within a 30 minute chart\nTimeFrame tf = (TimeFrame) Bars.TimeFrame;\nPrint(Bars.TimeFrame); // outputs \"30 Min\"\nPrint(tf.Periodicity); // outputs \"Minute\"\nPrint(tf.PeriodicityValue); // outputs \"30\"",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#barscountforsession",
            "text": "",
            "title": "BarsCountForSession"
        },
        {
            "location": "/handling_bars_and_instruments/#description_26",
            "text": "Bars.BarsCountForSession outputs the amount of bars that have occurred since the beginning of the current trading session.  See further  Properties  of bars.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_26",
            "text": "Type int Amount of Bars  A value of -1 indicates a problem with referencing the correct session beginning.",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_25",
            "text": "Bars.BarsCountForSession",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#further-information_1",
            "text": "Within  OnCalculate()  this property can be used without having to test for a null reference. As soon as the OnCalculate() method is called up by AgenaScript, the object will become available.  If this property is used outside of OnCalculate() then you should test for a null reference before executing it. You can test using  if  (Bars!=  null ) .",
            "title": "Further Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_23",
            "text": "Print (\"Since the start of the last trading session there have been\" + Bars.BarsCountForSession + \"bars.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#processingbarindexlast",
            "text": "",
            "title": "ProcessingBarIndexLast"
        },
        {
            "location": "/handling_bars_and_instruments/#description_27",
            "text": "Indicates if current bar is last in calculation.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_22",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_27",
            "text": "Type bool",
            "title": "Return value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_26",
            "text": "ProcessingBarIndexLast",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_19",
            "text": "used for complicated calculation on a last bar",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_24",
            "text": "protected override void OnCalculate()\n        {\n            base.OnCalculate();\n            if (!IsProcessingBarIndexLast)\n                return;\n            bool isUpdated;\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#collections",
            "text": "",
            "title": "Collections"
        },
        {
            "location": "/handling_bars_and_instruments/#chartdrawings",
            "text": "",
            "title": "ChartDrawings"
        },
        {
            "location": "/handling_bars_and_instruments/#description_28",
            "text": "ChartDrawings is a collection containing all drawing objects within the chart. The property hold all drawings which were generated by the script.\nThe index for ChartDrawings is the explicit name for the drawing object (string tag).",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_27",
            "text": "ChartDrawings [string tag]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_25",
            "text": "Note:  To be able to use the interface definitions you must use the using method.  using AgenaTrader.Plugins;\n// Output number of drawing objects within the chart and their tags\nPrint(\"The chart contains \" + ChartDrawings.Count + \" drawing objects.\");\nfor each (IDrawObject draw in ChartDrawings) Print(draw.Tag);\n//Draw a black trend line...\nAddChartLine(\"MyLine\", true, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 3);\n// ... and change the color to red\nITrendLine line = (ITrendLine) ChartDrawings[\"MyLine\"];\nif (line != null) line.Pen.Color = Color.Red;\n// Set all lines within the chart to a line strength of 3,\n// and lock it so that it cannot be edited or moved\nforeach (IDrawObject draw in ChartDrawings)\nif (draw is IVerticalLine)\n{\nIVerticalLine vline = (IVerticalLine) draw;\nvline.IsLocked = true;\nvline.Editable = false;\nvline.Pen.Width = 3;\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#inseries",
            "text": "",
            "title": "InSeries"
        },
        {
            "location": "/handling_bars_and_instruments/#description_29",
            "text": "InSeries is a  DataSeries  object in which the input data for an indicator or strategy is stored.  If the indicator is used without any explicit instructions for the input data, then the closing price for the current market prices will be used.  When calling up the SMA(20) the smoothing average is calculated on the basis of the closing prices for the current chart price data (this is equivalent to SMA(close,20).  InSeries[0] = Close[0].  When calling up the SMA(high, 20) the high price values are loaded and used for the calculation of the smoothing average.  InSeries[0] = High[0].  This way you can select which data series should be used for the calculation of the indicator.  double  d =  RSI ( SMA (20), 14, 3)[0]; calculates the 14 period RSI using the SMA(20) as the input data series.\nInSeries[0] = SMA(20)[0].",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_28",
            "text": "InSeries\nInSeries[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_26",
            "text": "Print(\"The input data for the indicators are \" + Input[0]);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#lines",
            "text": "",
            "title": "Lines"
        },
        {
            "location": "/handling_bars_and_instruments/#description_30",
            "text": "Lines is a collection that contains all  LevelLine  objects of an indicator.  When a line object is added to the indicator using the  Add()  method, this line is automatically added to the \"lines\" collection.  The order of the add commands determines how these lines are sorted. The first information request of Add() will create Lines[0], the next information request will be Lines[1] etc.  See  OutputDescriptor .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_29",
            "text": "Lines[int index]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_27",
            "text": "// Add \"using System.Drawing.Drawing2D;\" for DashStyle\nprotected override void OnInit()\n{\nAdd(new LevelLine(Color.Blue, 70, \"Upper\")); // saves into Lines[0]\nAdd(new LevelLine(Color.Blue, 30, \"Lower\")); // saves into Lines[1]\n}\nprotected override void OnCalculate()\n{\n// When the RSI is above 70, properties of the lines will be changed\nif (RSI(14 ,3)[0] >= 70)\n{\n    Lines[0].Width = 3;\n    Lines[0].Color = Color.Red;\n    Lines[0].DashStyle = DashStyle.Dot;\n}\nelse\n{\n    Lines[0].Width = 1;\n    Lines[0].Color = Color.Blue;\n    Lines[0].DashStyle = DashStyle.Solid;\n}\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#plotcolors",
            "text": "",
            "title": "PlotColors"
        },
        {
            "location": "/handling_bars_and_instruments/#description_31",
            "text": "PlotColors is a collection that contains all color series of all plot objects.  When a plot is added using the  Add()  method it automatically creates a color series object and is added to the PlotColors collection.  The order of the add commands determines how the plot colors are sorted. The first information request of Add() will create PlotColors[0], the following information request will create PlotColors[1] etc.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_30",
            "text": "PlotColors[int PlotIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_20",
            "text": "More information regarding the collection class: http://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_28",
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing AgenaTrader.API;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"PlotColor Demo\")]\npublic class PlotColorsDemo : UserIndicator\n{\npublic DataSeries SMA20 { get {return Outputs[0];} }\npublic DataSeries SMA50 { get {return Outputs[1];} }\npublic DataSeries SMA100 { get {return Outputs[2];} }\nprivate Pen pen;\nprotected override void OnInit()\n{\n// Set line strength (width) to 4\npen = new Pen(Color.Empty, 4);\n// Add three plots with the defined line strength to the chart\nAdd(new OnPaint(pen, OutputSeriesDisplayStyle.LevelLine, \"SMA20\" )); //attached to PlotColors[0]\nAdd(new OnPaint(pen, OutputSeriesDisplayStyle.LevelLine, \"SMA50\" )); //attached to PlotColors[1]\nAdd(new OnPaint(pen, OutputSeriesDisplayStyle.LevelLine, \"SMA100\")); //attached to PlotColors[2]\nIsOverlay = true;\n}\nprotected override void OnCalculate()\n{\n// Add values to the three plots\nSMA20.Set (SMA(20) [0]);\nSMA50.Set (SMA(50) [0]);\nSMA100.Set(SMA(100)[0]);\n// Change colors depending on the trend\nif (IsSerieRising(Close))\n{\n    PlotColors[0][0] = Color.LightGreen;\n    PlotColors[1][0] = Color.Green;\n    PlotColors[2][0] = Color.DarkGreen;\n}\nelse if (IsSerieFalling(Close))\n{\n    PlotColors[0][0] = Color.LightSalmon;\n    PlotColors[1][0] = Color.Red;\n    PlotColors[2][0] = Color.DarkRed;\n}\nelse\n{\n    PlotColors[0][0] = Color.LightGray;\n    PlotColors[1][0] = Color.Gray;\n    PlotColors[2][0] = Color.DarkGray;\n}\n}\n}\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#outputdescriptor",
            "text": "",
            "title": "OutputDescriptor"
        },
        {
            "location": "/handling_bars_and_instruments/#description_32",
            "text": "OutputDescriptor is a collection that contains the plot objects of an indicator.  When a plot object is added to an indicator using the Add() method, it is also automatically added to the \"plots\" collection.  The order of the add commands determines how the plots are sorted. The first Add() information request will create Plots[0], the following information request will create OutputDescriptor[1] etc.  See  Lines .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_31",
            "text": "OutputDescriptor[int index]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_29",
            "text": "protected override void OnInit()\n{\n    Add(new OnPaint(Color.Blue, \"MySMA 20\")); // saved to OutputDescriptor[0]\n}\nprotected override void OnCalculate()\n{\nValue.Set(SMA(20)[0]);\n// If the market price is above the SMA colorize it green, otherwise red\nif (Close[0] > SMA(20)[0])\n    OutputDescriptor[0].PlotColor = Color.Green;\nelse\n    OutputDescriptor[0].PlotColor = Color.Red;\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#values",
            "text": "",
            "title": "Values"
        },
        {
            "location": "/handling_bars_and_instruments/#description_33",
            "text": "Values is a collection that contains the data series objects of an indicator.  When a plot is added to an indicator using the Add() method, a value object is automatically created and added to the \"values\" collection.  The order of the add commands determines how the values are sorted. The first information request will create Values[0], the next information request will create Values[1] etc.  Value  is always identical to Values[0].",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_32",
            "text": "Outputs[int index]\nOutputs[int index][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_21",
            "text": "The methods known for a collection, Set() Reset() and Count(), are applicable for values.  Information on the class collection: http://msdn.microsoft.com/en-us/library/ybcx56wz%28v=vs.80%29.aspx",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_30",
            "text": "// Check the second indicator value of one bar ago and set the value of the current indicator value based on it.\nif (Instrument.Compare(Outputs[1][1], High[0] - Low[0]) < 0)\n    Value.Set(High[0] - Low[0]);\nelse\n    Value.Set(High[0] - Close[0]);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#data-series",
            "text": "",
            "title": "Data Series"
        },
        {
            "location": "/handling_bars_and_instruments/#description_34",
            "text": "Data series are interpreted as freely usable data storage containers for your programs. Additionally, they an integrated component of AgenaTrader that saves the price changes for individual bars. We will be focusing on the latter function here.\nIn the following section, the concept of data series will be explained in detail and understandably. All price data for the individual bars are organized and saved within data series.\nThe following are available:  Open   Opens  High   Highs  Low   Lows  Close   Closes  Median   Medians  Typical    Typicals  Weighted   Weighteds  Time   Times  TimeFrame   TimeFrames  Volume   Volumes",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#open",
            "text": "",
            "title": "Open"
        },
        {
            "location": "/handling_bars_and_instruments/#description_35",
            "text": "Open is a  DataSeries  of the type  DataSeries , in which the historical opening prices are saved.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_23",
            "text": "BarsAgo Index Value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_33",
            "text": "Open\nOpen[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_22",
            "text": "The returned value is dependent upon the property of  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_31",
            "text": "// Opening price for the current period\nPrint(Time[0] + \" \" + Open[0]);\n// Opening price for the bars of 5 periods ago\nPrint(Time[5] + \" \" + Open[5]);\n// Current value for the SMA 14 that is based on the opening prices (rounded)\nPrint(\"SMA(14) calculated using the opening prices: \" + Instrument.Round2TickSize(SMA(Open, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#opens",
            "text": "",
            "title": "Opens"
        },
        {
            "location": "/handling_bars_and_instruments/#description_36",
            "text": "Opens is an array of data series that contains all open data series.  This array is only useful or meaningful for indicators or strategies that use multiple data from multiple timeframes.\nA new entry is entered into the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Opens[0] The open data series of the chart timeframe\nOpens[1] The open data series of all bars in a daily timeframe\nOpens[2] The open data series of all bars in a weekly timeframe  Opens[0][0] is equivalent to Open[0].  In addition, please see  MultiBars  for more information.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_24",
            "text": "barsAgo Index value for the individual bars within the data series (see  Bars )\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_34",
            "text": "Opens[int barSeriesIndex]\nOpens[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_23",
            "text": "The returned value is dependent upon the property of  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_32",
            "text": "See example:  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#high",
            "text": "",
            "title": "High"
        },
        {
            "location": "/handling_bars_and_instruments/#description_37",
            "text": "High is a  Data Series  of the type  Data Series , in which the historical high prices are saved.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_25",
            "text": "barsAgo IndexValue (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_35",
            "text": "High\nHigh[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_24",
            "text": "The returned value is dependent upon the property of  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_33",
            "text": "// High values of the current period\nPrint(Time[0] + \" \" + High[0]);\n// High values of the bar from 5 periods ago\nPrint(Time[5] + \" \" + High[5]);\n// the current value for the SMA 14 calculated on the basis of the high prices\nPrint(\"SMA(14) Calculated using the high prices: \" + Instrument.Round2TickSize(SMA(High, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#highs",
            "text": "",
            "title": "Highs"
        },
        {
            "location": "/handling_bars_and_instruments/#description_38",
            "text": "Highs is an array of [ DataSeries ][1] that contains all high data series.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new time unit is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Highs[0] the high data series of the chart timeframe\nHighs[1] the high data series of all bars in a daily timeframe\nHighs[2] the high data series of all bars in a weekly timeframe  Highs[0][0] is equivalent to High[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_26",
            "text": "barsAgo Index value for the individual bars within the data series (see  Bars )\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_36",
            "text": "Highs[int barSeriesIndex]\nHighs[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_25",
            "text": "The returned value is dependent upon the property of  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_34",
            "text": "Please see examples under  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#low",
            "text": "",
            "title": "Low"
        },
        {
            "location": "/handling_bars_and_instruments/#description_39",
            "text": "Low is a  DataSeries  of the type  DataSeries , in which the historical low prices are saved.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_27",
            "text": "barsAgo IndexValue (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_37",
            "text": "Low\nLow[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_26",
            "text": "The returned value is dependent upon the property of  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_35",
            "text": "// Lowest value of the current period\nPrint(Time[0] + \" \" + Low[0]);\n// Lowest value of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Low[5]);\n// The current value for the SMA 14 calculated on the basis of the low prices (smoothed)\nPrint(\"SMA(14) calculated using the high prices: \" + Instrument.Round2TickSize(SMA(Low, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#lows",
            "text": "",
            "title": "Lows"
        },
        {
            "location": "/handling_bars_and_instruments/#description_40",
            "text": "Lows is an array of [ DataSeries ][1] that contains all  Low  data series.  This array is only of value to indicators or strategies that use data from multiple time units.  A new entry is added whenever a new time unit is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Lows[0] the low data series for the chart timeframe\nLows[1] the low data series for all bars in a daily timeframe\nLows[2] the low data series for all bars in a weekly timeframe  Lows[0][0] is equivalent to Low[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_28",
            "text": "barsAgo Index value for the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_38",
            "text": "Lows[int barSeriesIndex]\nLows[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_27",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_36",
            "text": "See example  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#close",
            "text": "",
            "title": "Close"
        },
        {
            "location": "/handling_bars_and_instruments/#description_41",
            "text": "Close is a  DataSeries  of the type  DataSeries , in which the historical closing prices are saved.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_29",
            "text": "barsAgo Index value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_39",
            "text": "Close\nClose[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_28",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .  Indicators are usually calculated using the closing prices.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_37",
            "text": "// Closing price of the current period\nPrint(Time[0] + \" \" + Close[0]);\n// Closing price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Close[5]);\n// Current value for the SMA 14 based on the closing prices\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(Close, 14)[0]));\n// Close does not need to be mentioned since it is used by default\nPrint(\"SMA(14) calculated using the closing prices: \" + Instrument.Round2TickSize(SMA(14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#closes",
            "text": "",
            "title": "Closes"
        },
        {
            "location": "/handling_bars_and_instruments/#description_42",
            "text": "Closes is an array of [ DataSeries ][1] that contains all  Low  data series.  This array is only of importance to indicators or strategies that use data from multiple time units.  A new entry is added to the array whenever a timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Closes[0] the close data series of the chart timeframe\nCloses[1] the close data series of all bars in a daily timeframe\nCloses[2] the close data series of all bars in a weekly timeframe  Closes[0][0] is equivalent to Close[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_30",
            "text": "barsAgo Index value of the individual bars within the data series\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_40",
            "text": "Closes[int barSeriesIndex]\nCloses[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_29",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_38",
            "text": "See example  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#median",
            "text": "",
            "title": "Median"
        },
        {
            "location": "/handling_bars_and_instruments/#description_43",
            "text": "Median is a  DataSeries  of the type  DataSeries , in which the historical median values are saved.  The median price of a bar is calculated using (high + low) / 2  See  Typical  &  Weighted .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_31",
            "text": "barsAgo Index value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_41",
            "text": "Median\nMedian[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_30",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .  Further information about median, typical und weighted: http://blog.nobletrading.com/2009/12/median-price-typical-price-weighted.html",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_39",
            "text": "// Median price for the current period\nPrint(Time[0] + \" \" + Median[0]);\n// Median price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Median[5]);\n// Current value for the SMA 14 calculated using the median prices\nPrint(\"SMA(14) calculated using the median prices: \" + Instrument.Round2TickSize(SMA(Median, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#medians",
            "text": "",
            "title": "Medians"
        },
        {
            "location": "/handling_bars_and_instruments/#description_44",
            "text": "Medians is an array of [ DataSeries ][1] that contains all  Median  data series.  This array is only of value to indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new time frame is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Medians[0] the median data series of the chart timeframe\nMedians[1] the median data series of all bars in a daily timeframe\nMedians[2] the median data series of all bars in a weekly timeframe  Medians[0][0] is equivalent to Medians[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_32",
            "text": "barsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_42",
            "text": "Medians[int barSeriesIndex]\nMedians[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_31",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .  Further information on median:  http://www.investopedia.com/terms/m/median.asp",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_40",
            "text": "See example in  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#typical",
            "text": "",
            "title": "Typical"
        },
        {
            "location": "/handling_bars_and_instruments/#description_45",
            "text": "Typical is a  DataSeries  of the type  DataSeries , in which the historical typical values are saved.  The typical price of a bar is calculated using (high + low + close) / 3.  See  Median  and  Weighted .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_33",
            "text": "barsAgo Index value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_43",
            "text": "Typical\nTypical[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_32",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .  Further information on typical:  https://technicianapp.com/resources/typical-price/",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_41",
            "text": "// Typical price for the current period\nPrint(Time[0] + \" \" + Typical[0]);\n// Typical price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Typical[5]);\n// Current value for the SMA 14 calculated using the typical price\nPrint(\"SMA(14) calculated using the typical price: \" + Instrument.Round2TickSize(SMA(Typical, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#typicals",
            "text": "",
            "title": "Typicals"
        },
        {
            "location": "/handling_bars_and_instruments/#description_46",
            "text": "Typicals is an array of  DataSeries  that contains all  Typical  data series.  This array is only of value to indicators and strategies that make use of multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Typicals[0] the typical data series of the chart timeframe\nTypicals[1] the typical data series of all bars in a daily timeframe\nTypicals[2] the typical data series of all bars in a weekly timeframe  Typicals[0][0] is equivalent to Typicals[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_34",
            "text": "barsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value of the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_44",
            "text": "Typicals[int barSeriesIndex]\nTypicals[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_33",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_42",
            "text": "See example  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#weighted",
            "text": "",
            "title": "Weighted"
        },
        {
            "location": "/handling_bars_and_instruments/#description_47",
            "text": "Weighted is a  DataSeries  of the type  DataSeries , in which the historical weighted values are saved.  The weighted price of a bar is calculated using the formula (high + low + 2*close) / 4 and then weighted on the closing price.  See also  Median  and  Typical .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_35",
            "text": "barsAgo Index value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_45",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#weighted_1",
            "text": "Weighted[int barsAgo]",
            "title": "Weighted"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_34",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .  Information regarding weighted:  http://www.stock-trading-infocentre.com/pivot-points.html",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_43",
            "text": "// Weighted price for the current period\nPrint(Time[0] + \" \" + Weighted[0]);\n// Weighted price of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Weighted[5]);\n// Current value for the SMA 14 using the weighted price\nPrint(\"SMA(14) calculated using the weighted price: \" + Instrument.Round2TickSize(SMA(Weighted, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#weighteds",
            "text": "",
            "title": "Weighteds"
        },
        {
            "location": "/handling_bars_and_instruments/#description_48",
            "text": "Weighteds is an array of [ DataSeries ][1] that contains all  Weighted  data series.  The array is only of value for indicators and strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Weighteds[0] the weighted data series of the chart timeframe\nWeighteds[1] the weighted data series of all bars in a daily timeframe\nWeighteds[2] the weighted data series of all bars in a weekly timeframe  Weighteds[0][0] is equivalent to Weighteds[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_36",
            "text": "barsAgo Index value of the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_46",
            "text": "Weighteds[int barSeriesIndex]\nWeighteds[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_35",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_44",
            "text": "See example under  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#time",
            "text": "",
            "title": "Time"
        },
        {
            "location": "/handling_bars_and_instruments/#description_49",
            "text": "Time is a  DataSeries  of the type  DateTimeSeries , in which the timestamps of the individual bars are saved.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_37",
            "text": "barsAgo Index value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_47",
            "text": "Time\nTime[int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_36",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_45",
            "text": "// Timestamp of the current period\nPrint(Time[0]);\n// Timestamp of the bar from 5 periods ago\nPrint(Time[5]);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#times",
            "text": "",
            "title": "Times"
        },
        {
            "location": "/handling_bars_and_instruments/#description_50",
            "text": "Times is an array of  DataSeries  that contains all  Time  data series.  This array is only of value to indicators and strategies that make use of multiple timeframes.\nA new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Times[0] the time data series of the chart timeframe\nTimes[1] the time data series of all bars in a daily timeframe\nTimes[2] the time data series of all bars in a weekly timeframe  Times[0][0] is equivalent to Times[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_38",
            "text": "barsAgo Index value for the individual bars within a data series\nbarSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_48",
            "text": "Times[int barSeriesIndex]\nTimes[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_37",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_46",
            "text": "See example  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#volume",
            "text": "",
            "title": "Volume"
        },
        {
            "location": "/handling_bars_and_instruments/#description_51",
            "text": "Volume is a  DataSeries  of the type  DataSeries , in which the historical volume information is saved.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_39",
            "text": "barsAgo Index value (see  Bars )",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_49",
            "text": "Volume  Volume[ int  barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_38",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .  The value returned by the  VOL()  indicator is identical with the volume described here;\nfor example, Vol()[3] will have the same value as Volume[3].",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_47",
            "text": "// Volume for the current period\nPrint(Time[0] + \" \" + Volume[0]);\n// Volume of the bar from 5 periods ago\nPrint(Time[5] + \" \" + Volume[5]);\n// Current value for the SMA 14 calculated using the volume\nPrint(\"SMA(14) calculated using the volume: \" + Instrument.Round2TickSize(SMA(Volume, 14)[0]));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#volumes",
            "text": "",
            "title": "Volumes"
        },
        {
            "location": "/handling_bars_and_instruments/#description_52",
            "text": "Volumes is an array of  DataSeries  that contains all  Volume  data series.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  Volumes[0] the volume data series of the chart timeframe\nVolumes[1] the volume data series of all bars in the daily timeframe\nVolumes[2] the volume data series of all bars in the weekly timeframe  Volumes[0][0] is equivalent to Volumes[0].  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_40",
            "text": "barsAgo Index value of the individual bars within a data series  barSeriesIndex Index value of the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_50",
            "text": "Volumes[int barSeriesIndex]\nVolumes[int barSeriesIndex][int barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_39",
            "text": "The returned value is dependent upon the property  CalculateOnClosedBar .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_48",
            "text": "See example  Multibars .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#timeframe",
            "text": "",
            "title": "TimeFrame"
        },
        {
            "location": "/handling_bars_and_instruments/#description_53",
            "text": "TimeFrame is a timeframe object. This property is used to read the current TimeFrame and not to set it.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_51",
            "text": "TimeFrame",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#timeframes",
            "text": "",
            "title": "TimeFrames"
        },
        {
            "location": "/handling_bars_and_instruments/#description_54",
            "text": "TimeFrames is an array of timeframe objects that contains a timeframe object for each individual bar object.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  TimeFrames [0] Timeframe of the primary data series (chart timeframe)\nTimeFrames [1]  Print (TimeFrames[1]); // returns \"1 Day\"\nTimeFrames [2]  Print (TimeFrames[2]); // returns \"1 Week\"  TimeFrames [0] is equivalent to  TimeFrame .  See  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_41",
            "text": "barSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_52",
            "text": "TimeFrames [int barSeriesIndex]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_49",
            "text": "if (ProcessingBarSeriesIndex == 0 && ProcessingBarIndex == 0)\nfor (int i = BarsArray.Count-1; i >= 0; i--)\nPrint(\"The Indicator \" + this.Name + \" uses Bars of the Timeframe \" + TimeFrames[i]);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instruments",
            "text": "The term \"instrument\" denotes a tradable value such as a stock, ETF, future etc.  An instrument has various properties that can be used in AgenaScripts created by the user:  Instrument.Compare  Instrument.Currency  Instrument.Digits  Instrument.ETF  Instrument.Exchange  Instrument.Expiry  Instrument.GetCurrencyFactor  Instrument.InstrumentType  Instrument.MainSector  Instrument.Margin  Instrument.Name  Instrument.PointValue  Instrument.Round2TickSize  Instrument.Symbol  Instrument.TickSize  With the  OnCalculate()  method you can use any properties you wish without having to test for a null reference.\nAs soon as the  OnCalculate()  function is called up by AgenaScript, an object will become available. If you wish to use these properties outside of  OnCalculate() , you should first perform a test for null references using  if  (Bars !=  null )",
            "title": "Instruments"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentcompare",
            "text": "",
            "title": "Instrument.Compare"
        },
        {
            "location": "/handling_bars_and_instruments/#description_55",
            "text": "The Instrument.Compare function compares two market prices whilst taking into account the correct number of decimal points. The smallest possible price change is displayed by the value TickSize. This function simplifies the otherwise time-consuming comparison using floating-point operations.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_42",
            "text": "double value1\ndouble value2",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_28",
            "text": "Type int  1 - value1 is bigger than value2\n-1 - value1 is smaller than value2\n0 - value1 and value2 are equal",
            "title": "Return value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_53",
            "text": "Instrument.Compare(double Value1, double Value2)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_40",
            "text": "Be aware this function compares prices based on TickSize.  If the ticksize of your instrument is 0.01 these prices will be rounded and compared on 2 decimal digits. If you want a regular comparation of two numbers, you should use the operator \"greater than\" (>) or the operator \"smaller than\" (<).  More infomation about  math.round()  If the tick size is 0,00001 \u2013 as it usually is with FX values \u2013 then the following will be displayed:  Compare(2, 1.99999) a 1, meaning 2 is bigger than 1.99999\nCompare(2, 2.000001) a 0, meaning the values are equal\nCompare(2, 1.999999) a 0, meaning the values are equal\nCompare(2, 2.00001) a -1, meaning 2 is smaller than 2.00001",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_50",
            "text": "Print(Instrument.Compare(2, 1.999999));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentcurrency",
            "text": "",
            "title": "Instrument.Currency"
        },
        {
            "location": "/handling_bars_and_instruments/#description_56",
            "text": "Instrument.Currency outputs a currency object that contains the corresponding currency in which the instrument is traded.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_43",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_29",
            "text": "A constant of the type \"public enum currencies\"",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_54",
            "text": "Instrument.Currency",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_41",
            "text": "The common currencies are: AUD, CAD, EUR, GBP, JPY or USD.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_51",
            "text": "Print(Instrument.Name + \" is traded in \" + Instrument.Currency);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentdigits",
            "text": "",
            "title": "Instrument.Digits"
        },
        {
            "location": "/handling_bars_and_instruments/#description_57",
            "text": "Instrument.Digits outputs the number of decimal points in which the market price of the instrument is traded.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_44",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_30",
            "text": "int Digits",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_55",
            "text": "Instrument.Digits",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_42",
            "text": "Stocks are usually traded to two decimal points. Forex can be traded (depending on the data provider) with 4 or 5 decimal places.  This function is especially useful when formatting the output of various instruments that need rounding. Also see  TickSize  and  Instrument.Round2Ticks ,  Instrument.Round2TickSize .  More information can be found here:  Formatting of Numbers .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_52",
            "text": "Print(\"The value of \" +Instrument.Name + \" is noted with a precision of \" + Instrument.Digits +\" Decimal points.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentetf",
            "text": "",
            "title": "Instrument.ETF"
        },
        {
            "location": "/handling_bars_and_instruments/#description_58",
            "text": "Instrument.ETF is used to differentiate between a stock and an ETF. This is necessary since ETFs are considered to be \u201estocks\" by some exchanges.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_45",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_31",
            "text": "Type bool",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_56",
            "text": "Instrument.ETF",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_43",
            "text": "What is an ETF?  Wikipedia:  http://de.wikipedia.org/wiki/Exchange-traded_fund",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_53",
            "text": "if (Instrument.InstrumentType == InstrumentType.Stock)\nif (Instrument.ETF)\nPrint(\"The value is an ETF.\");\nelse\nPrint(\"The value is a stock.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentexchange",
            "text": "",
            "title": "Instrument.Exchange"
        },
        {
            "location": "/handling_bars_and_instruments/#description_59",
            "text": "Instrument.Exchange outputs the description/definition of the current exchange for the current instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_46",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_32",
            "text": "An exchange object of the type \"public enum exchanges\"",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_57",
            "text": "Instrument.Exchange",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_44",
            "text": "An overview of various exchange:  https://en.wikipedia.org/wiki/List_of_stock_exchanges",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_54",
            "text": "Print(\"The instrument \" + Instrument.Name +\" is traded on the \" + Instrument.Exchange + \" exchange.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentexpiry",
            "text": "",
            "title": "Instrument.Expiry"
        },
        {
            "location": "/handling_bars_and_instruments/#description_60",
            "text": "Instrument.Expiry outputs the date (month and year) of the expiry of a financial instrument. Only derivative instruments such as options or futures will have an expiry date.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_47",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_33",
            "text": "Type DateTime  For instruments without an expiry date the returned value is set to DateTime.MaxValue(= 31.12.9999 23.59:59)",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_58",
            "text": "Instrument.Expiry",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_45",
            "text": "The expiry date (expiry) can also be seen within the Instrument Escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_55",
            "text": "Print(\"The instrument \" + Instrument.Name +\" will expire on \" + Instrument.Expiry);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentgetcurrencyfactor",
            "text": "",
            "title": "Instrument.GetCurrencyFactor"
        },
        {
            "location": "/handling_bars_and_instruments/#description_61",
            "text": "Instrument.GetCurrencyFactor returns a conversion factor that can be used to convert an instrument's currency to the account's currency.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_48",
            "text": "Type Currencies",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_34",
            "text": "Type double",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_59",
            "text": "Instrument.GetCurrencyFactor(Currencies)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_46",
            "text": "Common currencies are.B. AUD, CAD, EUR, GBP, JPY oder USD.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_56",
            "text": "Protected override void OnCalculate()\n{\n   double currFactor = Instrument.GetCurrencyFactor(Account.Currency);\n   Print(Close[0] + \" in \" + Instrument.Currency.ToString() + \" = \" + (Close[0] * currFactor) + \" in \" + Account.Currency.ToString());\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentinstrumenttype",
            "text": "",
            "title": "Instrument.InstrumentType"
        },
        {
            "location": "/handling_bars_and_instruments/#description_62",
            "text": "Instrument.InstrumentType outputs a type object of the trading instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_49",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_35",
            "text": "Object of the type \"public enum instrument\"",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_60",
            "text": "Instrument.InstrumentType",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_47",
            "text": "Potential values are: future, stock, index, currency, option, CFD and unknown.  There is no ETF type. ETFs are considered to be of the type \"stock\" \u2013 see  Instrument.ETF .  The instrument type can also be viewed within the Instrument Escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_57",
            "text": "Print(\"The instrument \" + Instrument.Name + \" is of the type \" + Instrument.InstrumentType);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentmainsector",
            "text": "",
            "title": "Instrument.MainSector"
        },
        {
            "location": "/handling_bars_and_instruments/#description_63",
            "text": "Instrument.MainSector returns the main sector of the trading instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_50",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_36",
            "text": "String",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_61",
            "text": "Instrument.MainSector",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_48",
            "text": "The main sector is also visible in the instrument escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_58",
            "text": "Print(\"Das Instrument \" + Instrument.Name + \" ist im Sektor \" + Instrument.MainSector + \" t\u00e4tig.\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentmargin",
            "text": "",
            "title": "Instrument.Margin"
        },
        {
            "location": "/handling_bars_and_instruments/#description_64",
            "text": "Instrument.MainSector returns the required margin of the trading instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_51",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_37",
            "text": "int",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_62",
            "text": "Instrument.Margin",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_49",
            "text": "Margin is also visible in the instrument escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_59",
            "text": "Print(\"Das Instrument \" + Instrument.Name + \" has a margin of \" + Instrument.Margin);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentname",
            "text": "",
            "title": "Instrument.Name"
        },
        {
            "location": "/handling_bars_and_instruments/#description_65",
            "text": "Instrument.Name outputs the name/description of the trading instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_52",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_38",
            "text": "Type string",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_63",
            "text": "Instrument.Name",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_50",
            "text": "The instrument name can also be seen within the Instrument Escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_60",
            "text": "Print(\"The currently loaded instrument inside the chart is named \" + Instrument.Name);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentpointvalue",
            "text": "",
            "title": "Instrument.PointValue"
        },
        {
            "location": "/handling_bars_and_instruments/#description_66",
            "text": "Instrument.PointValue outputs the monetary value for a full point movement of the instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_53",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_39",
            "text": "double \u2013 point value",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_64",
            "text": "Instrument.PointValue",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_51",
            "text": "Example for various point values  (per amount, CFD, futures contract, lot etc.)  Stock: generally 1.00 Euro or 1.00 USD.\nEUR/USD: 100,000 USD\nDAX future: 25.00 Euro  Tick Value  The tick value can be calculated by multiplying the point value with the tick size.  For example, the E-mini S&P 500 has a point value of $50. The tick size equals 0.25. This means that there are 4 ticks in one full point for the E-mini S&P 500.\nSince 50 * 0.25 = 50/4 this means that the tick value is $12.50.  The point value can also be viewed within the Instrument Escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_61",
            "text": "Print(\"When \" + Instrument.Name + \" rises for one full point then this is equal to \" + Instrument.PointValue + \" \" + Instrument.Currency);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentround2ticksize",
            "text": "",
            "title": "Instrument.Round2TickSize"
        },
        {
            "location": "/handling_bars_and_instruments/#description_67",
            "text": "The function Instrument.Round2TickSize rounds the supplied market price to the smallest value divisible by the tick size of the instrument.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_54",
            "text": "double \u2013 market value",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_40",
            "text": "double",
            "title": "Return value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_65",
            "text": "Instrument.Round2TickSize(double MarketPrice)",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_52",
            "text": "The number of decimal places to which the price is rounded depends on the instrument.\nIf, for example, an instrument is a stock, then the rounding will be performed to 2 decimal places. For a Forex instrument, it may be carried out to 4 or 5 decimal places.  See  TickSize  and  Instrument.Digits .  Example of professional  Formatting ,  Formatting of Numbers .",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_62",
            "text": "double Price = 12.3456789;\nPrint(Price + \" rounded for a \" + Instrument.Name + \" valid value is \" + Instrument.Round2TickSize(Price));",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentsymbol",
            "text": "",
            "title": "Instrument.Symbol"
        },
        {
            "location": "/handling_bars_and_instruments/#description_68",
            "text": "Instrument.Symbol outputs the symbol that identifies the trading instrument within AgenaTrader. Depending on the symbol, the mappings for the various data feed providers and brokers will be managed in different ways.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_55",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_41",
            "text": "Type string",
            "title": "Return value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_66",
            "text": "Instrument.Symbol",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_53",
            "text": "By using symbols, identical stocks being traded on different exchanges can be identified and separated from each other. The symbol BMW.DE is the BMW stock on the XETRA exchange. BMW.CFG is the CFD for the BMW stock.  The instrument symbol can also be viewed within the Instrument Escort:",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_63",
            "text": "Print(\"The instrument currently loaded within the chart has the symbol: \" + Instrument.Symbol);",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#instrumentticksize",
            "text": "",
            "title": "Instrument.TickSize"
        },
        {
            "location": "/handling_bars_and_instruments/#description_69",
            "text": "The tick size is the smallest measurable unit that a financial instrument can move. This is usually called 1 tick.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_56",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#return-value_42",
            "text": "double",
            "title": "Return Value"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_67",
            "text": "Instrument.TickSize or simply TickSize",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_54",
            "text": "The keyword  TickSize  is equivalent to Instrument.TickSize. Both information requests will produce the same value and are thus interchangeable.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_64",
            "text": "Stock: 0.01\nES future: 0.25\nEUR/USD: 0.00001  See  Instrument.PointValue  and  Instrument.Digits .  Examples of professional  Formatting ,  Formatting of Numbers .",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#example_65",
            "text": "Print(\"The value of \" + Instrument.Name + \" can change for a minimum of \" + Instrument.TickSize + \" Tick(s).\");",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#multibars",
            "text": "",
            "title": "Multibars"
        },
        {
            "location": "/handling_bars_and_instruments/#description_70",
            "text": "An indicator or a strategy will always have the same underlying timeframe-units as those units being displayed within the chart. The values of an SMA(14) indicator displayed in a 5 minute chart will be calculated based on the last fourteen 5 minute bars. A daily chart, on the other hand, would use the closing prices of the past 14 days in order to calculate this value.\nThe same method applies for your self-programmed indicators. A 5 minute chart will call up the  OnCalculate()  for each 5 minute bar.\nIf you want your self-created indicator to use a different timeframe, this is possible using multibars.",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#example_66",
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n    [Description(\"Multibar Demo\")]\n    // The indicator requires daily and weekly data\n    [TimeFrameRequirements(\"1 Day\", \"1 Week\")]\n    public class MultiBarDemo : UserIndicator\n    {\n        private static readonly TimeFrame TF_Day = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\n        private static readonly TimeFrame TF_Week = new TimeFrame(DatafeedHistoryPeriodicity.Week, 1);\n\n        protected override void OnBarsRequirements()\n        {\n            Add(TF_Day);\n            Add(TF_Week);\n        }\n\n        protected override void OnInit()\n        {\n            CalculateOnClosedBar = true;\n        }\n        protected override void OnCalculate()\n        {\n            // The current value for the SMA 14 in the timeframe of the chart\n            Print(\"TF0: \" + SMA(Closes[0], 14)[0]);\n            // The current value for the SMA 14 in a daily timeframe\n            Print(\"TF1: \" + SMA(Closes[1], 14)[0]);\n            // Current value for the SMA 14 in a weekly timeframe\n            Print(\"TF2: \" + SMA(Closes[2], 14)[0]);\n        }\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#additional-notes",
            "text": "When using additional timeframes, a further entry with the respective data series for the bars of the new timeframe will be added to the arrays  Opens ,  Highs ,  Lows ,  Closes ,  Medians ,  Typicals ,  Weighteds ,  Times  and  Volumes . The indexing will occur in the order of the addition of the new timeframes.\nCloses[0][0] is equivalent to Close[0].\nCloses[1][0] equals the current closing price for the daily data series\nCloses[2][0] equals the current closing price for the weekly data series  \"Closes\" is, of course, interchangeable with Opens, Highs, Lows etc.  See  ProcessingBarIndexes ,  ProcessingBarSeriesIndex ,  TimeFrames ,  TimeFrameRequirements .  Additional syntax methods are available for multibars:  // Declare the variable TF_DAY and define it\nprivate static readonly TimeFrame TF_Day = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\nprivate static readonly TimeFrame TF_Week = new TimeFrame(DatafeedHistoryPeriodicity.Week, 1);\n// The following instruction is identical to double d = Closes[1][0];\ndouble d = MultiBars.GetBarsItem(TF_Day).Close[0];\n// The following instruction is identical to double w = Closes[2][0];\ndouble w = MultiBars.GetBarsItem(TF_Week).Close[0];",
            "title": "Additional Notes"
        },
        {
            "location": "/handling_bars_and_instruments/#processingbarindexes",
            "text": "",
            "title": "ProcessingBarIndexes"
        },
        {
            "location": "/handling_bars_and_instruments/#description_71",
            "text": "ProcessingBarIndexes is an array of int values that contains the number of  ProcessingBarIndex  for each bar.  This array is only of value for indicators or strategies that use data from multiple timeframes.  A new entry is added to the array whenever a new timeframe is added to an indicator or strategy.  With  [TimeFrameRequirements((\"1 Day\"), (\"1 Week\"))]  the array will contain 3 entries:  ProcessingBarIndexes[0] Current bar for the primary data series (chart timeframe)\nProcessingBarIndexes[1] Current bar for the daily bars\nProcessingBarIndexes[2] Current bar for the weekly bars  ProcessingBarIndexes[0] is equivalent to  ProcessingBarIndex .  Also see  MultiBars .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_57",
            "text": "barSeriesIndex Index value for the various timeframes",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_68",
            "text": "ProcessingBarIndexes[int barSeriesIndex]",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#example_67",
            "text": "//Ensure that a minimum of 20 bars is loaded\nfor (int i=0; i<ProcessingBarIndexes.Count; i++)\nif (ProcessingBarIndexes[i] < 20) return;",
            "title": "Example"
        },
        {
            "location": "/handling_bars_and_instruments/#processingbarseriesindex",
            "text": "",
            "title": "ProcessingBarSeriesIndex"
        },
        {
            "location": "/handling_bars_and_instruments/#description_72",
            "text": "Within a multibars script, multiple bars objects are available. The OnCalculate() method\nwill therefore also be called up for every bar within your script. In order to include/exclude events of specific data series, you can use the ProcessingBarSeriesIndex property.  ProcessingBarSeriesIndex is only of value for indicators or strategies that use data from multiple timeframes.\nWith  [TimeFrameRequirements(\"1 Day\", \"1 Week\")]  two timeframes will be added to the primary chart timeframe.  If OnCalculate() is called up by the primary data series, then ProcessingBarSeriesIndex will equal zero. If OnCalculate() is called up by the daily bars, then ProcessingBarSeriesIndex will equal 1. Weekly bars will have a value of 2.  See  Multibars  and  ProcessingBarIndexes .",
            "title": "Description"
        },
        {
            "location": "/handling_bars_and_instruments/#parameter_58",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/handling_bars_and_instruments/#usage_69",
            "text": "ProcessingBarSeriesIndex",
            "title": "Usage"
        },
        {
            "location": "/handling_bars_and_instruments/#more-information_55",
            "text": "Within a script that only works with primary timeframes, the value will always equal zero.",
            "title": "More Information"
        },
        {
            "location": "/handling_bars_and_instruments/#example_68",
            "text": "// To demonstrate the methodology\n// set CalculateOnClosedBar=false\nPrint(Time[0] + \" \" + ProcessingBarSeriesIndex);\n// Calculate only for the chart timeframe\nprotected override void OnCalculate()\n{\nif (ProcessingBarSeriesIndex > 0) return;\n// Logic for the primary data series\n}",
            "title": "Example"
        },
        {
            "location": "/events/",
            "text": "Events\n\n\nAgenaTrader is an \nevent-oriented\n application by definition.\n\n\nProgramming in AgenaTrader using the various application programming interface (\nAPI\n) methods is based initially on the \nOverwriting\n of routines predefined for event handling.\n\n\nThe following methods can be used and therefore overwritten:\n\n\n\n\nOnBrokerConnect()\n\n\nOnBrokerDisconnect()\n\n\nOnCalculate()\n\n\nOnChartPanelMouseDown()\n\n\nOnChartPanelMouseMove()\n\n\nOnDispose()\n\n\nOnLevel1()\n\n\nOnLevel2()\n\n\nOnOrderChanged()\n\n\nOnOrderExecution()\n\n\nOnStart()\n\n\nOnStop()\n\n\n\n\nOnBrokerConnect()\n\n\nDescription\n\n\nOnBrokerConnect() method is invoked each time the connection to the broker is established.  With the help of OnBrokerConnect(), it is possible to reassign the existing or still open orders to the strategy in the event of a connection abort with the broker and thus allow it to be managed again.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnBrokerConnect()\n\n\n\n\nExample\n\n\nprivate IOrder _takeProfit = null;\nprivate IOrder _trailingStop = null;\n\n\nprotected override void OnBrokerConnect()\n{\n   if (Trade != null && Trade.PositionType != PositionType.Flat)\n   {\n       _takeProfit = Orders.FirstOrDefault(o => o.Name == this.GetType().Name && o.OrderType ==OrderType.Limit);\n       _trailingStop = Orders.FirstOrDefault(o => o.Name == this.GetType().Name && o.OrderType ==OrderType.Stop);\n   }\n}\n\n\n\n\n\nOnBrokerDisconnect()\n\n\nDescription\n\n\nOnBrokerDisconnect() method is invoked each time the connection to the broker is interrupted.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nAn object from \nTradingDatafeedChangedEventArgs\n\n\nUsage\n\n\nprotected override void OnBrokerDisconnect(TradingDatafeedChangedEventArgs e)\n\n\n\n\nExample\n\n\nprotected override void OnBrokerDisconnect(TradingDatafeedChangedEventArgs e)\n{\n   if (e.Connected)\n       Print(\"The connection to the broker will be disconnected.\");\n   else\n       Print(\"The connection to the broker was disconnected.\");\n}\n\n\n\n\nOnCalculate()\n\n\nDescription\n\n\nThe OnCalculate() method is called up whenever a bar changes; depending on the variables of \nCalculateOnClosedBar\n, this will happen upon every incoming tick or when the bar has completed/closed.\nOnCalculate is the most important method and also, in most cases, contains the largest chunk of code for your self-created indicators or strategies.\nThe editing begins with the oldest bar and goes up to the newest bar within the chart. The oldest bar has the number 0. The indexing and numbering will continue to happen; in order to obtain the numbering of the bars you can use the current bar variable. You can see an example illustrating this below.\n\n\nCaution:\n\n\nthe numbering/indexing is different from the bar index \u2013 see \nBars\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnCalculate()\n\n\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\n    Print(\"Calling of OnCalculate for the bar number \" + ProcessingBarIndex + \" from \" +Time[0]);\n}\n\n\n\n\nOnChartPanelMouseDown()\n\n\nDescription\n\n\nIn an indicator, or strategy, the click event of the mouse can be processed. For this, it is necessary to program an EventHandler as a method and add this method to the Chart.ChartPanelMouseDown event.\n\n\nAttention!\n\n\nIt is important to remove the EventHandler from the OnDispose() method, otherwise the EventHandler will still be executed even if the indicator has been removed from the chart.\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n\n\nnamespace AgenaTrader.UserCode\n{\n       public class ChartPanelMouseDown : UserIndicator\n       {\n               protected override void OnInit()\n               {\n                       IsOverlay = true;\n               }\n\n               protected override void OnStart()\n               {\n                       // Add event listener\n                       if (Chart != null)\n                               Chart.ChartPanelMouseDown += OnChartPanelMouseDown;\n               }\n\n\n               protected override void OnDispose()\n               {\n                       // Remove event listener\n                       if (Chart != null)\n                               Chart.ChartPanelMouseDown -= OnChartPanelMouseDown;\n               }\n\n\n               private void OnChartPanelMouseDown(object sender,System.Windows.Forms.MouseEventArgs e)\n               {\n                       Print(\"X = {0}, Y = {1}\", Chart.GetDateTimeByX(e.X),Chart.GetPriceByY(e.Y));\n               }\n       }\n}\n\n\n\n\nOnChartPanelMouseMove()\n\n\nDescription\n\n\nIn an indicator, or strategy, the current position of the mouse can be evaluated and processed. For this, it is necessary to program an EventHandler as a method and add this method to the Chart.ChartPanelMouseMove event.\n\n\nAttention!\n\n\nIt is important to remove the EventHandler from the OnDispose() method, otherwise the EventHandler will still be executed even if the indicator has been removed from the chart.\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n\n\nnamespace AgenaTrader.UserCode\n{\n    public class ChartPanelMouseMove : UserIndicator\n    {\n        protected override void OnInit()\n        {\n            IsOverlay = true;\n        }\n\n        protected override void OnStart()\n        {\n            // Add event listener\n            if (Chart != null)\n                Chart.ChartPanelMouseMove += OnChartPanelMouseMove;\n        }\n\n        protected override void OnDispose()\n        {\n            // Remove event listener\n            if (Chart != null)\n                Chart.ChartPanelMouseMove -= OnChartPanelMouseMove;\n        }\n\n        private void OnChartPanelMouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            Print(\"X = {0}, Y = {1}\", Chart.GetDateTimeByX(e.X), Chart.GetPriceByY(e.Y));\n        }\n    }\n}\n\n\n\n\nOnDispose()\n\n\nDescription\n\n\nThe OnDispose() method can also be overridden in order to once again free up all the resources used in the script.\n\n\nSee \nOnInit()\n and \nOnStart()\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnDispose()\n\n\n\n\nMore Information\n\n\nCaution:\n\n\nPlease do not override the Dispose() method since this can only be used much later within the script. This would lead to resources being used and held for an extended period and thus potentially causing unexpected consequences for the entire application.\n\n\nExample\n\n\nprotected override void OnDispose()\n{\n    if (Window != null)\n    {\n        Window.Dispose();\n        Window = null;\n    }\n}\n\n\n\n\nOnLevel1()\n\n\nDescription\n\n\nThe OnLevel1() method is called up when a change in level 1 data has occurred, meaning whenever there is a change in the bid price, ask price, bid volume, or ask volume, and of course in the last price after a real turnover has occurred.\nIn a multibar indicator, the rocessingBarSeriesIndex property identifies the data series that was used for an information request for OnLevel1().\nOnLevel1() will not be called up for historical data.\nMore information can be found here: \nEvents\n.\n\n\nNotes regarding data from Yahoo (YFeed)\n\n\nThe field \"LastPrice\" equals \u2013 as usual \u2013 either the bid price or the ask price, depending on the last revenue turnover.\n\n\nThe MarketDataType\" field always equals the \"last\" value\n\n\nThe fields \"Volume\", \"BidSize\" and \"AskSize\" are always 0.\n\n\nUsage\n\n\nprotected override void OnLevel1(Level1Args e)\n\n\n\n\nParameter\n\n\n[*Level1Args*] e\n\n\n\n\nExample\n\n\nprotected override void OnLevel1(Level1Args e)\n{\n    Print(\"AskPrice \"+e.AskPrice);\n    Print(\"AskSize \"+e.AskSize);\n    Print(\"BidPrice \"+e.BidPrice);\n    Print(\"BidSize \"+e.BidSize);\n    Print(\"Instrument \"+e.Instrument);\n    Print(\"LastPrice \"+e.LastPrice);\n    Print(\"MarketDataType \"+e.MarketDataType);\n    Print(\"Price \"+e.Price);\n    Print(\"Time \"+e.Time);\n    Print(\"Volume \"+e.Volume);\n}\n\n\n\n\nOnLevel2()\n\n\nDescription\n\n\nThe OnLevel2() method is called up whenever there is a change in the level 2 data (market depth).\nIn a multibar indicator, the ProcessingBarSeriesIndex property identifies the data series for which the OnLevel2() method is called up.\nOnLevel2 is not called up for historical data.\n\n\nMore information can be found here: \nEvents\n.\n\n\nUsage\n\n\nprotected override void OnLevel2(Level2Args e)\n\n\n\n\nParameter\n\n\nAn object from \nLevel2Args\n\n\nExample\n\n\nprotected override void OnLevel2(Level2Args e)\n{\n    // Current Bit-Price\n    if (e.MarketDataType == MarketDataType.Bit)\n        Print(\"The current bit is \" + e.Price );\n}\n\n\n\n\nOnOrderChanged()\n\n\nDescription\n\n\nThe OnOrderChanged() method is called up whenever the status is changed by a strategy-managed order.\nA status change can therefore occur due to a change in the volume, price or status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for the relevant events.\n\n\nImportant note:\n\n\nIf a strategy is to be controlled by order executions, we highly recommend that you use OnOrderExecution() instead of OnOrderChanged(). Otherwise there may be problems with partial executions.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nAn order object of the type IOrder\n\n\nUsage\n\n\nprotected override void OnOrderChanged(IOrder order)\n\n\n\n\nExample\n\n\nprivate IOrder entry = null;\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n        entry = OpenLong(\"EMACrossesSMA\");\n\n    if (entry != null && entry == order)\n    {\n        if (order.OrderState == OrderState.Filled)\n        {\n        PlaySound(\"OrderFilled.wav\");\n        entryOrder = null;\n        }\n    }\n}\nprotected override void OnOrderChanged(IOrder order)\n{\n\n}\n\n\n\n\nOnOrderExecution()\n\n\nDescription\n\n\nThe OnOrderExecution() method is called up when an order is executed (filled).\nThe status of a strategy can be changed by a strategy-managed order. This status change can be initiated by the changing of a volume, price or the status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for all events.\n\n\nOnOrderExecution() will always be executed AFTER \nOnOrderChanged()\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nAn execution object of the type \nIExecution\n\n\nUsage\n\n\nprotected override void OnOrderExecution(IExecution execution)\n\n\n\n\nExample\n\n\nprivate IOrder entry = null;\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n            entry = OpenLong(\"EMACrossesSMA\");\n}\nprotected override void OnOrderExecution(IExecution execution)\n{\n    // Example\n    if (entry != null && execution.Order == entry)\n    {\n        Print(execution.Price.ToString());\n    Print(execution.Order.OrderState.ToString());\n    }\n}\n\n\n\n\nOnStart()\n\n\nDescription\n\n\nThe OnStart() method can be overridden to initialize your own variables, perform license checks or call up user forms etc.\nOnStart() is only called up once at the beginning of the script, after \nOnInit()\n and before \nOnCalculate()\n are called up.\n\n\nSee \nOnDispose()\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnStart()\n\n\n\n\nExample\n\n\nprivate myForm Window;\nprotected override void OnStart()\n{\n    if (Chart != null)\n    {\n    Window = new myForm();\n    Window.Show();\n    }\n}\n\n\n\n\nOnStop()\n\n\nDescription\n\n\nThe OnStop() method is called up once a script is terminated. This can be when e.g. an indicator was removed from the chart or a column with an indicator / a scripted condition was removed from the scanner. \n\n\nSee \nOnDispose()\n.\n\n\nMore information can be found here: \nEvents\n.\n\n\nParameter\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnStop()\n\n\n\n\nExample\n\n\nprotected override void OnStop()\n{\n    Log(\"Stop: \" + this.ToString() + \" | \" + Instrument.Symbol, InfoLogLevel.Info); \n}",
            "title": "Events"
        },
        {
            "location": "/events/#events",
            "text": "AgenaTrader is an  event-oriented  application by definition.  Programming in AgenaTrader using the various application programming interface ( API ) methods is based initially on the  Overwriting  of routines predefined for event handling.  The following methods can be used and therefore overwritten:   OnBrokerConnect()  OnBrokerDisconnect()  OnCalculate()  OnChartPanelMouseDown()  OnChartPanelMouseMove()  OnDispose()  OnLevel1()  OnLevel2()  OnOrderChanged()  OnOrderExecution()  OnStart()  OnStop()",
            "title": "Events"
        },
        {
            "location": "/events/#onbrokerconnect",
            "text": "",
            "title": "OnBrokerConnect()"
        },
        {
            "location": "/events/#description",
            "text": "OnBrokerConnect() method is invoked each time the connection to the broker is established.  With the help of OnBrokerConnect(), it is possible to reassign the existing or still open orders to the strategy in the event of a connection abort with the broker and thus allow it to be managed again.  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage",
            "text": "protected override void OnBrokerConnect()",
            "title": "Usage"
        },
        {
            "location": "/events/#example",
            "text": "private IOrder _takeProfit = null;\nprivate IOrder _trailingStop = null;\n\n\nprotected override void OnBrokerConnect()\n{\n   if (Trade != null && Trade.PositionType != PositionType.Flat)\n   {\n       _takeProfit = Orders.FirstOrDefault(o => o.Name == this.GetType().Name && o.OrderType ==OrderType.Limit);\n       _trailingStop = Orders.FirstOrDefault(o => o.Name == this.GetType().Name && o.OrderType ==OrderType.Stop);\n   }\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onbrokerdisconnect",
            "text": "",
            "title": "OnBrokerDisconnect()"
        },
        {
            "location": "/events/#description_1",
            "text": "OnBrokerDisconnect() method is invoked each time the connection to the broker is interrupted.  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_1",
            "text": "An object from  TradingDatafeedChangedEventArgs",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_1",
            "text": "protected override void OnBrokerDisconnect(TradingDatafeedChangedEventArgs e)",
            "title": "Usage"
        },
        {
            "location": "/events/#example_1",
            "text": "protected override void OnBrokerDisconnect(TradingDatafeedChangedEventArgs e)\n{\n   if (e.Connected)\n       Print(\"The connection to the broker will be disconnected.\");\n   else\n       Print(\"The connection to the broker was disconnected.\");\n}",
            "title": "Example"
        },
        {
            "location": "/events/#oncalculate",
            "text": "",
            "title": "OnCalculate()"
        },
        {
            "location": "/events/#description_2",
            "text": "The OnCalculate() method is called up whenever a bar changes; depending on the variables of  CalculateOnClosedBar , this will happen upon every incoming tick or when the bar has completed/closed.\nOnCalculate is the most important method and also, in most cases, contains the largest chunk of code for your self-created indicators or strategies.\nThe editing begins with the oldest bar and goes up to the newest bar within the chart. The oldest bar has the number 0. The indexing and numbering will continue to happen; in order to obtain the numbering of the bars you can use the current bar variable. You can see an example illustrating this below.  Caution:  the numbering/indexing is different from the bar index \u2013 see  Bars .  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_2",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_2",
            "text": "protected override void OnCalculate()",
            "title": "Usage"
        },
        {
            "location": "/events/#example_2",
            "text": "protected override void OnCalculate()\n{\n    Print(\"Calling of OnCalculate for the bar number \" + ProcessingBarIndex + \" from \" +Time[0]);\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onchartpanelmousedown",
            "text": "",
            "title": "OnChartPanelMouseDown()"
        },
        {
            "location": "/events/#description_3",
            "text": "In an indicator, or strategy, the click event of the mouse can be processed. For this, it is necessary to program an EventHandler as a method and add this method to the Chart.ChartPanelMouseDown event.",
            "title": "Description"
        },
        {
            "location": "/events/#attention",
            "text": "It is important to remove the EventHandler from the OnDispose() method, otherwise the EventHandler will still be executed even if the indicator has been removed from the chart.",
            "title": "Attention!"
        },
        {
            "location": "/events/#example_3",
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n\n\nnamespace AgenaTrader.UserCode\n{\n       public class ChartPanelMouseDown : UserIndicator\n       {\n               protected override void OnInit()\n               {\n                       IsOverlay = true;\n               }\n\n               protected override void OnStart()\n               {\n                       // Add event listener\n                       if (Chart != null)\n                               Chart.ChartPanelMouseDown += OnChartPanelMouseDown;\n               }\n\n\n               protected override void OnDispose()\n               {\n                       // Remove event listener\n                       if (Chart != null)\n                               Chart.ChartPanelMouseDown -= OnChartPanelMouseDown;\n               }\n\n\n               private void OnChartPanelMouseDown(object sender,System.Windows.Forms.MouseEventArgs e)\n               {\n                       Print(\"X = {0}, Y = {1}\", Chart.GetDateTimeByX(e.X),Chart.GetPriceByY(e.Y));\n               }\n       }\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onchartpanelmousemove",
            "text": "",
            "title": "OnChartPanelMouseMove()"
        },
        {
            "location": "/events/#description_4",
            "text": "In an indicator, or strategy, the current position of the mouse can be evaluated and processed. For this, it is necessary to program an EventHandler as a method and add this method to the Chart.ChartPanelMouseMove event.",
            "title": "Description"
        },
        {
            "location": "/events/#attention_1",
            "text": "It is important to remove the EventHandler from the OnDispose() method, otherwise the EventHandler will still be executed even if the indicator has been removed from the chart.",
            "title": "Attention!"
        },
        {
            "location": "/events/#example_4",
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n\n\nnamespace AgenaTrader.UserCode\n{\n    public class ChartPanelMouseMove : UserIndicator\n    {\n        protected override void OnInit()\n        {\n            IsOverlay = true;\n        }\n\n        protected override void OnStart()\n        {\n            // Add event listener\n            if (Chart != null)\n                Chart.ChartPanelMouseMove += OnChartPanelMouseMove;\n        }\n\n        protected override void OnDispose()\n        {\n            // Remove event listener\n            if (Chart != null)\n                Chart.ChartPanelMouseMove -= OnChartPanelMouseMove;\n        }\n\n        private void OnChartPanelMouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            Print(\"X = {0}, Y = {1}\", Chart.GetDateTimeByX(e.X), Chart.GetPriceByY(e.Y));\n        }\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/events/#ondispose",
            "text": "",
            "title": "OnDispose()"
        },
        {
            "location": "/events/#description_5",
            "text": "The OnDispose() method can also be overridden in order to once again free up all the resources used in the script.  See  OnInit()  and  OnStart() .  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_3",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_3",
            "text": "protected override void OnDispose()",
            "title": "Usage"
        },
        {
            "location": "/events/#more-information",
            "text": "Caution:  Please do not override the Dispose() method since this can only be used much later within the script. This would lead to resources being used and held for an extended period and thus potentially causing unexpected consequences for the entire application.",
            "title": "More Information"
        },
        {
            "location": "/events/#example_5",
            "text": "protected override void OnDispose()\n{\n    if (Window != null)\n    {\n        Window.Dispose();\n        Window = null;\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onlevel1",
            "text": "",
            "title": "OnLevel1()"
        },
        {
            "location": "/events/#description_6",
            "text": "The OnLevel1() method is called up when a change in level 1 data has occurred, meaning whenever there is a change in the bid price, ask price, bid volume, or ask volume, and of course in the last price after a real turnover has occurred.\nIn a multibar indicator, the rocessingBarSeriesIndex property identifies the data series that was used for an information request for OnLevel1().\nOnLevel1() will not be called up for historical data.\nMore information can be found here:  Events .  Notes regarding data from Yahoo (YFeed)  The field \"LastPrice\" equals \u2013 as usual \u2013 either the bid price or the ask price, depending on the last revenue turnover.  The MarketDataType\" field always equals the \"last\" value  The fields \"Volume\", \"BidSize\" and \"AskSize\" are always 0.",
            "title": "Description"
        },
        {
            "location": "/events/#usage_4",
            "text": "protected override void OnLevel1(Level1Args e)",
            "title": "Usage"
        },
        {
            "location": "/events/#parameter_4",
            "text": "[*Level1Args*] e",
            "title": "Parameter"
        },
        {
            "location": "/events/#example_6",
            "text": "protected override void OnLevel1(Level1Args e)\n{\n    Print(\"AskPrice \"+e.AskPrice);\n    Print(\"AskSize \"+e.AskSize);\n    Print(\"BidPrice \"+e.BidPrice);\n    Print(\"BidSize \"+e.BidSize);\n    Print(\"Instrument \"+e.Instrument);\n    Print(\"LastPrice \"+e.LastPrice);\n    Print(\"MarketDataType \"+e.MarketDataType);\n    Print(\"Price \"+e.Price);\n    Print(\"Time \"+e.Time);\n    Print(\"Volume \"+e.Volume);\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onlevel2",
            "text": "",
            "title": "OnLevel2()"
        },
        {
            "location": "/events/#description_7",
            "text": "The OnLevel2() method is called up whenever there is a change in the level 2 data (market depth).\nIn a multibar indicator, the ProcessingBarSeriesIndex property identifies the data series for which the OnLevel2() method is called up.\nOnLevel2 is not called up for historical data.  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#usage_5",
            "text": "protected override void OnLevel2(Level2Args e)",
            "title": "Usage"
        },
        {
            "location": "/events/#parameter_5",
            "text": "An object from  Level2Args",
            "title": "Parameter"
        },
        {
            "location": "/events/#example_7",
            "text": "protected override void OnLevel2(Level2Args e)\n{\n    // Current Bit-Price\n    if (e.MarketDataType == MarketDataType.Bit)\n        Print(\"The current bit is \" + e.Price );\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onorderchanged",
            "text": "",
            "title": "OnOrderChanged()"
        },
        {
            "location": "/events/#description_8",
            "text": "The OnOrderChanged() method is called up whenever the status is changed by a strategy-managed order.\nA status change can therefore occur due to a change in the volume, price or status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for the relevant events.  Important note:  If a strategy is to be controlled by order executions, we highly recommend that you use OnOrderExecution() instead of OnOrderChanged(). Otherwise there may be problems with partial executions.  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_6",
            "text": "An order object of the type IOrder",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_6",
            "text": "protected override void OnOrderChanged(IOrder order)",
            "title": "Usage"
        },
        {
            "location": "/events/#example_8",
            "text": "private IOrder entry = null;\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n        entry = OpenLong(\"EMACrossesSMA\");\n\n    if (entry != null && entry == order)\n    {\n        if (order.OrderState == OrderState.Filled)\n        {\n        PlaySound(\"OrderFilled.wav\");\n        entryOrder = null;\n        }\n    }\n}\nprotected override void OnOrderChanged(IOrder order)\n{\n\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onorderexecution",
            "text": "",
            "title": "OnOrderExecution()"
        },
        {
            "location": "/events/#description_9",
            "text": "The OnOrderExecution() method is called up when an order is executed (filled).\nThe status of a strategy can be changed by a strategy-managed order. This status change can be initiated by the changing of a volume, price or the status of the exchange (from \u201cworking\u201d to \u201cfilled\u201d). It is guaranteed that this method will be called up in the correct order for all events.  OnOrderExecution() will always be executed AFTER  OnOrderChanged() .  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_7",
            "text": "An execution object of the type  IExecution",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_7",
            "text": "protected override void OnOrderExecution(IExecution execution)",
            "title": "Usage"
        },
        {
            "location": "/events/#example_9",
            "text": "private IOrder entry = null;\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n            entry = OpenLong(\"EMACrossesSMA\");\n}\nprotected override void OnOrderExecution(IExecution execution)\n{\n    // Example\n    if (entry != null && execution.Order == entry)\n    {\n        Print(execution.Price.ToString());\n    Print(execution.Order.OrderState.ToString());\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onstart",
            "text": "",
            "title": "OnStart()"
        },
        {
            "location": "/events/#description_10",
            "text": "The OnStart() method can be overridden to initialize your own variables, perform license checks or call up user forms etc.\nOnStart() is only called up once at the beginning of the script, after  OnInit()  and before  OnCalculate()  are called up.  See  OnDispose() .  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_8",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_8",
            "text": "protected override void OnStart()",
            "title": "Usage"
        },
        {
            "location": "/events/#example_10",
            "text": "private myForm Window;\nprotected override void OnStart()\n{\n    if (Chart != null)\n    {\n    Window = new myForm();\n    Window.Show();\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/events/#onstop",
            "text": "",
            "title": "OnStop()"
        },
        {
            "location": "/events/#description_11",
            "text": "The OnStop() method is called up once a script is terminated. This can be when e.g. an indicator was removed from the chart or a column with an indicator / a scripted condition was removed from the scanner.   See  OnDispose() .  More information can be found here:  Events .",
            "title": "Description"
        },
        {
            "location": "/events/#parameter_9",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/events/#usage_9",
            "text": "protected override void OnStop()",
            "title": "Usage"
        },
        {
            "location": "/events/#example_11",
            "text": "protected override void OnStop()\n{\n    Log(\"Stop: \" + this.ToString() + \" | \" + Instrument.Symbol, InfoLogLevel.Info); \n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/",
            "text": "Strategy Programming\n\n\nAccount\n\n\nDescription\n\n\nAccount is an object containing information about the account with which the current strategy is working.\n\n\nThe individual properties are:\n\n\n\n\n\n\nAccount.AccountConnection\n\n    Name for the broker connection used (the name assigned under the account connection submenu)\n\n\n\n\n\n\nAccount.AccountType\n\n    Type of account (live account, simulated account etc.)\n\n\n\n\n\n\nAccount.Broker\n\n    Name/definition for the broker\n\n\n\n\n\n\nAccount.BuyingPower\n\n    The current account equity in consideration of the leverage provided by the broker (IB leverages your account equity by a factor of 4, meaning that with 10000\u20ac your buying power is equal to 40000\u20ac)\n\n\n\n\n\n\nAccount.CashValue\n\n    Amount (double)\n\n\n\n\n\n\nAccount.Currency\n\n    Currency in which the account is held\n\n\n\n\n\n\nAccount.ExcessEquity\n\n    Excess\n\n\n\n\n\n\nAccount.InitialMargin\n\n    Initial margin (depends on the broker, double)\n\n\n\n\n\n\nAccount.InstrumentType\n\n    Type of trading instrument (type AgenaTrader.Plugins.InstrumentTypes)\n\n\n\n\n\n\nAccount.IsDemo\n\n    True, if the account is a demo account\n\n\n\n\n\n\nAccount.Name\n\n    Name of the account (should be identical to Account.AccountConnection)\n\n\n\n\n\n\nAccount.OverNightMargin\n\n    Overnight margin (depends on the broker, double)\n\n\n\n\n\n\nAccount.RealizedProfitLoss\n\n    Realized profits and losses (double)\n\n\n\n\n\n\nExample\n\n\nPrint(\"AccountConnection \" + Account.AccountConnection);\nPrint(\"AccountType \" + Account.AccountType);\nPrint(\"Broker \" + Account.Broker);\nPrint(\"BuyingPower \" + Account.BuyingPower);\nPrint(\"CashValue \" + Account.CashValue);\nPrint(\"Currency \" + Account.Currency);\nPrint(\"ExcessEquity \" + Account.ExcessEquity);\nPrint(\"InitialMargin \" + Account.InitialMargin);\nPrint(\"InstrumentTypes \" + Account.InstrumentTypes);\nPrint(\"IsDemo \" + Account.IsDemo);\nPrint(\"Name \" + Account.Name);\nPrint(\"OverNightMargin \" + Account.OverNightMargin);\nPrint(\"RealizedProfitLoss \" + Account.RealizedProfitLoss);\n\n\n\n\nBarsCountFromTradeClose()\n\n\nDescription\n\n\nThe property \"BarsCountFromTradeClose\" outputs the number of bars that have occurred since the last exit from the market.\n\n\nUsage\n\n\nBarsCountFromTradeClose()\nBarsCountFromTradeClose(string strategyName)\n\n\n\n\nFor multi-bar strategies\n\n\nBarsCountFromTradeClose(int multibarSeriesIndex, string strategyName, int exitsAgo)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrategyName\n\n\nThe Strategy name (string) that has been used to clearly label the exit within the exit method.\n\n\n\n\n\n\nmultibarSeriesIndex\n\n\nFor *\nMultibar*\nMultiBars\n strategies. Index of the data series for which the exit order has been executed. See \nProcessingBarSeriesIndex\n.\n\n\n\n\n\n\nexitsAgo\n\n\nNumber of exits that have occurred in the past. A zero indicates the number of bars that have formed after the last exit.\n\n\n\n\n\n\n\n\nExample\n\n\nPrint(\"The last exit was \" + BarsCountFromTradeClose() + \" bars ago.\");\n\n\n\n\nBarsCountFromTradeOpen()\n\n\nDescription\n\n\nThe property \"BarsCountFromTradeOpen\" returns the number of bars that have occurred since the last entry into the market.\n\n\nUsage\n\n\nBarsCountFromTradeOpen()\nBarsCountFromTradeOpen(string strategyName)\n\n\n\n\nFor multi-bar strategies\n\n\nBarsCountFromTradeOpen(int multibarSeriesIndex, string strategyName, int entriesAgo)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrategyName\n\n\nThe strategy name (string) that has been used to clearly label the entry within an entry method.\n\n\n\n\n\n\nmultibarSeriesIndex\n\n\nFor *\nMultibar*\n, \nMultiBars\n strategies. Index for the data series for which the entry order was executed. See \nProcessingBarSeriesIndex\n, \nProcessingBarSeriesIndex\n.\n\n\n\n\n\n\nentriesAgo\n\n\nNumber of entries in the past. A zero indicates the number of bars that have formed after the last entry.\n\n\n\n\n\n\n\n\nExample\n\n\nPrint(\"The last entry was \" + BarsCountFromTradeOpen() + \" bars ago.\");\n\n\n\n\nCancelAllOrders()\n\n\nDescription\n\n\nCancelAllOrders deletes all oders (cancel) managed by the strategy.\nA cancel request is sent to the broker. Whether an or there is really deleted, can not be guaranteed. It may happen that an order has received a partial execution before it is deleted.\nTherefore we recommend that you check the status of the order with \nOnOrderChanged()\n.\n\n\nUsage\n\n\nCancelAllOrders()\n\n\n\n\nParameter\n\n\nNone\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\n   if (BarsCountFromTradeOpen() >= 30)\n       CancelAllOrders();\n}\n\n\n\n\nOrder.Cancel()\n\n\nDescription\n\n\nCancel order deletes an order.\n\n\nA cancel request is sent to the broker. There is no guarantee that the order will actually be deleted there. It may occur that the order receives a partial execution before it is deleted. Therefore we recommend that you check the status of the order with \nOnOrderChanged()\n.\n\n\nUsage\n\n\nOrder.Cancel(IOrder order)\n\n\n\n\nParameter\n\n\nAn order object of the type \"IOrder\"\n\n\nExample\n\n\nprivate IOrder entryOrder = null;\nprivate int barNumber = 0;\nprotected override void OnCalculate()\n{\n    // Place an entry stop at the high of the current bar\n    if (entryOrder == null)\n    {\n        entryOrder = OpenLongStop(High[0], \"stop long\");\n        barNumber = ProcessingBarIndex;\n    }\n    // Delete the order after 3 bars\n    if (Position.PositionType == PositionType.Flat &&\n    ProcessingBarIndex > barNumber + 3)\n        Order.Cancel(entryOrder);\n}\n\n\n\n\nCreateIfDoneGroup()\n\n\nDescription\n\n\nIf two orders are linked to one another via a CreateIfDoneGroup, it means that if the one order has been executed, the second linked order is activated.\n\n\nUsage\n\n\nCreateIfDoneGroup(IEnumerable<IOrder> orders)\n\n\n\n\nParameter\n\n\nAn order object of type IOrder as a list\n\n\nExample\n\n\nprivate IOrder oopenlong = null;\nprivate IOrder osubmitbuy = null;\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\nprotected override void OnCalculate()\n{\n\n oopenlong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"strategyName\",\n                });\n\nosubmitbuy =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Sell,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * 1.1,\n                    SignalName = \"strategyName\",\n                });\n\n   CreateIfDoneGroup(new List<IOrder> { oopenlong, osubmitbuy });\n\n   oopenlong.ConfirmOrder();\n}\n\n\n\n\n\nCreateOCOGroup()\n\n\nDescription\n\n\nIf two orders are linked via a CreateOCOGroup, it means that once the one order has been executed, the second linked order is deleted.\n\n\nUsage\n\n\nCreateOCOGroup(IEnumerable<IOrder> orders)\n\n\n\n\nParameter\n\n\nAn order object of type IOrder as a list\n\n\nExample\n\n\nprivate IOrder oopenlong = null;\nprivate IOrder oEnterShort = null;\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\nprotected override void OnCalculate()\n{\n\noopenlong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * 1.1,\n                    SignalName = \"strategyName\",\n                });\n\n\noEnterShort =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Sell,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * -1.1,\n                    SignalName = \"strategyName\",\n                });\n\n\n\n   CreateOCOGroup(new List<IOrder> { oopenlong, oEnterShort });\n\n   oopenlong.ConfirmOrder();\n   oEnterShort.ConfirmOrder();\n}\n\n\n\n\nCreateOROGroup()\n\n\nDescription\n\n\nIf two orders are linked via a CreateOROGroup, it means that once the one order has been executed, the order size of the second order is reduced by the order volume of the first order.\n\n\nUsage\n\n\nCreateOROGroup(IEnumerable<IOrder> orders)\n\n\n\n\nParameter\n\n\nAn order object of type IOrder as a list\n\n\nExample\n\n\nprivate IOrder oStopLong = null;\nprivate IOrder oLimitLong = null;\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\nprotected override void OnCalculate()\n{\n\n   oStopLong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * -1.1,\n                    SignalName = \"strategyName\",\n                });\n\n\n\n\n   oLimitLong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Quantity = DefaultOrderQuantity*0.5,\n            Price = Close[0] * 1.1,\n                    SignalName = \"strategyName\",\n                });\n\n   CreateOROGroup(new List<IOrder> { oLimitLong, oStopLong });\n}\n\n\n\n\nDataSeriesConfigurable\n\n\nDefaultOrderQuantity\n\n\nDescription\n\n\nChange order changes an order.\n\n\nDefault quantity defines the amount to be used in a strategy. Default quantity is set within the \nOnInit()\n method.\n\n\nUsage\n\n\nReplaceOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)\n\n\n\n\nParameter\n\n\nAn int value containing the amount (stocks, contracts etc.)\n\n\nExample\n\n\nprotected override void OnInit()\n{\nDefaultOrderQuantity = 100;\n}\n\n\n\n\nEntriesPerDirection\n\n\nDescription\n\n\nEntries per direction defines the maximum number of entries permitted in one direction (long or short).\n\n\nWhether the name of the entry signal is taken into consideration or not is defined.\n\n\nEntries per direction is defined with the \nOnInit()\n method.\n\n\nUsage\n\n\nEntriesPerDirection\n\n\nParameter\n\n\nAn int value for the maximum entries permitted in one direction.\n\n\nExample\n\n\n// Example 1\n// If one of the two entry conditions is true and a long position is opened, then the other entry signal will be ignored\nprotected override void OnInit()\n{\nEntriesPerDirection = 1;\n\n}\n\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n        SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"SMA cross entry\",\n                });\n}\n\n// Example 2\n\n\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n    {\n        SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"EMACrossesSMA\",\n                });\n    }\n    else if (CrossAbove (MACD(2,2,5), 0, 1))\n    {\n        SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"MACDCross\",\n                });\n    }\n}\n\n\n\n\nExcludeTradeHistoryInBacktest\n\n\nCloseLongTrade ()\n\n\nDescription\n\n\nCloseLongTrade creates a sell order for closing a long position (sell).\n\n\nSee: \n*SubmitOrder()\n, \n*CloseShortTrade()\n\n\nUsage\n\n\nSee \nStrategyOrderParameters\n\n\nParameter\n\n\nSee \nStrategyOrderParameters\n\n\nReturn Value\n\n\nAn order object of the type \"IOrder\"\n\n\nExample\n\n\nvar order = CloseLongTrade(new StrategyOrderParameters\n{\n    Type = OrderType.Market\n});\n\n\n\n\nExitOnClose\n\n\nExitOnCloseSeconds\n\n\nCloseShortTrade()\n\n\nDescription\n\n\nCloseShortTradecreates a buy-to-cover order for closing a short position (buy).\n\n\nSee: \nSubmitOrder()\n, \nCloselongTrade()\n\n\nUsage\n\n\nSee \nStrategyOrderParameters\n\n\nParameter\n\n\nSee \nStrategyOrderParameters\n\n\nReturn Value\n\n\nAn order object of the type \"IOrder\"\n\n\nExample\n\n\nvar order = CloseShortTrade(new StrategyOrderParameters\n{\n    Type = OrderType.Stop,\n    Quantity = quantity,\n    StopPrice = price\n});\n\n\n\n\nAccount.GetValue()\n\n\nDescription\n\n\nGet account value outputs information regarding the account for which the current strategy is being carried out.\n\n\nSee \nGetProfitLoss()\n.\n\n\nUsage\n\n\nAccount.GetValue(AccountItem accountItem)\n\n\n\n\nParameter\n\n\nPossible values for account item are:\n\n\nAccountItem.BuyingPower\n\n\nAccountItem.CashValue\n\n\nAccountItem.RealizedProfitLoss\n\n\nReturn Value\n\n\nA double value for the account item for historical bars, a zero (0) is returned\n\n\nExample\n\n\nPrint(\"The current account cash value is \" + Account.GetValue(AccountItem.CashValue));\nPrint(\"The current account cash value with the leverage provided by the broker is \" + Account.GetValue(AccountItem.BuyingPower));\nPrint(\"The current P/L already realized is \" + Account.GetValue(AccountItem.RealizedProfitLoss));\n\n\n\n\nGetEntries()\n\n\nDescription\n\n\nThis DataSeries is used in conditions and indicates multiple entry prices for entry orders\n\n\nUsage\n\n\nOverload in scripted condition for short and long signal indication\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nint\n\n\nExample\n\n\npublic class MyTestEntry : UserScriptedCondition\n    {\n\n        double _percentage = 100;\n\n        protected override void Initialize()\n        {\n            IsEntry = true;\n            IsStop = false;\n            IsTarget= false;\n            Add(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"Occurred\"));\n            Add(new OutputDescriptor(Color.FromArgb(255, 118, 222, 90), \"Entry1\"));\n            Add(new OutputDescriptor(Color.FromArgb(255, 118, 222, 90), \"Entry2\"));\n            Add(new OutputDescriptor(Color.FromArgb(255, 118, 222, 90), \"Entry3\"));\n            Overlay = true;\n            CalculateOnBarClose = true;\n        }\n\n        protected override void OnBarUpdate()\n        {\n\n            Calculate();\n\n        }\n\n        public override void Recalculate()\n        {\n            Calculate();\n        }\n\n        private void Calculate ()\n        {\n\n            if (TradeDirection == PositionType.Long)\n            {\n                Entry1.Set(Close[0] + 0.5);\n                Entry2.Set(Close[0] + 1);\n                Entry3.Set(Close[0] + 1.5);\n            }\n            else\n            {\n                Entry1.Set(Close[0] - 0.5);\n                Entry2.Set(Close[0] - 1);\n                Entry3.Set(Close[0] - 1.5);\n            }\n        }\n\n        #region Properties\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Occurred\n        {\n            get { return Values[0]; }\n        }\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Entry1\n        {\n            get { return Values[1]; }\n        }\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Entry2\n        {\n            get { return Values[2]; }\n        }\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Entry3\n        {\n            get { return Values[3]; }\n        }\n\n        public override IList<DataSeries> GetEntrys()\n        {\n            return new[] { Entry1, Entry2, Entry3 };\n\n\n\n\n\nGetProfitLoss()\n\n\nDescription\n\n\nGet profit loss outputs the currently unrealized profit or loss for a running position.\n\n\nSee \nAccount.GetValue()\n.\n\n\nUsage\n\n\nGetProfitLoss(int pLType);\n\n\n\n\nParameter\n\n\nPotential values for the P/L type are:\n\n\n0 \u2013 Amount: P/L as a currency amount\n\n\n1 \u2013 Percent: P/L in percent\n\n\n2 \u2013 Risk: P/L in Van Tharp R-multiples \nwww.vantharp.com\n\n\n3 \u2013 P/L in ticks\n\n\nReturn Value\n\n\nA double value for the unrealized profit or loss\n\n\nExample\n\n\nPrint(\"The current risk for the strategy \" + this.Name + \" is \" + GetProfitLoss(1) + \" \" + Instrument.Currency);\nPrint(\"This equals \"+ string.Format( \"{0:F1} R.\", GetProfitLoss(3)));\n\n\n\n\nGetProfitLossAmount()\n\n\nDescription\n\n\nGetProfitLossAmount () provides the current unrealized gain or loss of a current position as the currency amount.\n\n\nSee \nAccount.GetValue()\n.\n\n\nUsage\n\n\nGetProfitLossAmount(double profitLoss);\n\n\n\n\nParameter\n\n\nDouble\n\n\nReturn Value\n\n\nA double value for the unrealized profit or loss\n\n\nExample\n\n\nPrint(\"the current P&L \" + this.Name + \" is \" + GetProfitLossAmount(Position.OpenProfitLoss) + \" \" + Instrument.Currency);\n\n\n\n\nGetProfitLossRisk()\n\n\nDescription\n\n\nGetProfitLossRisk () returns the current unrealized gain or loss of a current position in R-multiples.\n\n\nSee \nAccount.GetValue()\n.\n\n\nUsage\n\n\nGetProfitLossRisk();\n\n\n\n\nParameter\n\n\nNone\n\n\nReturn Value\n\n\nA double value for the R-Multiple\n\n\nExample\n\n\nPrint(\"the current P&L \" + this.Name + \" is \" + string.Format( \"{0:F1} R.\", GetProfitLossRisk()));\n\n\n\n\nGetScriptedCondition()\n\n\nDescription\n\n\nThis method allows user to communicate between scripts.\n\n\nIsAutoConfirmOrder\n\n\nDescription\n\n\nIsAutoConfirmOrder determines whether orders are activated automatically. IsAutoConfirmOrder is specified in the \nOnInit()\n method.\n\n\nIf IsAutoConfirmOrder = true, then orders are automatically activated (default). If IsAutoConfirmOrder is assigned the value false, the corresponding order must be activated with order.\nConfirmOrder()\n.\n\n\nParameter\n\n\nBool value\n\n\nExample\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\n\n\nOrder\n\n\nDescription\n\n\nIOrder is an object that contains information about an order that is currently managed by a strategy.\n\n\nThe individual properties are:\n\n\n\n\n\n\nAction\n    \nOne of four possible positions in the market:\n\n\n\n\nOrderDirection.Buy\n\n\nOrderDirection.Sell\n\n\n\n\n\n\n\n\nAveragePrice\n\n    \nThe average purchase or selling price of a position.For positions without partial executions, this corresponds to the entry price.\n\n\n\n\n\n\nFilledQuantity\n\n    For partial versions\n\n\n\n\n\n\nLimitPrice\n\n\n\n\n\n\nName\n\n \u00a0 \u00a0The unique SignalName  (maybe mistake SignalName)\n\n\n\n\n\n\nOrderId\n\n    The unique OrderId\n\n\n\n\n\n\nOrderMode\n\n    One of three possible positions in the market:\n\n\n\n\nOrderMode.Direct\n\n\nOrderMode.Dynamic\n\n\nOrderMode.Synthetic\n\n\n\n\n\n\n\n\nOrderState\n\n    The current status of the order can be queried (see \nOnOrderExecution\n and \nOnOrderChanged\n)\n\n\n\n\nOrderState.Accepted\n\n\nOrderState.Cancelled\n\n\nOrderState.CancelRejected\n\n\nOrderState.FilledQuantity\n\n\nOrderState.PartFilled\n\n\nOrderState.PendingCancel\n\n\nOrderState.PendingReplace\n\n\nOrderState.PendingSubmit\n\n\nOrderState.Rejected\n\n\nOrderState.ReplaceRejected\n\n\nOrderState.Unknown\n\n\nOrderState.Working\n\n\n\n\n\n\n\n\nOrderType\n\n    Possible order types:\n\n\n\n\nOrderType.Limit\n\n\nOrderType.Market\n\n\nOrderType.Stop\n\n\nOrderType.StopLimit\n\n\n\n\n\n\n\n\nQuantity\n\n    The quantity to be ordered\n\n\n\n\n\n\nStopPrice\n\n\n\n\n\n\nTimestamp\n\n    Time stamp\n\n\n\n\n\n\nTimeFrame\n\n    The TimeFrame, which is valid for the order.\n\n\n\n\n\n\nTimeFrame\n\n\n\n\n\n\nPossible Methods:\n\n\n\n\n\n\norder Order.Cancel()\n\n    Delete the Order\n\n\n\n\n\n\norder.ConfirmOrder()\n\n    Confirm the order. This method have to be executed if IsAutoConfirmOrder is set to false and you want to run the order automatically. This is, for example, the case when an OCO or IfDone fabrication is to be produced.\n\n\n\n\n\n\nPerformance\n\n\nDescription\n\n\nPerformance is an object containing information regarding all trades that have been generated by a strategy.\n\n\nThe trades are sorted into multiple lists. With the help of these lists it is easier to create a performance evaluation.\n\n\nSee Performance Characteristics.\n\n\nThe individual lists are:\n\n\n\n\n\n\nPerformance.AllTrades\n\n    A \nTrade\n collection object containing all trades generated by a strategy.\n\n\n\n\n\n\nPerformance.LongTrades\n\n    A \nTrade\n collection object containing all long trades generated by a strategy.\n\n\n\n\n\n\nPerformance.ShortTrades\n\n    A \nTrade\n collection object containing all short trades generated by a strategy.\n\n\n\n\n\n\nPerformance.WinningTrades\n\n    A \nTrade\n collection object containing all profitable trades generated by a strategy.\n\n\n\n\n\n\nPerformance.LosingTrades\n\n    A \nTrade\n collection object containing all loss trades generated by a strategy.\n\n\n\n\n\n\nExample\n\n\n// When exiting a strategy, create a performance evaluation\nprotected override void OnDispose()\n{\nPrint(\"Performance evaluation of the strategy : \" + this.Name);\nPrint(\"----------------------------------------------------\");\nPrint(\"Amount of all trades: \" + Performance.AllTrades.Count);\nPrint(\"Amount of winning trades: \" + Performance.WinningTrades.Count);\nPrint(\"Amount of all loss trades: \" + Performance.LosingTrades.Count);\nPrint(\"Amount of all long trades: \" + Performance.LongTrades.Count);\nPrint(\"Amount of short trades: \" + Performance.ShortTrades.Count);\nPrint(\"Result: \" + Account.RealizedProfitLoss + \" \" + Account.Currency);\n}\n\n\n\n\nPosition\n\n\nDescription\n\n\nPosition is an object containing information regarding the position currently being managed by a strategy.\n\n\nThe individual properties are:\n\n\n\n\n\n\nPosition.AvgPrice\n\n    The average buy or sell price of a position.\n    For positions without partial executions, this is equal to the entry price.\n\n\n\n\n\n\nPosition.CreatedDateTime\n\n    Date and time at which the position was opened.\n\n\n\n\n\n\nPosition.Instrument\n\n    The trading instrument in which the position exists.\n    See \nInstruments\n.\n\n\n\n\n\n\nPosition.PositionType\n\n    One of three possible positions in the market:\n\n\n\n\nPositionType.Flat\n\n\nPositionType.Long\n\n\nPositionType.Short\n\n\n\n\n\n\n\n\nPosition.OpenProfitLoss\n\n    The currently not yet realized profit or loss.\n    See \nGetProfitLoss()\n.\n\n\n\n\n\n\nPosition.ProfitCurrency\n\n    Profit (or loss) displayed as a currency amount.\n\n\n\n\n\n\nPosition.ProfitPercent\n\n    Profit (or loss) displayed in percent.\n\n\n\n\n\n\nPosition.ProfitPoints\n\n    Profit (or loss) displayed in points or pips.\n\n\n\n\n\n\nPosition.Quantity\n\n    Amount of stocks, contracts, CFDs etc. within a position.\n\n\n\n\n\n\nExample\n\n\nif (Position.PositionType != PositionType.Flat)\n{\nPrint(\"Average price \" + Position.AvgPrice);\nPrint(\"Opening time \" + Position.CreatedDateTime);\nPrint(\"Instrument \" + Position.Instrument);\nPrint(\"Current positioning \" + Position.PositionType);\nPrint(\"Unrealized P/L \" + Position.OpenProfitLoss);\nPrint(\"P/L (currency) \" + Position.ProfitCurrency);\nPrint(\"P/L (in percent) \" + Position.ProfitPercent);\nPrint(\"P/L (in points) \" + Position.ProfitPoints);\nPrint(\"Pieces \" + Position.Quantity);\n}\n\n\n\n\nPositionType\n\n\nSee \nPosition.PositionType\n.\n\n\nTraceOrders\n\n\nDescription\n\n\nThe trace orders property is especially useful for keeping track of orders generated by strategies. It also provides an overview of which orders were generated by which strategies.\nTrace orders can be specified with the \nOnInit()\n method.\n\n\nWhen TraceOrders is activated, each order will display the following values in the output window:\n\n\n\n\nInstrument\n\n\nTime frame\n\n\nAction\n\n\nType\n\n\nLimit price\n\n\nStop price\n\n\nQuantity\n\n\nName\n\n\n\n\nThis information is useful when creating and debugging strategies.\n\n\nUsage\n\n\nTraceOrders\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\ntrue\n Tracing is currently switched on\n\nfalse\n Tracing is switched off\n\n\nExample\n\n\nprotected override void OnInit()\n{\nClearTraceWindow();\nTraceOrders = true;\n}\n\n\n\n\nQuantity\n\n\nSee \nPosition.Quantity\n, \nPosition.PositionType\n.\n\n\nReplaceOrder()\n\n\nDescription\n\n\nChange order, as the name suggests, changes an order.\n\n\nUsage\n\n\nReplaceOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\niOrder\n\n\nAn order object of the type \"IOrder\"\n\n\n\n\n\n\nquantity\n\n\nNumber of units to be ordered\n\n\n\n\n\n\nlimitPrice\n\n\nLimit price. Set this to 0 if not needed\n\n\n\n\n\n\nstopPrice\n\n\nStop price. Set this to 0 if not needed\n\n\n\n\n\n\n\n\nExample\n\n\nprivate IOrder stopOrder = null;\nprotected override void OnCalculate()\n{\n// If the position is profiting by 10 ticks then set the stop to break-even\nif (stopOrder != null\n    && Close[0] >= Position.AvgPrice + (10 * TickSize)\n        && stopOrder.StopPrice < Position.AvgPrice)\nReplaceOrder(stopOrder, stopOrder.Quantity, stopOrder.LimitPrice, Position.AvgPrice);\n}\n\n\n\n\nSetUpProfitTarget()\n\n\nDescription\n\n\nSet profit target immediately creates a \"take profit\" order after an entry order is generated. The order is sent directly to the broker and becomes active immediately.\nIf the profit target is static, you can also define SetUpProfitTarget() with the OnInit() method.\n\n\nSee \nSetUpStopLoss()\n, \nSetUpTrailStop()\n.\n\n\nUsage\n\n\nSetUpProfitTarget(double currency)\nSetUpProfitTarget(CalculationMode mode, double value)\nSetUpProfitTarget(string fromEntry signal, CalculationMode mode, double value)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncurrency\n\n\nSets the profit target in a currency, for example 500\u20ac.\n\n\n\n\n\n\nmode\n\n\nPotential values can be: CalculationMode.Percent (display in percent); CalculationMode.Price (display as price value); CalculationMode.Ticks (display in ticks or pips)\n\n\n\n\n\n\nvalue\n\n\nThe distance between entry price and profit target. This is dependent upon the \u201emode\" but generally refers to a monetary value, a percentage or a value in ticks.\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the entry signal for which the profit target is to be generated. The amount is taken from the entry order referenced.\n\n\n\n\n\n\n\n\nExample\n\n\nprotected override void OnInit()\n{\n// Creates a Target Order 20 ticks above the market\nSetUpProfitTarget(CalculationMode.Ticks, 20);\n}\n\n\n\n\nSetUpStopLoss()\n\n\nDescription\n\n\nSet stop loss creates a stop loss order after an entry order is placed. The order is sent directly to the broker and becomes effective immediately.\n\n\nIf the stop loss is static, then SetUpStopLoss() can be defined with the OnInit() method.\n\n\nSee \nSetUpProfitTarget()\n, \nSetUpTrailStop()\n.\n\n\nUsage\n\n\nSetUpStopLoss(double currency)\nSetUpStopLoss(double currency, bool simulated)\nSetUpStopLoss(CalculationMode mode, double value)\nSetUpStopLoss(string fromEntry signal, CalculationMode mode, double value, bool simulated)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncurrency\n\n\nThe difference between the stop loss and the entry price (=risk) in a currency, such as 500\u20ac\n\n\n\n\n\n\nmode\n\n\nPotential values can be: CalculationMode.Percent (display in percent); CalculationMode.Price (display as price value); CalculationMode.Ticks (display in ticks or pips)\n\n\n\n\n\n\nsimulated\n\n\nWhen set to \"true,\" the stop order does not go live (as a market order) until the price has \u201etouched\" it for the first time (meaning that it is executed just as it would be under real market conditions).\n\n\n\n\n\n\nvalue\n\n\nThe distance between stop price and profit target. This is dependent upon the \u201emode\" but generally refers to a monetary value, a percentage or a value in ticks.\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.\n\n\n\n\n\n\n\n\nExample\n\n\nprotected override void OnInit()\n{\n// Sets profitTarget 15 Ticks above the market\nSetUpStopLoss(\"MACDEntry\", CalculationMode.Ticks, 15, true);\n}\n\n\n\n\nSetUpTrailStop()\n\n\nDescription\n\n\nSet trail stop creates a trail stop order after an entry order is generated. Its purpose is to protect you from losses, and after reaching break-even, to protect your gains.\n\n\nThe order is sent directly to the broker and becomes effective immediately.\n\n\nIf the stop loss price and the offset value are static, you can define SetUpTrailStop() with the OnInit() method.\n\n\nIf you use SetUpTrailStop() within the \nOnCalculate()\n method, you must make sure that the parameters are readjusted to the initial value, otherwise the most recently used settings will be used for the new position.\n\n\nFunctionality:\n\n\nAssuming that you have SetUpTrailStop(CalculationMode.Ticks, 30) selected:\n\n\nIn a long position, the stop will be 30 ticks from the previously reached high. If the market makes a new high, the stop will be adjusted. However, the stop will no longer be moved downwards.\n\n\nIn a short position, this behavior starts with the most recent low.\n\n\nTips:\n\n\nIt is not possible to use SetUpStopLoss and SetUpTrailStop for the same position at the same time within one strategy. The SetUpStopLoss() method will always have precedence over the other methods.\n\n\nHowever, it is possible to use both variants parallel to each other in the same strategy if they are referencing different entry signals.\n\n\nPartial executions of a single order will cause a separate trading stop for each partial position.\n\n\nIf a SetUpProfitTarget() is used in addition to a SetUpTrailStop(), then both orders will be automatically linked to form an OCO order.\n\n\nIt is always a stop market order that is generated, and not a stop limit order.\n\n\nIf a position is closed by a different exit order within the strategy, then the TrailingStopOrder is automatically deleted.\n\n\nSee \nSetUpStopLoss()\n, \nSetUpProfitTarget()\n.\n\n\nUsage\n\n\nSetUpTrailStop(double currency)\nSetUpTrailStop(double currency, bool simulated)\nSetUpTrailStop(CalculationMode mode, double value)\nSetUpTrailStop(string fromEntry signal, CalculationMode mode, double value, bool simulated)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncurrency\n\n\nThe distance between the stop loss and the entry price\n\n\n\n\n\n\nmode\n\n\nPossible values are:   CalculationMode.Percent; CalculationMode.Ticks\n\n\n\n\n\n\nsimulated\n\n\nWhen set to \"true,\" the stop order does not go live (as a market order) until the price has \u201etouched\" it for the first time (meaning that it is executed just as it would be under real market conditions).\n\n\n\n\n\n\nvalue\n\n\nThe distance between stop price and profit target. This is dependent upon the \u201emode\" but generally refers to a monetary value, a percentage or a value in ticks.\n\n\n\n\n\n\nfromEntry signal\n\n\nThe name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.\n\n\n\n\n\n\n\n\nExample\n\n\nprotected override void OnInit()\n{\n// Sets a trailing at the low of the last candle\n    SetUpTrailStop(CalculationMode.Price, Low[0]);\n}\n\n\n\n\nStrategyOrderParameters\n\n\nDescription\n\n\nThis class aggregates all properties needed to submit the order.\n\n\nSee \nSubmitOrder()\n, \nCloseLongTrade()\n, \nCloseShortTrade()\n.\n\n\nUsage\n\n\npublic class StrategyOrderParameters\n    {\n        public OrderDirection Direction { get; set; }\n        public OrderMode Mode { get; set; } = OrderMode.Direct;\n        public OrderType Type { get; set; }\n        public bool LiveUntilCancelled { get; set; }\n        public int Quantity { get; set; }\n        public double Price { get; set; }\n        public double StopPrice { get; set; }\n        public string SignalName { get; set; } = String.Empty;\n        public IInstrument Instrument { get; set; }\n        public ITimeFrame TimeFrame { get; set; }\n        public string FromEntrySignal { get; set; } = String.Empty;\n    }\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrderDirection\n\n\nPossible values are: \norderDirection.Buy\n (Buy order for a long entry); \norderDirection.Sell\n (Sell order for closing a long position)\n\n\n\n\n\n\nOrderMode\n\n\nOne of three possible positions in the market: Direct, Dynamic, Synthetic\n\n\n\n\n\n\nOrderType\n\n\nPossible values: OrderType.Limit, OrderType.Market, OrderType.Stop, OrderType.StopLimit\n\n\n\n\n\n\nLiveUntilCancelled\n\n\nThe order will not be deleted at the end of the bar, but will remain active until removed with \nOrder.Cancel\n or until it reaches its expiry (see \nTimeInForce\n).\n\n\n\n\n\n\nQuantity\n\n\nAmount\n\n\n\n\n\n\nPrice\n\n\nLimit value. Inputting a 0 makes this parameter irrelevant\n\n\n\n\n\n\nStopPrice\n\n\nStop value. Inputting a 0 makes this parameter irrelevant\n\n\n\n\n\n\nSignalName\n\n\nAn unambiguous signal name (string)\n\n\n\n\n\n\nInstrument\n\n\nThe trading instrument in which the position exists.\n\n\n\n\n\n\nTimeFrame\n\n\nThe TimeFrame, which is valid for the order.\n\n\n\n\n\n\nFromEntrySignal\n\n\nThe name of the attached entry signal\n\n\n\n\n\n\n\n\nSubmitOrder()\n\n\nDescription\n\n\nSubmit order creates a user-defined order. For this order, no stop or limit order is placed in the market. All AgenaTrader control mechanisms are switched off for this order type. The user is responsible for managing the various stop and target orders, including partial executions.\n\n\nSee \nOnOrderChanged()\n, \nOnOrderExecution()\n.\n\n\nUsage\n\n\nSee \nStrategyOrderParameters()\n\n\nParameter\n\n\nSee \nStrategyOrderParameters()\n\n\nReturn Value\n\n\nan order object of the type \"IOrder\"\n\n\nExample\n\n\n// Limit Long order\nSubmit Limit Buy\nvar order = SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Mode = orderMode,\n                    Price = limitPrice,\n                    Quantity = quantity,\n                    SignalName = entryName,\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n\n// Short Market order\nSubmit Sell Market\nvar order = SubmitOrder(new StrategyOrderParameters\n            {\n                Direction = OrderDirection.Sell,\n                Type = OrderType.Market,\n                Mode = ordermode,\n                Quantity = quantity,\n                SignalName = entryName,\n                Instrument = Instrument,\n                TimeFrame = TimeFrame\n            });\n\n\n\n\nTimeInForce\n\n\nDescription\n\n\nThe time in force property determines how long an order is valid for. The validity period is dependent upon which values are accepted by a broker.\n\n\nTimeInForce is specified with the \nOnInit()\n method.\n\n\nPermitted values are:\nTimeInForce.day\nTimeInForce.loc\nTimeInForce.gtc (GTC = good till canceled)\nTimeInForce.gtd\n\n\nDefault:\n TimeInForce.GTC\n\n\nUsage\n\n\nTimeInForce\n\n\nExample\n\n\nprotected override void OnInit()\n{\nTimeInForce = TimeInForce.Day;\n}\n\n\n\n\nTrade\n\n\nDescription\n\n\nTrade is an object containing information about trades that have been executed by a strategy or are currently running.\n\n\nThe individual properties are:\n\n\n\n\n\n\nTrade.AvgPrice\n\n    Average entry price\n\n\n\n\n\n\nTrade.ClosedProfitLoss\n\n    Profit or loss already realized\n\n\n\n\n\n\nTrade.Commission\n\n    Commissions\n\n\n\n\n\n\nTrade.CreatedDateTime\n\n    Time at which the trade was created\n\n\n\n\n\n\nTrade.EntryReason\n\n    Description of the entry signal\n    For strategies: signal entry name\n\n\n\n\n\n\nTrade.ExitDateTime\n\n    Time at which the trade was closed\n\n\n\n\n\n\nTrade.ExitPrice\n\n    Exit price\n\n\n\n\n\n\nTrade.ExitReason\n\n    Description of the exit signal\n    For strategies: name of the strategy\n\n\n\n\n\n\nTrade.Instrument\n\n    Description of the trading instrument\n\n\n\n\n\n\nTrade.PositionType\n\n    Positioning within the market\n\n\n\n\nPositionType.Flat\n\n\nPositionType.Long\n\n\nPositionType.Short\n\n\n\n\n\n\n\n\nTrade.OpenProfitLoss\n\n    Unrealized profit/loss of a running position\n\n\n\n\n\n\nTrade.ProfitCurrency\n\n    Profit or loss in the currency that the account is held in\n\n\n\n\n\n\nTrade.ProfitLoss\n\n    Profit or loss\n\n\n\n\n\n\nTrade.ProfitPercent\n\n    Profit or loss in percent\n\n\n\n\n\n\nTrade.ProfitPercentWithCommission\n\n    Profit or loss in percent with commissions\n\n\n\n\n\n\nTrade.ProfitPoints\n\n    Profit or loss in points/pips\n\n\n\n\n\n\nTrade.Quantity\n\n    Quantity of stocks/contracts/ETFs/etc.\n\n\n\n\n\n\nTrade.TimeFrame\n\n    Timeframe in which the trade was opened\n\n\n\n\n\n\nTrade.Url\n\n    URL for the snapshot of the chart at the moment of creation\n\n\n\n\n\n\nExample\n\n\nprotected override void OnDispose()\n{\n  if (Performance.AllTrades.Count < 1) return;\n  foreach (ITrade trade in Performance.AllTrades)\n  {\n    Print(\"Trade #\"+trade.Id);\n    Print(\"--------------------------------------------\");\n    Print(\"Average price \" + trade.AvgPrice);\n    Print(\"Realized P/L \" + trade.ClosedProfitLoss);\n    Print(\"Commissions \" + trade.Commission);\n    Print(\"Time of entry \" + trade.CreatedDateTime);\n    Print(\"Entry reason \" + trade.EntryReason);\n    Print(\"Time of exit \" + trade.ExitDateTime);\n    Print(\"Exit price \" + trade.ExitPrice);\n    Print(\"Exit reason \" + trade.ExitReason);\n    Print(\"Instrument \" + trade.Instrument);\n    Print(\"Positioning \" + trade.PositionType);\n    Print(\"Unrealized P/L \" + trade.OpenProfitLoss);\n    Print(\"P/L (currency) \" + trade.ProfitCurrency);\n    Print(\"P/L \" + trade.ProfitLoss);\n    Print(\"P/L (in percent) \" + trade.ProfitPercent);\n    Print(\"P/L (% with commission)\" + trade.ProfitPercentWithCommission);\n    Print(\"PL (in points) \" + trade.ProfitPoints);\n    Print(\"Quantity \" + trade.Quantity);\n    Print(\"Timeframe \" + trade.TimeFrame);\n    Print(\"URL for the snapshot \" + trade.Url);\n  }\n}\n\n\n\n\nUnmanaged\n\n\nBacktesting and Optimization\n\n\nPerformance Characteristics\n\n\nPerformance characteristics are the various factors that can be calculated for a list of trades. The trades can be generated by a strategy in real-time or based on a backtest.\n\n\nThe following are available:\n\n\n\n\nall trades\n\n\nall long trades\n\n\nall short trades\n\n\nall winning trades\n\n\nall losing trades\n\n\n\n\nSee \nPerformance\n.\n\n\nThe individual factors are:\n\n\nAvgEtd\n\nThe average drawdown at the end of a trade\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgEtd\n\n\nPrint(\"Average ETD of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgEtd);\n\n\n\n\nAvgMae\n\nAverage maximum adverse excursion\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgMae\n\n\nPrint(\"Average MAE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMae);\n\n\n\n\nAvgMfe\n\nAverage maximum favorable excursion\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgMfe\n\n\nPrint(\"Average MFE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMfe);\n\n\n\n\nAvgProfit\n\nAverage profit for all trades\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgProfit\n\n\nPrint(\"Average profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgProfit);\n\n\n\n\nCumProfit\n\nThe cumulative winnings over all trades\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.CumProfit\n\n\nPrint(\"Average cumulative profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.CumProfit);\n\n\n\n\nDrawDown\n\nThe drawdown for all trades\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.DrawDow\n\n\nPrint(\"Drawdown of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.DrawDown);\n\n\n\n\nLargestLoser\n\nThe largest losing trade\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.LargestLoser\n\n\nPrint(\"Largest loss of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestLoser);\n\n\n\n\nLargestWinner\n\nThe largest winning trade\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.LargestWinner\n\n\nPrint(\"Largest win of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestWinner);\n\n\n\n\nProfitPerMonth\n\nThe total performance (wins/losses) for the month (also in percent)\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.ProfitPerMonth\n\n\nPrint(\"Profit per month of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.ProfitPerMonth);\n\n\n\n\nStdDev\n\n    The standard deviation for the wins/losses. With this, you are able to identify outliers. The smaller the standard deviation, the higher the expectation of winnings.\n\n\nAll factors are double values.",
            "title": "Strategy programming"
        },
        {
            "location": "/strategy_programming/#strategy-programming",
            "text": "",
            "title": "Strategy Programming"
        },
        {
            "location": "/strategy_programming/#account",
            "text": "",
            "title": "Account"
        },
        {
            "location": "/strategy_programming/#description",
            "text": "Account is an object containing information about the account with which the current strategy is working.  The individual properties are:    Account.AccountConnection \n    Name for the broker connection used (the name assigned under the account connection submenu)    Account.AccountType \n    Type of account (live account, simulated account etc.)    Account.Broker \n    Name/definition for the broker    Account.BuyingPower \n    The current account equity in consideration of the leverage provided by the broker (IB leverages your account equity by a factor of 4, meaning that with 10000\u20ac your buying power is equal to 40000\u20ac)    Account.CashValue \n    Amount (double)    Account.Currency \n    Currency in which the account is held    Account.ExcessEquity \n    Excess    Account.InitialMargin \n    Initial margin (depends on the broker, double)    Account.InstrumentType \n    Type of trading instrument (type AgenaTrader.Plugins.InstrumentTypes)    Account.IsDemo \n    True, if the account is a demo account    Account.Name \n    Name of the account (should be identical to Account.AccountConnection)    Account.OverNightMargin \n    Overnight margin (depends on the broker, double)    Account.RealizedProfitLoss \n    Realized profits and losses (double)",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#example",
            "text": "Print(\"AccountConnection \" + Account.AccountConnection);\nPrint(\"AccountType \" + Account.AccountType);\nPrint(\"Broker \" + Account.Broker);\nPrint(\"BuyingPower \" + Account.BuyingPower);\nPrint(\"CashValue \" + Account.CashValue);\nPrint(\"Currency \" + Account.Currency);\nPrint(\"ExcessEquity \" + Account.ExcessEquity);\nPrint(\"InitialMargin \" + Account.InitialMargin);\nPrint(\"InstrumentTypes \" + Account.InstrumentTypes);\nPrint(\"IsDemo \" + Account.IsDemo);\nPrint(\"Name \" + Account.Name);\nPrint(\"OverNightMargin \" + Account.OverNightMargin);\nPrint(\"RealizedProfitLoss \" + Account.RealizedProfitLoss);",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#barscountfromtradeclose",
            "text": "",
            "title": "BarsCountFromTradeClose()"
        },
        {
            "location": "/strategy_programming/#description_1",
            "text": "The property \"BarsCountFromTradeClose\" outputs the number of bars that have occurred since the last exit from the market.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage",
            "text": "BarsCountFromTradeClose()\nBarsCountFromTradeClose(string strategyName)  For multi-bar strategies  BarsCountFromTradeClose(int multibarSeriesIndex, string strategyName, int exitsAgo)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter",
            "text": "strategyName  The Strategy name (string) that has been used to clearly label the exit within the exit method.    multibarSeriesIndex  For * Multibar* MultiBars  strategies. Index of the data series for which the exit order has been executed. See  ProcessingBarSeriesIndex .    exitsAgo  Number of exits that have occurred in the past. A zero indicates the number of bars that have formed after the last exit.",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_1",
            "text": "Print(\"The last exit was \" + BarsCountFromTradeClose() + \" bars ago.\");",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#barscountfromtradeopen",
            "text": "",
            "title": "BarsCountFromTradeOpen()"
        },
        {
            "location": "/strategy_programming/#description_2",
            "text": "The property \"BarsCountFromTradeOpen\" returns the number of bars that have occurred since the last entry into the market.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_1",
            "text": "BarsCountFromTradeOpen()\nBarsCountFromTradeOpen(string strategyName)  For multi-bar strategies  BarsCountFromTradeOpen(int multibarSeriesIndex, string strategyName, int entriesAgo)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_1",
            "text": "strategyName  The strategy name (string) that has been used to clearly label the entry within an entry method.    multibarSeriesIndex  For * Multibar* ,  MultiBars  strategies. Index for the data series for which the entry order was executed. See  ProcessingBarSeriesIndex ,  ProcessingBarSeriesIndex .    entriesAgo  Number of entries in the past. A zero indicates the number of bars that have formed after the last entry.",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_2",
            "text": "Print(\"The last entry was \" + BarsCountFromTradeOpen() + \" bars ago.\");",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#cancelallorders",
            "text": "",
            "title": "CancelAllOrders()"
        },
        {
            "location": "/strategy_programming/#description_3",
            "text": "CancelAllOrders deletes all oders (cancel) managed by the strategy.\nA cancel request is sent to the broker. Whether an or there is really deleted, can not be guaranteed. It may happen that an order has received a partial execution before it is deleted.\nTherefore we recommend that you check the status of the order with  OnOrderChanged() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_2",
            "text": "CancelAllOrders()",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_2",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_3",
            "text": "protected override void OnCalculate()\n{\n   if (BarsCountFromTradeOpen() >= 30)\n       CancelAllOrders();\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#ordercancel",
            "text": "",
            "title": "Order.Cancel()"
        },
        {
            "location": "/strategy_programming/#description_4",
            "text": "Cancel order deletes an order.  A cancel request is sent to the broker. There is no guarantee that the order will actually be deleted there. It may occur that the order receives a partial execution before it is deleted. Therefore we recommend that you check the status of the order with  OnOrderChanged() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_3",
            "text": "Order.Cancel(IOrder order)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_3",
            "text": "An order object of the type \"IOrder\"",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_4",
            "text": "private IOrder entryOrder = null;\nprivate int barNumber = 0;\nprotected override void OnCalculate()\n{\n    // Place an entry stop at the high of the current bar\n    if (entryOrder == null)\n    {\n        entryOrder = OpenLongStop(High[0], \"stop long\");\n        barNumber = ProcessingBarIndex;\n    }\n    // Delete the order after 3 bars\n    if (Position.PositionType == PositionType.Flat &&\n    ProcessingBarIndex > barNumber + 3)\n        Order.Cancel(entryOrder);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#createifdonegroup",
            "text": "",
            "title": "CreateIfDoneGroup()"
        },
        {
            "location": "/strategy_programming/#description_5",
            "text": "If two orders are linked to one another via a CreateIfDoneGroup, it means that if the one order has been executed, the second linked order is activated.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_4",
            "text": "CreateIfDoneGroup(IEnumerable<IOrder> orders)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_4",
            "text": "An order object of type IOrder as a list",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_5",
            "text": "private IOrder oopenlong = null;\nprivate IOrder osubmitbuy = null;\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\nprotected override void OnCalculate()\n{\n\n oopenlong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"strategyName\",\n                });\n\nosubmitbuy =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Sell,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * 1.1,\n                    SignalName = \"strategyName\",\n                });\n\n   CreateIfDoneGroup(new List<IOrder> { oopenlong, osubmitbuy });\n\n   oopenlong.ConfirmOrder();\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#createocogroup",
            "text": "",
            "title": "CreateOCOGroup()"
        },
        {
            "location": "/strategy_programming/#description_6",
            "text": "If two orders are linked via a CreateOCOGroup, it means that once the one order has been executed, the second linked order is deleted.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_5",
            "text": "CreateOCOGroup(IEnumerable<IOrder> orders)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_5",
            "text": "An order object of type IOrder as a list",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_6",
            "text": "private IOrder oopenlong = null;\nprivate IOrder oEnterShort = null;\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\nprotected override void OnCalculate()\n{\n\noopenlong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * 1.1,\n                    SignalName = \"strategyName\",\n                });\n\n\noEnterShort =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Sell,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * -1.1,\n                    SignalName = \"strategyName\",\n                });\n\n\n\n   CreateOCOGroup(new List<IOrder> { oopenlong, oEnterShort });\n\n   oopenlong.ConfirmOrder();\n   oEnterShort.ConfirmOrder();\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#createorogroup",
            "text": "",
            "title": "CreateOROGroup()"
        },
        {
            "location": "/strategy_programming/#description_7",
            "text": "If two orders are linked via a CreateOROGroup, it means that once the one order has been executed, the order size of the second order is reduced by the order volume of the first order.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_6",
            "text": "CreateOROGroup(IEnumerable<IOrder> orders)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_6",
            "text": "An order object of type IOrder as a list",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_7",
            "text": "private IOrder oStopLong = null;\nprivate IOrder oLimitLong = null;\n\n\nprotected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}\n\n\nprotected override void OnCalculate()\n{\n\n   oStopLong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Stop,\n                    Quantity = DefaultOrderQuantity,\n            StopPrice = Close[0] * -1.1,\n                    SignalName = \"strategyName\",\n                });\n\n\n\n\n   oLimitLong =  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Quantity = DefaultOrderQuantity*0.5,\n            Price = Close[0] * 1.1,\n                    SignalName = \"strategyName\",\n                });\n\n   CreateOROGroup(new List<IOrder> { oLimitLong, oStopLong });\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#dataseriesconfigurable",
            "text": "",
            "title": "DataSeriesConfigurable"
        },
        {
            "location": "/strategy_programming/#defaultorderquantity",
            "text": "",
            "title": "DefaultOrderQuantity"
        },
        {
            "location": "/strategy_programming/#description_8",
            "text": "Change order changes an order.  Default quantity defines the amount to be used in a strategy. Default quantity is set within the  OnInit()  method.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_7",
            "text": "ReplaceOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_7",
            "text": "An int value containing the amount (stocks, contracts etc.)",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_8",
            "text": "protected override void OnInit()\n{\nDefaultOrderQuantity = 100;\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#entriesperdirection",
            "text": "",
            "title": "EntriesPerDirection"
        },
        {
            "location": "/strategy_programming/#description_9",
            "text": "Entries per direction defines the maximum number of entries permitted in one direction (long or short).  Whether the name of the entry signal is taken into consideration or not is defined.  Entries per direction is defined with the  OnInit()  method.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_8",
            "text": "EntriesPerDirection",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_8",
            "text": "An int value for the maximum entries permitted in one direction.",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_9",
            "text": "// Example 1\n// If one of the two entry conditions is true and a long position is opened, then the other entry signal will be ignored\nprotected override void OnInit()\n{\nEntriesPerDirection = 1;\n\n}\n\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n        SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"SMA cross entry\",\n                });\n}\n\n// Example 2\n\n\nprotected override void OnCalculate()\n{\n    if (CrossAbove(EMA(14), SMA(50), 1) && IsSerieRising(ADX(20)))\n    {\n        SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"EMACrossesSMA\",\n                });\n    }\n    else if (CrossAbove (MACD(2,2,5), 0, 1))\n    {\n        SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Market,\n                    Quantity = DefaultOrderQuantity,\n                    SignalName = \"MACDCross\",\n                });\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#excludetradehistoryinbacktest",
            "text": "",
            "title": "ExcludeTradeHistoryInBacktest"
        },
        {
            "location": "/strategy_programming/#closelongtrade",
            "text": "",
            "title": "CloseLongTrade ()"
        },
        {
            "location": "/strategy_programming/#description_10",
            "text": "CloseLongTrade creates a sell order for closing a long position (sell).  See:  *SubmitOrder() ,  *CloseShortTrade()",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_9",
            "text": "See  StrategyOrderParameters",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_9",
            "text": "See  StrategyOrderParameters",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value",
            "text": "An order object of the type \"IOrder\"",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_10",
            "text": "var order = CloseLongTrade(new StrategyOrderParameters\n{\n    Type = OrderType.Market\n});",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#exitonclose",
            "text": "",
            "title": "ExitOnClose"
        },
        {
            "location": "/strategy_programming/#exitoncloseseconds",
            "text": "",
            "title": "ExitOnCloseSeconds"
        },
        {
            "location": "/strategy_programming/#closeshorttrade",
            "text": "",
            "title": "CloseShortTrade()"
        },
        {
            "location": "/strategy_programming/#description_11",
            "text": "CloseShortTradecreates a buy-to-cover order for closing a short position (buy).  See:  SubmitOrder() ,  CloselongTrade()",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_10",
            "text": "See  StrategyOrderParameters",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_10",
            "text": "See  StrategyOrderParameters",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_1",
            "text": "An order object of the type \"IOrder\"",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_11",
            "text": "var order = CloseShortTrade(new StrategyOrderParameters\n{\n    Type = OrderType.Stop,\n    Quantity = quantity,\n    StopPrice = price\n});",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#accountgetvalue",
            "text": "",
            "title": "Account.GetValue()"
        },
        {
            "location": "/strategy_programming/#description_12",
            "text": "Get account value outputs information regarding the account for which the current strategy is being carried out.  See  GetProfitLoss() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_11",
            "text": "Account.GetValue(AccountItem accountItem)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_11",
            "text": "Possible values for account item are:  AccountItem.BuyingPower  AccountItem.CashValue  AccountItem.RealizedProfitLoss",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_2",
            "text": "A double value for the account item for historical bars, a zero (0) is returned",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_12",
            "text": "Print(\"The current account cash value is \" + Account.GetValue(AccountItem.CashValue));\nPrint(\"The current account cash value with the leverage provided by the broker is \" + Account.GetValue(AccountItem.BuyingPower));\nPrint(\"The current P/L already realized is \" + Account.GetValue(AccountItem.RealizedProfitLoss));",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#getentries",
            "text": "",
            "title": "GetEntries()"
        },
        {
            "location": "/strategy_programming/#description_13",
            "text": "This DataSeries is used in conditions and indicates multiple entry prices for entry orders",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_12",
            "text": "Overload in scripted condition for short and long signal indication",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_12",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_3",
            "text": "int",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_13",
            "text": "public class MyTestEntry : UserScriptedCondition\n    {\n\n        double _percentage = 100;\n\n        protected override void Initialize()\n        {\n            IsEntry = true;\n            IsStop = false;\n            IsTarget= false;\n            Add(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"Occurred\"));\n            Add(new OutputDescriptor(Color.FromArgb(255, 118, 222, 90), \"Entry1\"));\n            Add(new OutputDescriptor(Color.FromArgb(255, 118, 222, 90), \"Entry2\"));\n            Add(new OutputDescriptor(Color.FromArgb(255, 118, 222, 90), \"Entry3\"));\n            Overlay = true;\n            CalculateOnBarClose = true;\n        }\n\n        protected override void OnBarUpdate()\n        {\n\n            Calculate();\n\n        }\n\n        public override void Recalculate()\n        {\n            Calculate();\n        }\n\n        private void Calculate ()\n        {\n\n            if (TradeDirection == PositionType.Long)\n            {\n                Entry1.Set(Close[0] + 0.5);\n                Entry2.Set(Close[0] + 1);\n                Entry3.Set(Close[0] + 1.5);\n            }\n            else\n            {\n                Entry1.Set(Close[0] - 0.5);\n                Entry2.Set(Close[0] - 1);\n                Entry3.Set(Close[0] - 1.5);\n            }\n        }\n\n        #region Properties\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Occurred\n        {\n            get { return Values[0]; }\n        }\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Entry1\n        {\n            get { return Values[1]; }\n        }\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Entry2\n        {\n            get { return Values[2]; }\n        }\n\n        [Browsable(false)]\n        [XmlIgnore()]\n        public DataSeries Entry3\n        {\n            get { return Values[3]; }\n        }\n\n        public override IList<DataSeries> GetEntrys()\n        {\n            return new[] { Entry1, Entry2, Entry3 };",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#getprofitloss",
            "text": "",
            "title": "GetProfitLoss()"
        },
        {
            "location": "/strategy_programming/#description_14",
            "text": "Get profit loss outputs the currently unrealized profit or loss for a running position.  See  Account.GetValue() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_13",
            "text": "GetProfitLoss(int pLType);",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_13",
            "text": "Potential values for the P/L type are:  0 \u2013 Amount: P/L as a currency amount  1 \u2013 Percent: P/L in percent  2 \u2013 Risk: P/L in Van Tharp R-multiples  www.vantharp.com  3 \u2013 P/L in ticks",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_4",
            "text": "A double value for the unrealized profit or loss",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_14",
            "text": "Print(\"The current risk for the strategy \" + this.Name + \" is \" + GetProfitLoss(1) + \" \" + Instrument.Currency);\nPrint(\"This equals \"+ string.Format( \"{0:F1} R.\", GetProfitLoss(3)));",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#getprofitlossamount",
            "text": "",
            "title": "GetProfitLossAmount()"
        },
        {
            "location": "/strategy_programming/#description_15",
            "text": "GetProfitLossAmount () provides the current unrealized gain or loss of a current position as the currency amount.  See  Account.GetValue() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_14",
            "text": "GetProfitLossAmount(double profitLoss);",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_14",
            "text": "Double",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_5",
            "text": "A double value for the unrealized profit or loss",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_15",
            "text": "Print(\"the current P&L \" + this.Name + \" is \" + GetProfitLossAmount(Position.OpenProfitLoss) + \" \" + Instrument.Currency);",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#getprofitlossrisk",
            "text": "",
            "title": "GetProfitLossRisk()"
        },
        {
            "location": "/strategy_programming/#description_16",
            "text": "GetProfitLossRisk () returns the current unrealized gain or loss of a current position in R-multiples.  See  Account.GetValue() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_15",
            "text": "GetProfitLossRisk();",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_15",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_6",
            "text": "A double value for the R-Multiple",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_16",
            "text": "Print(\"the current P&L \" + this.Name + \" is \" + string.Format( \"{0:F1} R.\", GetProfitLossRisk()));",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#getscriptedcondition",
            "text": "",
            "title": "GetScriptedCondition()"
        },
        {
            "location": "/strategy_programming/#description_17",
            "text": "This method allows user to communicate between scripts.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#isautoconfirmorder",
            "text": "",
            "title": "IsAutoConfirmOrder"
        },
        {
            "location": "/strategy_programming/#description_18",
            "text": "IsAutoConfirmOrder determines whether orders are activated automatically. IsAutoConfirmOrder is specified in the  OnInit()  method.  If IsAutoConfirmOrder = true, then orders are automatically activated (default). If IsAutoConfirmOrder is assigned the value false, the corresponding order must be activated with order. ConfirmOrder() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#parameter_16",
            "text": "Bool value",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_17",
            "text": "protected override void OnInit()\n{\n   IsAutoConfirmOrder = false;\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#order",
            "text": "",
            "title": "Order"
        },
        {
            "location": "/strategy_programming/#description_19",
            "text": "IOrder is an object that contains information about an order that is currently managed by a strategy.  The individual properties are:    Action\n     One of four possible positions in the market:   OrderDirection.Buy  OrderDirection.Sell     AveragePrice \n     The average purchase or selling price of a position.For positions without partial executions, this corresponds to the entry price.    FilledQuantity \n    For partial versions    LimitPrice    Name \n \u00a0 \u00a0The unique SignalName  (maybe mistake SignalName)    OrderId \n    The unique OrderId    OrderMode \n    One of three possible positions in the market:   OrderMode.Direct  OrderMode.Dynamic  OrderMode.Synthetic     OrderState \n    The current status of the order can be queried (see  OnOrderExecution  and  OnOrderChanged )   OrderState.Accepted  OrderState.Cancelled  OrderState.CancelRejected  OrderState.FilledQuantity  OrderState.PartFilled  OrderState.PendingCancel  OrderState.PendingReplace  OrderState.PendingSubmit  OrderState.Rejected  OrderState.ReplaceRejected  OrderState.Unknown  OrderState.Working     OrderType \n    Possible order types:   OrderType.Limit  OrderType.Market  OrderType.Stop  OrderType.StopLimit     Quantity \n    The quantity to be ordered    StopPrice    Timestamp \n    Time stamp    TimeFrame \n    The TimeFrame, which is valid for the order.    TimeFrame    Possible Methods:    order Order.Cancel() \n    Delete the Order    order.ConfirmOrder() \n    Confirm the order. This method have to be executed if IsAutoConfirmOrder is set to false and you want to run the order automatically. This is, for example, the case when an OCO or IfDone fabrication is to be produced.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#performance",
            "text": "",
            "title": "Performance"
        },
        {
            "location": "/strategy_programming/#description_20",
            "text": "Performance is an object containing information regarding all trades that have been generated by a strategy.  The trades are sorted into multiple lists. With the help of these lists it is easier to create a performance evaluation.  See Performance Characteristics.  The individual lists are:    Performance.AllTrades \n    A  Trade  collection object containing all trades generated by a strategy.    Performance.LongTrades \n    A  Trade  collection object containing all long trades generated by a strategy.    Performance.ShortTrades \n    A  Trade  collection object containing all short trades generated by a strategy.    Performance.WinningTrades \n    A  Trade  collection object containing all profitable trades generated by a strategy.    Performance.LosingTrades \n    A  Trade  collection object containing all loss trades generated by a strategy.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#example_18",
            "text": "// When exiting a strategy, create a performance evaluation\nprotected override void OnDispose()\n{\nPrint(\"Performance evaluation of the strategy : \" + this.Name);\nPrint(\"----------------------------------------------------\");\nPrint(\"Amount of all trades: \" + Performance.AllTrades.Count);\nPrint(\"Amount of winning trades: \" + Performance.WinningTrades.Count);\nPrint(\"Amount of all loss trades: \" + Performance.LosingTrades.Count);\nPrint(\"Amount of all long trades: \" + Performance.LongTrades.Count);\nPrint(\"Amount of short trades: \" + Performance.ShortTrades.Count);\nPrint(\"Result: \" + Account.RealizedProfitLoss + \" \" + Account.Currency);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#position",
            "text": "",
            "title": "Position"
        },
        {
            "location": "/strategy_programming/#description_21",
            "text": "Position is an object containing information regarding the position currently being managed by a strategy.  The individual properties are:    Position.AvgPrice \n    The average buy or sell price of a position.\n    For positions without partial executions, this is equal to the entry price.    Position.CreatedDateTime \n    Date and time at which the position was opened.    Position.Instrument \n    The trading instrument in which the position exists.\n    See  Instruments .    Position.PositionType \n    One of three possible positions in the market:   PositionType.Flat  PositionType.Long  PositionType.Short     Position.OpenProfitLoss \n    The currently not yet realized profit or loss.\n    See  GetProfitLoss() .    Position.ProfitCurrency \n    Profit (or loss) displayed as a currency amount.    Position.ProfitPercent \n    Profit (or loss) displayed in percent.    Position.ProfitPoints \n    Profit (or loss) displayed in points or pips.    Position.Quantity \n    Amount of stocks, contracts, CFDs etc. within a position.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#example_19",
            "text": "if (Position.PositionType != PositionType.Flat)\n{\nPrint(\"Average price \" + Position.AvgPrice);\nPrint(\"Opening time \" + Position.CreatedDateTime);\nPrint(\"Instrument \" + Position.Instrument);\nPrint(\"Current positioning \" + Position.PositionType);\nPrint(\"Unrealized P/L \" + Position.OpenProfitLoss);\nPrint(\"P/L (currency) \" + Position.ProfitCurrency);\nPrint(\"P/L (in percent) \" + Position.ProfitPercent);\nPrint(\"P/L (in points) \" + Position.ProfitPoints);\nPrint(\"Pieces \" + Position.Quantity);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#positiontype",
            "text": "See  Position.PositionType .",
            "title": "PositionType"
        },
        {
            "location": "/strategy_programming/#traceorders",
            "text": "",
            "title": "TraceOrders"
        },
        {
            "location": "/strategy_programming/#description_22",
            "text": "The trace orders property is especially useful for keeping track of orders generated by strategies. It also provides an overview of which orders were generated by which strategies.\nTrace orders can be specified with the  OnInit()  method.  When TraceOrders is activated, each order will display the following values in the output window:   Instrument  Time frame  Action  Type  Limit price  Stop price  Quantity  Name   This information is useful when creating and debugging strategies.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_16",
            "text": "TraceOrders",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_17",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_7",
            "text": "true  Tracing is currently switched on false  Tracing is switched off",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_20",
            "text": "protected override void OnInit()\n{\nClearTraceWindow();\nTraceOrders = true;\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#quantity",
            "text": "See  Position.Quantity ,  Position.PositionType .",
            "title": "Quantity"
        },
        {
            "location": "/strategy_programming/#replaceorder",
            "text": "",
            "title": "ReplaceOrder()"
        },
        {
            "location": "/strategy_programming/#description_23",
            "text": "Change order, as the name suggests, changes an order.",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_17",
            "text": "ReplaceOrder(IOrder iOrder, int quantity, double limitPrice, double stopPrice)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_18",
            "text": "iOrder  An order object of the type \"IOrder\"    quantity  Number of units to be ordered    limitPrice  Limit price. Set this to 0 if not needed    stopPrice  Stop price. Set this to 0 if not needed",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_21",
            "text": "private IOrder stopOrder = null;\nprotected override void OnCalculate()\n{\n// If the position is profiting by 10 ticks then set the stop to break-even\nif (stopOrder != null\n    && Close[0] >= Position.AvgPrice + (10 * TickSize)\n        && stopOrder.StopPrice < Position.AvgPrice)\nReplaceOrder(stopOrder, stopOrder.Quantity, stopOrder.LimitPrice, Position.AvgPrice);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#setupprofittarget",
            "text": "",
            "title": "SetUpProfitTarget()"
        },
        {
            "location": "/strategy_programming/#description_24",
            "text": "Set profit target immediately creates a \"take profit\" order after an entry order is generated. The order is sent directly to the broker and becomes active immediately.\nIf the profit target is static, you can also define SetUpProfitTarget() with the OnInit() method.  See  SetUpStopLoss() ,  SetUpTrailStop() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_18",
            "text": "SetUpProfitTarget(double currency)\nSetUpProfitTarget(CalculationMode mode, double value)\nSetUpProfitTarget(string fromEntry signal, CalculationMode mode, double value)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_19",
            "text": "currency  Sets the profit target in a currency, for example 500\u20ac.    mode  Potential values can be: CalculationMode.Percent (display in percent); CalculationMode.Price (display as price value); CalculationMode.Ticks (display in ticks or pips)    value  The distance between entry price and profit target. This is dependent upon the \u201emode\" but generally refers to a monetary value, a percentage or a value in ticks.    fromEntry signal  The name of the entry signal for which the profit target is to be generated. The amount is taken from the entry order referenced.",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_22",
            "text": "protected override void OnInit()\n{\n// Creates a Target Order 20 ticks above the market\nSetUpProfitTarget(CalculationMode.Ticks, 20);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#setupstoploss",
            "text": "",
            "title": "SetUpStopLoss()"
        },
        {
            "location": "/strategy_programming/#description_25",
            "text": "Set stop loss creates a stop loss order after an entry order is placed. The order is sent directly to the broker and becomes effective immediately.  If the stop loss is static, then SetUpStopLoss() can be defined with the OnInit() method.  See  SetUpProfitTarget() ,  SetUpTrailStop() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_19",
            "text": "SetUpStopLoss(double currency)\nSetUpStopLoss(double currency, bool simulated)\nSetUpStopLoss(CalculationMode mode, double value)\nSetUpStopLoss(string fromEntry signal, CalculationMode mode, double value, bool simulated)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_20",
            "text": "currency  The difference between the stop loss and the entry price (=risk) in a currency, such as 500\u20ac    mode  Potential values can be: CalculationMode.Percent (display in percent); CalculationMode.Price (display as price value); CalculationMode.Ticks (display in ticks or pips)    simulated  When set to \"true,\" the stop order does not go live (as a market order) until the price has \u201etouched\" it for the first time (meaning that it is executed just as it would be under real market conditions).    value  The distance between stop price and profit target. This is dependent upon the \u201emode\" but generally refers to a monetary value, a percentage or a value in ticks.    fromEntry signal  The name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_23",
            "text": "protected override void OnInit()\n{\n// Sets profitTarget 15 Ticks above the market\nSetUpStopLoss(\"MACDEntry\", CalculationMode.Ticks, 15, true);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#setuptrailstop",
            "text": "",
            "title": "SetUpTrailStop()"
        },
        {
            "location": "/strategy_programming/#description_26",
            "text": "Set trail stop creates a trail stop order after an entry order is generated. Its purpose is to protect you from losses, and after reaching break-even, to protect your gains.  The order is sent directly to the broker and becomes effective immediately.  If the stop loss price and the offset value are static, you can define SetUpTrailStop() with the OnInit() method.  If you use SetUpTrailStop() within the  OnCalculate()  method, you must make sure that the parameters are readjusted to the initial value, otherwise the most recently used settings will be used for the new position.  Functionality:  Assuming that you have SetUpTrailStop(CalculationMode.Ticks, 30) selected:  In a long position, the stop will be 30 ticks from the previously reached high. If the market makes a new high, the stop will be adjusted. However, the stop will no longer be moved downwards.  In a short position, this behavior starts with the most recent low.  Tips:  It is not possible to use SetUpStopLoss and SetUpTrailStop for the same position at the same time within one strategy. The SetUpStopLoss() method will always have precedence over the other methods.  However, it is possible to use both variants parallel to each other in the same strategy if they are referencing different entry signals.  Partial executions of a single order will cause a separate trading stop for each partial position.  If a SetUpProfitTarget() is used in addition to a SetUpTrailStop(), then both orders will be automatically linked to form an OCO order.  It is always a stop market order that is generated, and not a stop limit order.  If a position is closed by a different exit order within the strategy, then the TrailingStopOrder is automatically deleted.  See  SetUpStopLoss() ,  SetUpProfitTarget() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_20",
            "text": "SetUpTrailStop(double currency)\nSetUpTrailStop(double currency, bool simulated)\nSetUpTrailStop(CalculationMode mode, double value)\nSetUpTrailStop(string fromEntry signal, CalculationMode mode, double value, bool simulated)",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_21",
            "text": "currency  The distance between the stop loss and the entry price    mode  Possible values are:   CalculationMode.Percent; CalculationMode.Ticks    simulated  When set to \"true,\" the stop order does not go live (as a market order) until the price has \u201etouched\" it for the first time (meaning that it is executed just as it would be under real market conditions).    value  The distance between stop price and profit target. This is dependent upon the \u201emode\" but generally refers to a monetary value, a percentage or a value in ticks.    fromEntry signal  The name of the entry signal for which the stop order is to be generated. The amount is taken from the entry order referenced.",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#example_24",
            "text": "protected override void OnInit()\n{\n// Sets a trailing at the low of the last candle\n    SetUpTrailStop(CalculationMode.Price, Low[0]);\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#strategyorderparameters",
            "text": "",
            "title": "StrategyOrderParameters"
        },
        {
            "location": "/strategy_programming/#description_27",
            "text": "This class aggregates all properties needed to submit the order.  See  SubmitOrder() ,  CloseLongTrade() ,  CloseShortTrade() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_21",
            "text": "public class StrategyOrderParameters\n    {\n        public OrderDirection Direction { get; set; }\n        public OrderMode Mode { get; set; } = OrderMode.Direct;\n        public OrderType Type { get; set; }\n        public bool LiveUntilCancelled { get; set; }\n        public int Quantity { get; set; }\n        public double Price { get; set; }\n        public double StopPrice { get; set; }\n        public string SignalName { get; set; } = String.Empty;\n        public IInstrument Instrument { get; set; }\n        public ITimeFrame TimeFrame { get; set; }\n        public string FromEntrySignal { get; set; } = String.Empty;\n    }",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_22",
            "text": "OrderDirection  Possible values are:  orderDirection.Buy  (Buy order for a long entry);  orderDirection.Sell  (Sell order for closing a long position)    OrderMode  One of three possible positions in the market: Direct, Dynamic, Synthetic    OrderType  Possible values: OrderType.Limit, OrderType.Market, OrderType.Stop, OrderType.StopLimit    LiveUntilCancelled  The order will not be deleted at the end of the bar, but will remain active until removed with  Order.Cancel  or until it reaches its expiry (see  TimeInForce ).    Quantity  Amount    Price  Limit value. Inputting a 0 makes this parameter irrelevant    StopPrice  Stop value. Inputting a 0 makes this parameter irrelevant    SignalName  An unambiguous signal name (string)    Instrument  The trading instrument in which the position exists.    TimeFrame  The TimeFrame, which is valid for the order.    FromEntrySignal  The name of the attached entry signal",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#submitorder",
            "text": "",
            "title": "SubmitOrder()"
        },
        {
            "location": "/strategy_programming/#description_28",
            "text": "Submit order creates a user-defined order. For this order, no stop or limit order is placed in the market. All AgenaTrader control mechanisms are switched off for this order type. The user is responsible for managing the various stop and target orders, including partial executions.  See  OnOrderChanged() ,  OnOrderExecution() .",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_22",
            "text": "See  StrategyOrderParameters()",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#parameter_23",
            "text": "See  StrategyOrderParameters()",
            "title": "Parameter"
        },
        {
            "location": "/strategy_programming/#return-value_8",
            "text": "an order object of the type \"IOrder\"",
            "title": "Return Value"
        },
        {
            "location": "/strategy_programming/#example_25",
            "text": "// Limit Long order\nSubmit Limit Buy\nvar order = SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Mode = orderMode,\n                    Price = limitPrice,\n                    Quantity = quantity,\n                    SignalName = entryName,\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n\n// Short Market order\nSubmit Sell Market\nvar order = SubmitOrder(new StrategyOrderParameters\n            {\n                Direction = OrderDirection.Sell,\n                Type = OrderType.Market,\n                Mode = ordermode,\n                Quantity = quantity,\n                SignalName = entryName,\n                Instrument = Instrument,\n                TimeFrame = TimeFrame\n            });",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#timeinforce",
            "text": "",
            "title": "TimeInForce"
        },
        {
            "location": "/strategy_programming/#description_29",
            "text": "The time in force property determines how long an order is valid for. The validity period is dependent upon which values are accepted by a broker.  TimeInForce is specified with the  OnInit()  method.  Permitted values are:\nTimeInForce.day\nTimeInForce.loc\nTimeInForce.gtc (GTC = good till canceled)\nTimeInForce.gtd  Default:  TimeInForce.GTC",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#usage_23",
            "text": "TimeInForce",
            "title": "Usage"
        },
        {
            "location": "/strategy_programming/#example_26",
            "text": "protected override void OnInit()\n{\nTimeInForce = TimeInForce.Day;\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#trade",
            "text": "",
            "title": "Trade"
        },
        {
            "location": "/strategy_programming/#description_30",
            "text": "Trade is an object containing information about trades that have been executed by a strategy or are currently running.  The individual properties are:    Trade.AvgPrice \n    Average entry price    Trade.ClosedProfitLoss \n    Profit or loss already realized    Trade.Commission \n    Commissions    Trade.CreatedDateTime \n    Time at which the trade was created    Trade.EntryReason \n    Description of the entry signal\n    For strategies: signal entry name    Trade.ExitDateTime \n    Time at which the trade was closed    Trade.ExitPrice \n    Exit price    Trade.ExitReason \n    Description of the exit signal\n    For strategies: name of the strategy    Trade.Instrument \n    Description of the trading instrument    Trade.PositionType \n    Positioning within the market   PositionType.Flat  PositionType.Long  PositionType.Short     Trade.OpenProfitLoss \n    Unrealized profit/loss of a running position    Trade.ProfitCurrency \n    Profit or loss in the currency that the account is held in    Trade.ProfitLoss \n    Profit or loss    Trade.ProfitPercent \n    Profit or loss in percent    Trade.ProfitPercentWithCommission \n    Profit or loss in percent with commissions    Trade.ProfitPoints \n    Profit or loss in points/pips    Trade.Quantity \n    Quantity of stocks/contracts/ETFs/etc.    Trade.TimeFrame \n    Timeframe in which the trade was opened    Trade.Url \n    URL for the snapshot of the chart at the moment of creation",
            "title": "Description"
        },
        {
            "location": "/strategy_programming/#example_27",
            "text": "protected override void OnDispose()\n{\n  if (Performance.AllTrades.Count < 1) return;\n  foreach (ITrade trade in Performance.AllTrades)\n  {\n    Print(\"Trade #\"+trade.Id);\n    Print(\"--------------------------------------------\");\n    Print(\"Average price \" + trade.AvgPrice);\n    Print(\"Realized P/L \" + trade.ClosedProfitLoss);\n    Print(\"Commissions \" + trade.Commission);\n    Print(\"Time of entry \" + trade.CreatedDateTime);\n    Print(\"Entry reason \" + trade.EntryReason);\n    Print(\"Time of exit \" + trade.ExitDateTime);\n    Print(\"Exit price \" + trade.ExitPrice);\n    Print(\"Exit reason \" + trade.ExitReason);\n    Print(\"Instrument \" + trade.Instrument);\n    Print(\"Positioning \" + trade.PositionType);\n    Print(\"Unrealized P/L \" + trade.OpenProfitLoss);\n    Print(\"P/L (currency) \" + trade.ProfitCurrency);\n    Print(\"P/L \" + trade.ProfitLoss);\n    Print(\"P/L (in percent) \" + trade.ProfitPercent);\n    Print(\"P/L (% with commission)\" + trade.ProfitPercentWithCommission);\n    Print(\"PL (in points) \" + trade.ProfitPoints);\n    Print(\"Quantity \" + trade.Quantity);\n    Print(\"Timeframe \" + trade.TimeFrame);\n    Print(\"URL for the snapshot \" + trade.Url);\n  }\n}",
            "title": "Example"
        },
        {
            "location": "/strategy_programming/#unmanaged",
            "text": "",
            "title": "Unmanaged"
        },
        {
            "location": "/strategy_programming/#backtesting-and-optimization",
            "text": "",
            "title": "Backtesting and Optimization"
        },
        {
            "location": "/strategy_programming/#performance-characteristics",
            "text": "Performance characteristics are the various factors that can be calculated for a list of trades. The trades can be generated by a strategy in real-time or based on a backtest.  The following are available:   all trades  all long trades  all short trades  all winning trades  all losing trades   See  Performance .  The individual factors are:  AvgEtd \nThe average drawdown at the end of a trade\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgEtd  Print(\"Average ETD of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgEtd);  AvgMae \nAverage maximum adverse excursion\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgMae  Print(\"Average MAE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMae);  AvgMfe \nAverage maximum favorable excursion\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgMfe  Print(\"Average MFE of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgMfe);  AvgProfit \nAverage profit for all trades\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.AvgProfit  Print(\"Average profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.AvgProfit);  CumProfit \nThe cumulative winnings over all trades\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.CumProfit  Print(\"Average cumulative profit of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.CumProfit);  DrawDown \nThe drawdown for all trades\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.DrawDow  Print(\"Drawdown of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.DrawDown);  LargestLoser \nThe largest losing trade\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.LargestLoser  Print(\"Largest loss of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestLoser);  LargestWinner \nThe largest winning trade\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.LargestWinner  Print(\"Largest win of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.LargestWinner);  ProfitPerMonth \nThe total performance (wins/losses) for the month (also in percent)\n<TradeCollection>.TradesPerformance.<TradesPerformanceValues>.ProfitPerMonth  Print(\"Profit per month of all trades is: \" + Performance.AllTrades.TradesPerformance.Currency.ProfitPerMonth);  StdDev \n    The standard deviation for the wins/losses. With this, you are able to identify outliers. The smaller the standard deviation, the higher the expectation of winnings.  All factors are double values.",
            "title": "Performance Characteristics"
        },
        {
            "location": "/keywords/",
            "text": "Keywords\n\n\nAddOutput()\n\n\nAddLine()\n\n\nDescription\n\n\nThe add method allows you to add plots or line objects to the chart. When a new plot object is added using Add(), this automatically creates a data series of the type DataSeries, which is attached to this object. The value collection allows you to reference and access this data series.\nAdd\n() can be used with the OnInit() and the OnCalculate() methods.\n\n\nParameter\n\n\nplot \u2013 a \nOutputDescriptor\n object\nline \u2013 a \nLevelLine\n object\n\n\nUsage\n\n\n AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\nAdd(LevelLine line)\n\n\n\n\nExample\n\n\n#region Usings\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n#endregion\nnamespace AgenaTrader.UserCode\n{\n  [Description(\"Enter the description for the new custom indicator here\")]\n  public class MyIndicator : UserIndicator\n  {\n    protected override void OnInit()\n    {\n    // Two blue lines will be placed into the chart, one at 70 and the other at 30\n    AddLine(new LevelLine(Color.Blue, 70, \"UpperLine\"));\n    AddLine(new LevelLine(Color.Blue, 30, \"LowerLine\"));\n\n    // Add 2 plots\n    AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Red), \"FastSMA\"));\n    AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Blue), \"SlowSMA\"));\n    }\n\n    protected override void OnCalculate()\n    {\n    //The set method is assigned to the value of the current bar\n    FastSMA.Set( SMA(8)[0] ); // is identical with Outputs[0].Set( SMA(8)[0] );\n    SlowSMA.Set( SMA(50)[0] ); // is identical with Outputs[1].Set( SMA(50)[0] );\n    }\n\n    // Two data series are made available here\n    // These are not necessary for the display of the indicator // With the help of these series, one indicator can access the other\n    // For example: double d = MyIndicator.FastSMA[0] - MyIndicator.SlowSMA[0];\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries FastSMA\n    {\n      get { return Outputs[0]; }\n    }\n\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries SlowSMA\n    {\n      get { return Outputs[1]; }\n    }\n  }\n}\n\n\n\n\nAllowRemovalOfChartDrawings\n\n\nDescription\n\n\n\"AllowRemovalOfChartDrawings\" is a property of indicators that can be set under \nOnInit()\n.\n\n\nAllowRemovalOfChartDrawings = true\n\n\nDrawing objects that are drawn by an indicator or a strategy can be manually removed from the chart.\n\n\nAllowRemovalOfChartDrawings = false (default)\n\n\nDrawing objects that have been created by a strategy or indicator CANNOT be manually removed from the chart. They are removed once the indicator or strategy is removed.\n\n\nThis property can be queried and will return \"true\" or \"false\".\n\n\nUsage\n\n\nAllowRemovalOfChartDrawings\n\n\n\n\nExample\n\n\nprotected override void OnInit()\n{\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Drawing objects can be manually removed from the chart\nAllowRemovalOfChartDrawings = true;\n}\n\n\n\n\nAttribute\n\n\nAttribute is a component of the C# language. Within AgenaScript, indicators, and strategies, you can use these attributes in the same manner as you would in C#.\nInformation regarding the usage of attributes can be found here:\n\n\nhttp://msdn.microsoft.com/de-de/library/z0w1kczw%28v=vs.80%29.aspx\n\n\nThe most commonly used attributes in AgenaScript are:\n\n\n\n\nBrowsable\n\n\nCategory\n\n\nConditionalValue\n\n\nDescription\n\n\nDisplayName\n\n\nTimeFrameRequirements\n\n\nXmlIgnore\n\n\n\n\nBrowsable\n\n\nBrowsable is an \nAttribute\n within AgenaScript.\n\n\nAgenaScript uses public variables for entering parameters for indicators (such as periods for the SMA) and for outputting events and calculations within indicators (for example, data series).\nVariables used for entering parameters must be displayed in the properties dialog. Data series are exempt from this.\nPublic variables with the browsable attribute set to false are not displayed within the properties dialog.\n\n\nBy default, browsable is set to true. Therefore, within a variable containing an entry parameter, the attribute does not need to be specified.\n\n\nExample for a parameter:\n\n\nThe parameter should be displayed and queried in the properties window. Therefore browsable should be set to true.\n\n\n[Description(\"Numbers of bars used for calculations\")]\n[Category(\"InputParameter\")]\npublic int Period\n{\nget { return period; }\nset { period = Math.Max(1, value); }\n}\n\n\n\n\nExample for a data series:\n\n\n[Browsable(false)]\n[DisplayName(\"Lower band\")]\n[XmlIgnore]\npublic DataSeries Lower\n{\nget { return Outputs[0]; }\n}\n\n\n\n\nCategory\n\n\nCategory is an \nAttribute\n in AgenaScript and can be used on properties and classes.\n\n\nThe category attribute on properties defines under which category in the properties dialog the parameter is shown.\nIf this attribute is missing, the parameters category is accepted as the standard.\n\n\nThe following example shows how to create the new category \"My InputParameter\" in the properties dialog:\n\n\n[Category(\"My InputParameter\")]\n[DisplayName(\"Period number\")]\npublic double _period\n{\nget { return _period; }\nset { _period = value; }\n}\n\n\n\n\n\n\nIf you use the category \nAttribute\n on classes you are able to create subcategories for your scripts and group them all in one category.\nThis is pretty useful if you are creating a package and you want to group a few indicators in a group with one name.\n\n\nThe following example shows how to create a subfolder \"My Package\":\n\n\nnamespace AgenaTrader.UserCode\n{\n    [Description(\"Description what this indicator doing.\")]\n    [Category(\"My Package\")]\n    public class MyHolyGrail_Indicator : UserIndicator\n    {\n      /* your code here */\n    }\n}\n\n\n\n\nConditionalValue\n\n\nConditional value is an \nAttribute\n in AgenaScript.\n\n\nNormally, when making comparisons within the ConditionEscort, the data series generated by indicators are used. One such example would be checking whether a moving average lies above or below a specific price value.\nAn indicator can also yield values that are not contained within data series, such as values of the type int, double, char, Boolean, string, etc.\nTo use these values within the scanner or ConditionEscort, they have to be labeled with the conditional value attribute.\n\n\n[Browsable(false)]\n[XmlIgnore]\n[ConditionalValue]\npublic int PublicVariable\n{\nget\n{\nUpdate();\nreturn _internVariable;\n}\n}\n\n\n\n\nDescription\n\n\nDescription is an \nAttribute\n in AgenaScript.\n\n\nThe description attribute is used in AgenaScript for classes and public variables.\nAs an attribute of the class, the text is a description of the function of the entire indicator.\n\n\n[Description(\"Displays the tick count of a bar.\")]\npublic class TickCounter : UserIndicator\n{\n//As an attribute of a public variable, the text is a description of the function of the parameter.\n[Description(\"Number of standard deviations\")]\n[DisplayName(\"# of std. dev.\")]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}\n}\n\n\n\n\nThe descriptions are displayed in the relevant properties dialog.\n\n\nDisplayName\n\n\nDisplay name is an \nAttribute\n in AgenaScript.\n\n\nThe display name attribute defines the text shown in the properties dialog for the parameter.\n\n\nIf this attribute is not specified, the name of the public variable is used.\n\n\n[Description(\"Number of standard deviations\")]\n[DisplayName(\"# of std. dev.\")]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}\n\n\n\n\nTimeFrameRequirements\n\n\nTimeframe requirements is an \nAttribute\n in AgenaScripts.\n\n\nIf you want a script to use data from various timeframes, the class requires the attribute \u201eTimeFrameRequirements\". You can specify multiple timeframes here:\n\n\n[TimeFrameRequirements(\"1 day\")]\n[TimeFrameRequirements(\"15 minutes\", \"1 day\", \"1 week\")]\n\n\n\n\nThe amount of data provided for the other timeframes will always be the same as the number of actual candles loaded into the chart. If there are 500 candles for a 5-minute chart, then 500 candles of another timeframe will also be loaded. In the first example above, 500 daily candles will be loaded. In the second example, 500 15-minute candles, 500 daily candles and 500 weekly candles will be loaded.\nThe amount of data can become rather large very quickly, thus you should take precautions when using this attribute.\n\n\nSee \nMultiBars\n.\n\n\nImportant:\n\n\nIf a class uses a different indicator that requires one or more secondary timeframes, then the \"TimeFrameRequirements\" attribute must be set for the class retrieving the data. An example for this can be seen here: \nGetDayBar\n.\n\n\nXMLIgnore\n\n\nXML ignore is an \nAttribute\n in AgenaScript.\n\n\nAgenaTrader saves all parameter settings for the indicators in a template. The template files are saved in an XML format. In order to avoid a parameter being saved as part of the template, the attribute XML ignore can be set.\n\n\nTo save parameters in an XML file, the values must be serialized. Under most circumstances, AgenaTrader performs this automatically. Self-defined data types cannot be serialized automatically, so in this case the programmer is responsible for the correct serialization.\nIn the following example, the color and font are used as parameters of an indicator. AgenaTrader has two methods for serializing color and font information (TextColorSerialize and TextFontSerialize). Both parameters \u2013 TextColor and TextFont \u2013 thus need to be marked with the XML ignore parameter.\n\n\nprivate Color _textColor = Color.Blue;\nprivate Font _textFont = new Font(\"Arial\", 12, FontStyle.Bold);\n[XmlIgnore]\n[Description(\"Textcolor\")]\npublic Color TextColor\n{\nget { return _textColor; }\nset { _textColor = value; }\n}\n[Browsable(false)]\npublic string TextColorSerialize\n{\nget { return SerializableColor.ToString(_textColor); }\nset { _textColor = SerializableColor.FromString(value); }\n}\n[XmlIgnore()]\n[Description(\"TextFont\")]\npublic Font TextFont\n{\nget { return _textFont; }\nset { _textFont = value; }\n}\n[Browsable(false)]\npublic string TextFontSerialize\n{\nget { return SerializableFont.ToString(_textFont); }\nset { _textFont = SerializableFont.FromString(value); }\n}\n\n\n\n\nCalculateOnClosedBar\n\n\nDescription\n\n\nThe property \"CalculateOnClosedBar\" determines the events for which AgenaTrader can call up the OnCalculate() method.\n\n\nCalculateOnClosedBar = true\n\n\n\n\nOnCalculate()\n is called up when a bar is closed and the next incoming tick creates a new bar.\n\n\nCalculateOnClosedBar = false\n\n\n\n\nOnCalculate() is called up for each new incoming tick.\nIf you are running AgenaTrader on older hardware, this may cause performance issues with instruments that are highly liquid.\nThe property can be queried in the script and will return a value of the type Boolean (true or false).\nCalculateOnClosedBar can be used within OnInit() and also within OnCalculate().\nOnCalculate is only called up for the closing price of each bar with historical data, even if CalculateOnClosedBar is set to false.\nWhen an indicator is called up by another indicator, the CalculateOnClosedBar property of the retrieved indicator overwrites the indicator performing the retrieving.\n\n\nUsage\n\n\nCalculateOnClosedBar\n\n\nMore Information\n\n\nSee \nBars\n.\n\n\nExample\n\n\nprotected override void OnInit()\n{\n//Indicator calculation should only occur when a bar has closed/finished\nCalculateOnClosedBar = true;\n}\n\n\n\n\nChart\n\n\nChart control is an object that provides reading access of various properties for the chart.\n\n\nThe important properties are:\n\n\n\n\nChartFontColor, BackColor\n\n\nUpColor, DownColor\n\n\nFont\n\n\nBarMarginLeft, BarMarginRight\n\n\nBarSpace, BarWidth\n\n\nBarsPainted\n\n\nFirstBarPainted, LastBarPainted\n\n\nBarsVisible\n\n\nFirstBarVisible, LastBarVisible\n\n\nGetXByBarIdx, GetYByValue\n\n\n\n\nAn example can be seen here: \nPlotSample\n.\n\n\nBarsPainted und BarsVisible:\n\n\nBarsPainted contains the number of bars that a chart \ncould\n display from the left to right border with the current width and distance of the candles.\nBarsVisible contains the number of bars actually visible.\n\n\nFirstBarPainted und FirstBarVisible:\n\n\nFirstBarPainted contains the number of the bar that \nwould\n be displayed on the left border of the chart.\n\n\nFirstBarVisible contains the number of the bar that is actually shown as the first bar on the left side of the chart area.\n\n\nExample: the chart has been moved so that the first bar of the chart is now in the middle of the chart.\n\n\nFirstBarPainted would be negative.\n\n\nFirstBarVisible would be 0.\n\n\nLastBarPainted und LastBarVisible:\n\n\nLastBarPainted contains the number of the bar that \nwould\n be displayed on the right border of the chart.\n\n\nLastBarVisible contains the number of the bar that is actually displayed on the right side of the chart.\n\n\nExample: the chart has been moved so that the last bar of the chart is displayed in the middle section.\n\n\nLastBarPainted would be larger than Bars.Count.\n\n\nLastBarVisible would be Bars.Count -1.\n\n\nClearTraceWindow()\n\n\nDescription\n\n\nThe ClearTraceWindow() method empties the output window. The method can be used within OnInit() as well as within OnCalculate().\nThe output window contains all outputs that have been created with the \nPrint()\n command.\nUsing the output window is a great method for code debugging.\n\n\nUsage\n\n\nClearTraceWindow()\n\n\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nExample\n\n\nprotected override void OnInit()\n{\n// Delete the content of the output window\nClearTraceWindow();\n}\n\n\n\n\nColors\n\n\nAgenaScript provides you with the following commands for defining colors and making color changes to the chart:\n\n\nBarColor\n Color of a bar\n\n\nBackColor\n Background color of the chart\n\n\nBackColorAll\n Background color of the chart and all panels\n\n\nChart.UpColor Color of up ticks (up bars)\nChart.DownColor Color of down ticks (down bars)\n\n\nFor each bar, its colors are saved in the following data series. If these data series are written in, the color of the referenced bar will change.\n\n\nBarColorSeries\n\n\nCandleOutlineColorSeries\n\n\nBackColorSeries\n\n\nBackColorAllSeries\n\n\nBackColor\n\n\nDescription\n\n\nBack color changes the background color of a bar or gives the current background color of a bar when queried.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\nA color object of the type \"public struct color\"\n\n\nUsage\n\n\nBackColor\n\n\nExample\n\n\n// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColor = Color.Blue;\n\n\n\n\n\n\n// Changing the bar background color depending on a smoothing average\n// Market price above the SMA(14) to green\n// Market price below the SMA(14) to maroon\nBackColor = SMA(14)[0] >= Close[0] ? Color.Maroon : Color.LimeGreen;\n\n\n\n\n\n\nBackColorAll\n\n\nDescription\n\n\nBack color all changes the background color of a bar within the chart window and in all subcharts.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\nA color object of the type \"public struct color\"\n\n\nUsage\n\n\nBackColorAll\n\n\nExample\n\n\n// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColorAll = Color.Blue;\n\n\n\n\n\n\nBackColorAllSeries\n\n\nDescription\n\n\nBack color all series is a data series containing the background color for each bar. The difference to BackColorSeries is that the background color of the subchart is included.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nBackColorAllSeries\nBackColorAllSeries[int barsAgo]\n\n\n\n\nWhen using the method with an index [\nint\n barsAgo] the background color for the referenced bar will be changed or returned.\n\n\nExample\n\n\nSee \nBackColorSeries\n.\n\n\nBackColorSeries\n\n\nDescription\n\n\nBack color series is a data series containing the background color for each bar. If the background color for the subcharts is to be included, please use \"BackColorAllSeries\" instead.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nBackColorSeries\nBackColorSeries[int barsAgo]\n\n\n\n\nWhen using this method with an index [\nint\n barsAgo] the background color for the referenced bar will be outputted.\n\n\nExample\n\n\n// Which background color does the current bar have?\nPrint (BackColorSeries[0]);\n// Set the current bar\u2019s background color to blue\n// This is identical to BackColor = Color.Blue\nBackColorSeries[3] = Color.Blue;\n// Set background color for the previous bar to green\nBackColorSeries[1] = Color.Green;\n\n\n\n\nBarColor\n\n\nDescription\n\n\nBar color changes the color of a bar.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nUsage\n\n\nBarColor\n\n\nExample\n\n\n// If the closing price is above the SMA(14), color the bar orange\nif (Close[0] > SMA(14)[0]) BarColor = Color.Orange;\n\n\n\n\n\n\nBarColorSeries\n\n\nDescription\n\n\nBar color series is a data series containing the color for each bar.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nBarColorSeries\n\n\nBarColorSeries[\nint\n barsAgo]\n\n\nWhen using the method with an index [\nint\n barsAgo] the color for the referenced bar will be changed or returned.\n\n\nCaution: Only the color of a bar whose color has been explicitly changed beforehand will be returned. In all other cases, the \"Color.Empty\" value will be returned.\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\nif (ProcessingBarIndex == Bars.Count-1-(CalculateOnClosedBar?1:0))\n{\n// Color the current bar blue\n// This is identical to BarColor = color.Blue\nBarColorSeries[0] = Color.Blue;\n// Color the previous bars green\nBarColorSeries[1] = Color.Orange;\n// Color the third bar yellow\nBarColorSeries[2] = Color.Yellow;\n}\n}\n\n\n\n\n\n\nCandleOutlineColor\n\n\nDescription\n\n\nCandle outline color changes the border/outline color (including the wick) of a bar.\n\n\nIf the color of the bar is changed using BarColor and the outline is not changed using CandleOutlineColor, the outline color is adjusted to match the color of the bar.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nUsage\n\n\nCandleOutlineColor\n\n\nExample\n\n\nif (SMA(14)[0] > SMA(200)[0])\nCandleOutlineColor = Color.LimeGreen;\nelse\nCandleOutlineColor = Color.Red;\n\n\n\n\n\n\nCandleOutlineColorSeries\n\n\nDescription\n\n\nCandle outline color series is a data series that saves the outline color for each bar.\n\n\nSee \nColors\n, \nBarColor\n, \nBackColor\n, \nBackColorAll\n, \nBarColorSeries\n, \nBackColorAll\n, \nCandleOutlineColor\n.\n\n\nParameter\n\n\na color object of the type \"public struct color\"\n\n\nint barsAgo\n\n\nUsage\n\n\nCandleOutlineColorSeries\nCandleOutlineColorSeries[int barsAgo]\n\n\n\n\nWhen using this method with an index [\nint\n barsAgo] the border color for the referenced bar will be outputted.\n\n\nCaution: Color.Empty will be outputted for a bar unless it has been previously changed.\n\n\nExample\n\n\n// Set the outline color of the current bar to blue\nCandleOutlineColorSeries[0] = Color.Blue;\n// Change the outline color to the chart default value\nCandleOutlineColorSeries[0] = Color.Empty;\n\n\n\n\nCrossAbove()\n\n\nDescription\n\n\nThe CrossAbove() method allows you to check whether a crossing of two values has occurred (from bottom to top) within a predefined number of periods. The values can be a market price, an indicator, a data series or a constant value.\n\n\nSee \nCrossAbove()\n, \nCrossBelow()\n, \nIsSerieRising()\n, \nIsSerieFalling()\n.\n\n\nUsage\n\n\nCrossAbove(IDataSeries series1, double value, int lookBackPeriod)\nCrossAbove(IDataSeries series1, IDataSeries series2, int lookBackPeriod)\n\n\n\n\nReturn Value\n\n\ntrue\n a cross has occurred\n\nfalse\n a cross has not occurred\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlookBackPeriod\n\n\nNumber of bars within which a cross will be searched for\n\n\n\n\n\n\nseries1 und series2\n\n\nA data series such as an indicator, close, high, etc.\n\n\n\n\n\n\nvalue\n\n\nA constant value of the type double\n\n\n\n\n\n\n\n\nExample\n\n\n// Puts out a notice if the SMA(20) crosses above the SMA(50)\nif (CrossAbove(SMA(20), SMA(50), 1))\nPrint(\"SMA(20) has risen above SMA(50)!\");\n// Puts out a notice if the SMA(20) crosses above the value of 40\nif (CrossAbove(SMA(20), 40, 1))\nPrint(\"SMA(20) has risen above 40!\");\n// Put out a notice for a long entry if the SMA(20) has crossed above the SMA(50) within the last 5 bars.\nif (CrossAbove(SMA(20), SMA(50), 1) && Close[0] > Close[1])\nPrint(\"Long entry !!!\");\n\n\n\n\nCrossBelow()\n\n\nDescription\n\n\nUsing the CrossBelow() method, you can test whether or not a cross below has occurred within a predefined number of periods. The values can be the market price, an indicator, any data series, or a constant value.\n\n\nSee \nCrossAbove()\n, \nCrossBelow()\n, \nIsSerieRising()\n, \nIsSerieFalling()\n.\n\n\nUsage\n\n\nCrossBelow(IDataSeries series1, double value, int lookBackPeriod)\nCrossBelow(IDataSeries series1, IDataSeries series2, int lookBackPeriod)\n\n\n\n\nReturn Value\n\n\ntrue\n a cross has occurred\n\nfalse\n a cross has not occurred\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlookBackPeriod\n\n\nNumber of Bars within which a cross will be searched for\n\n\n\n\n\n\nseries1 und series2\n\n\nA data series such as an indicator, close, high etc.\n\n\n\n\n\n\nvalue\n\n\nA constant value of the type double\n\n\n\n\n\n\n\n\nExample\n\n\n// Puts out a notice if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nPrint(\"SMA(20) has fallen below SMA(50)!\");\n// Puts out a notice if the SMA(20) falls below the value of 40\nif (CrossBelow(SMA(20), 40, 1))\nPrint(\"SMA(20) has fallen below 40!\");\n// Puts out a notice for a short entry if a crossing of the SMA(20) below the SMA(50) has occurred within the last 5 bars.\n.\nif (CrossBelow(SMA(20), SMA(50), 1) \n&& Instrument.Compare(Close[1], Close[0]) > 1)\nPrint(\"Short entry !!!\");\n\n\n\n\nDatafeedHistoryPeriodicity\n\n\nDescription\n\n\nDatafeed history periodicity is a data type.\n\n\nDefinition\n\n\npublic enum DatafeedHistoryPeriodicity\n-   DatafeedHistoryPeriodicity.Tick\n-   DatafeedHistoryPeriodicity.Second\n-   DatafeedHistoryPeriodicity.Minute\n-   DatafeedHistoryPeriodicity.Hour\n-   DatafeedHistoryPeriodicity.Day\n-   DatafeedHistoryPeriodicity.Week\n-   DatafeedHistoryPeriodicity.Month\n-   DatafeedHistoryPeriodicity.Volume\n-   DatafeedHistoryPeriodicity.Range\n-   DatafeedHistoryPeriodicity.Quarter\n-   DatafeedHistoryPeriodicity.Year\n-   DatafeedHistoryPeriodicity.HeikinAshi\n-   DatafeedHistoryPeriodicity.Renko\n-   DatafeedHistoryPeriodicity.LineBreak\n-   DatafeedHistoryPeriodicity.Kagi\n-   DatafeedHistoryPeriodicity.PointAndFigure\n-   DatafeedHistoryPeriodicity.Custom\n\n\nSee \nTimeFrame\n, \nTimeFrames\n.\n\n\nDataSeries\n\n\nDescription\n\n\nData series (data rows) are an easy yet powerful method of saving additional values for individual bars. For example, when calculating the smoothing average, each bar is assigned the value calculated for this bar.\nA data series is an array that contains as many elements as there are bars displayed in a chart. AgenaTrader ensures that data series are correctly synchronized with the bars.\nData series are used in exactly the same way as the close or time series. They can therefore also be used for the input data for various indicators.\nIn the table below you will find 4 newly created data series (highlighted). Each data series has exactly one value of a special data type (int, bool, string) attached to it per bar. The indexing with barsAgo is thus identical to the data series provided by the system.\n\n\n\n\nUsable Data Series in AgenaTrader\n\n\nBoolSeries\n\n\nDataSeries\n\n\nDateTimeSeries\n\n\nFloatSeries\n\n\nIntSeries\n\n\nLongSeries\n\n\nStringSeries\n\n\nIn addition, there are also data series such as ColorSeries, although these are only used for internal purposes and should not be used directly.\nTo change the color of plots, please use \nPlotColors\n.\n\n\nSet(), Reset() und ContainsValue()\n\n\nEach data series contains a \nSet()\n, \nReset()\n and \nContainsValue()\n method.\nWith Set(value) or Set(int barsAgo, value) you can place values into the data series for the current position, or in this case into the barsAgo position.\nWith Reset() or Reset(int barsAgo) you can delete a value from the data series for the current position or for the barsAgo position. This has the result that no valid value exists at this position any more.\nProgramming with the help of the reset method can simplify otherwise complex logic. This is especially true for Boolean series, where only \"true\" or \"false\" values can be included.\nThe ContainsValue() checks whether a data series has a value for a specific position.\n\n\nInformation about Data Types\n\n\nhttp://msdn.microsoft.com/de-de/library/s1ax56ch%28v=vs.80%29.aspx\n\n\nBoolSeries\n\n\nDescription\n\n\nBool series is a data series that contains a Boolean value for each bar. The number of elements in this series correlates with the exact number of bars within the chart.\n\n\nCreate New Bool Series\n\n\nIn the area for the declaration of variables, simply declare a new variable:\n\n\n//Variable declaration\nprivate BoolSeries myBoolSeries;\n\n\n\n\nWith the OnInit() method, this variable assigns a new instance of the Bool series:\n\n\nprotected override void OnInit()\n{\nmyBoolSeries = new BoolSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the data series for the current position:\n\n\nmyBoolSeries.Set(true);\n\n\n\n\nWriting a value in the past into the data series:\n\n\nmyBoolSeries.Set(int barsAgo, bool Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value for the data series:\n\n\nmyBoolSeries.Reset();\n\n\n\n\nRemoving a value in the past from the data series:\n\n\nmyBoolSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyBoolSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\"For the bar of \" + Time[0] + \" ago the value of the data series is: \" + myBoolSeries[0]);\n\n\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\nif (Close[0] > Open[0])\nmyBoolSeries.Set(true);\nelse\nmyBoolSeries.Set(false);\n}\n\n\n\n\nDataSeries\n\n\nDescription\n\n\nData series is a \nDataSeries\n that can contain a double value for each bar. The number of elements in this series corresponds to the exact number of bars within the charts.\n\n\nData series for double values are the data series most commonly used for indicators.\n\n\nCreate a New Data Series\n\n\nIn the declaration area for variables:\n\n\n//Variable declaration\nprivate DataSeries myDataSeries;\n\n\n\n\nWith the OnInit() method, this variable is assigned a new instance:\n\n\nprotected override void OnInit()\n{\nmyDataSeries = new DataSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the data series for the current position:\n\n\nmyDataSeries.Set(Bars[0].Close);\n\n\n\n\nWriting a value in the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, double Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\"For the bar from \" + Time[0] + \" ago the value for the data series is: \" + myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span between the high and low of a bar\nmyDataSeries.Set(Math.Abs(High[0]-Low[0]));\n\n\n\n\nDateTimeSeries\n\n\nDescription\n\n\nDate time series is a \nDataSeries\n that can record a date time value for each bar. The number of elements in this series corresponds to the number of bars in the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate DateTimeSeries myDataSeries;\n\n\n\n\nAssign a new instance of DateTimeSeries for the variable with the OnInit() method:\n\n\nprotected override void OnInit()\n{\nmyDataSeries = new DateTimeSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series:\n\n\nmyDataSeries.Set(DateTime Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, DateTime Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemove a past value from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\"For the bar from \" + Time[0] + \" ago the value of the data series is: \" + myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the difference of -6 hours (eastern time, New York) for a time zone conversion\nmyDataSeries.Set(Time[0].AddHours(-6));\n\n\n\n\nFloatSeries\n\n\nDescription\n\n\nFloat series is a DataSeries that contains a float value for each bar in the chart. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate FloatSeries myDataSeries;\n\n\n\n\nAssign a new instance of the FloatSeries to the variable with the OnInit() method:\n\n\nprotected override void OnInit()\n{\nmyDatatSeries = new FloatSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series\n\n\nmyDataSeries.Set(float Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, float Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (\"For the bar from \" + Time[0] + \" ago the value for the data series is: \" + myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span between the high and the low of a bar\nmyDataSeries.Set(Math.Abs((float) High[0] - (float) Low[0]));\n\n\n\n\nIntSeries\n\n\nDescription\n\n\nInt series is a data series that can assign an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate IntSeries myDataSeries;\n\n\n\n\nAssign an instance of the int series to the variable with the OnInit() method:\n\n\nprotected override void OnInit()\n{\nmyDataSeries = new IntSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series\n\n\nmyDataSeries.Set(int Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, int Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span in ticks between high and low for each bar\nmyDataSeries.Set((int) ((High[0] - Low[0]) / TickSize));\n\n\n\n\nLongSeries\n\n\nDescription\n\n\nLong series is a data series that can include an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate LongSeries myDataSeries;\n\n\n\n\nAssign a new instance of the long series to the variable with the OnInit() method:\n\n\nprotected override void OnInit()\n{\nmyDataSeries = new LongSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series:\n\n\nmyDataSeries.Set(long Value);\n\n\n\n\nWriting a value from the past into the data deries:\n\n\nmyDataSeries.Set(int barsAgo, long Value);\n\n\n\n\nDelete Values\n\n\nRemoving the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemoving a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Saves the span of ticks between high and low for each bar\nmyDataSeries.Set((long) ((High[0] - Low[0]) / TickSize));\n\n\n\n\nStringSeries\n\n\nDescription\n\n\nString series is a data series for string values that are saved for each bar. The number of elements in this series corresponds to the number of bars within the chart.\n\n\nCreate a New Data Series\n\n\nCreate a new variable in the declaration area:\n\n\n//Variable declaration\nprivate StringSeries myDataSeries;\n\n\n\n\nAssign an instance of string series to the variable with the OnInit() method:\n\n\nprotected override void OnInit()\n{\nmyDataSeries = new StringSeries(this);\nCalculateOnClosedBar = true;\n}\n\n\n\n\nAssign Values\n\n\nAssigning a value to the current position of the data series:\n\n\nmyDataSeries.Set(string Value);\n\n\n\n\nWriting a value from the past into the data series:\n\n\nmyDataSeries.Set(int barsAgo, string Value);\n\n\n\n\nDelete Values\n\n\nRemove the current value from the data series:\n\n\nmyDataSeries.Reset();\n\n\n\n\nRemove a value located in the past from the data series:\n\n\nmyDataSeries.Reset(int barsAgo);\n\n\n\n\nCheck Values for their Validity\n\n\nmyDataSeries.ContainsValue(int barsAgo);\n\n\n\n\nRead Value\n\n\nPrint (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);\n\n\n\n\nExample\n\n\n//Save the current calendar day for each bar (Monday\u2026 Tuesday etc.)\nmyDataSeries.Set(string.Format(\"{0:dddd}\", Time[0]));\n\n\n\n\nDayOfWeek\n\n\nDescription\n\n\n\"DayOfWeek\" outputs the date-time value (such as a timestamp) for each bar.\n\n\nOf course, all other methods defined within the C# language for usage of date-time objects are also available, such as day, month, year, hour, minute, second, day of week etc.\n\n\nSee \nhttp://msdn.microsoft.com/de-de/library/03ybds8y.aspx\n\n\nDefinition\n\n\nProperty DayOfWeek\n\n\npublic enum DayOfWeek\n-   DayOfWeek.Monday\n-   DayOfWeek.Tuesday\n-   DayOfWeek.Wednesday\n-   DayOfWeek.Thursday\n-   DayOfWeek.Friday\n-   DayOfWeek.Saturday\n-   DayOfWeek.Sunday\n\n\nExample\n\n\n//Outputs the weekday for each bar\nPrint(Time[0].DayOfWeek);\n//Do not execute trades on a Friday\nif (Time[0].DayOfWeek == DayOfWeek.Friday)\nreturn;\n\n\n\n\nDisplacement\n\n\nDescription\n\n\nBy implementing \"Displacement\", you can shift a drawn indicator line right or left along the x-axis.\nThis property can be queried within the script and will return an int value.\n\n\nBlue line: Displacement = 0 (Original)\nRed line: Displacement = -5\nGreen line: Displacement = +5\n\n\n\n\nUsage\n\n\nDisplacement\n\n\nParameter\n\n\nint Offset Number of bars by which the indicator is to be moved.\n\n\nExample\n\n\nprotected override void OnInit()\n{\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Displacement of the plot by one bar to the right\nDisplacement = 1;\n}\n\n\n\n\nEmail function\n\n\nDescription\n\n\nOverride method which allows to send mail.\n\n\nParameter\n\n\nNone\n\n\nReturn value\n\n\nstring\n\n\nUsage\n\n\nused for complicated calculation on a last bar\n\n\nExample\n\n\nprotected override void OnOrderExecution(IExecution execution)\n{\nif (execution.Order != null && execution.Order.OrderState == OrderState.FilledQuantity)\n{\nif (oEnter != null && execution.Name == oEnter.Name)\n{\n// Enter-Order gef\u00fcllt\nif (_sendMail) this.SendEmail(Core.AccountManager.Core.Settings.MailDefaultFromAddress, Core.PreferenceManager.DefaultEmailAddress,\nexecution.Instrument.Symbol + \" order \" + execution.Name + \" executed.\", \"The order for \" + execution.Instrument.Name + \" was executed. Invest: \" + (Trade.Quantity * Trade.AvgPrice).ToString(\"F2\"));\n}\nelse if (oTStop != null && execution.Name == oTStop.Name)\n{\nOrderStatus = 0; // Trend-Stopp-Order gef\u00fcllt\nif (_sendMail) this.SendEmail(Core.AccountManager.Core.Settings.MailDefaultFromAddress, Core.PreferenceManager.DefaultEmailAddress,\nexecution.Instrument.Symbol +\" order \" + execution.Name + \" executed.\",\nexecution.Instrument.Symbol +\" order \" + execution.Name + \" executed. Profit:\" + Trade.ClosedProfitLoss.ToString(\"F2\"));\n}\n}\n}\n\n\n\n\nFirstTickOfBar\n\n\nDescription\n\n\nFirstTickOfBar is a property of the type \"bool\" that returns \"true\" if the currently incoming tick is associated with a new bar. This means that this tick is the first tick of a new bar.\nThis property can only be meaningfully applied when the indicator or strategy is running in the tick-by-tick mode, meaning that CalculateOnClosedBar = false and the data feed is able to output real-time values.\nWhen using end-of-day data in a daily chart, the \"FirstTickOfBar\" is always true for the last bar.\nFirstTickOfBar should not be used outside of the OnCalculate() method.\nSee \nBars.TicksCountForLastBar\n.\n\n\nUsage\n\n\nFirstTickOfBar\n\n\nExample\n\n\n// Within a tick-by-tick strategy, execute one part bar-by-bar only\nif (FirstTickOfBar)\n{\nif (CCI(20)[1] < -250)\nOpenLong();\nreturn;\n}\n\n\n\n\nFirstTickOfBarMtf\n\n\nDescription\n\n\nFirstTickOfBarMtf is the \nmulti-time frame\n variant of the \nFirstTickOfBar\n property.\n\n\nThe setting of CalculateOnClosedBar only affects the primary timeframe (chart timeframe). When working with multi-bars, the ticks of the secondary timeframes are provided on a tick-by-tick basis independently of the CalculateOnClosedBar setting.\nWith the help of FirstTickOfBarMtf, it is possible to determine when a new bar has begun in a secondary timeframe.\n\n\nUsage\n\n\nFirstTickOfBarMtf(ProcessingBarSeriesIndex)\n\n\nParameter\n\n\nFirstTickOfBarMtf(ProcessingBarSeriesIndex).\n\n\nSee \nProcessingBarSeriesIndex\n.\n\n\nExample\n\n\nif (FirstTickOfBarMtf(ProcessingBarSeriesIndex))\nPrint(\"A new bar has begun.\");\n\n\n\n\nGetCurrentAsk()\n\n\nDescription\n\n\nThe GetCurrentAsk() method returns the current value of the ask side of the order book. If no level 1 data is available to AgenaTrader, then this function simply outputs the last trade value.\n\n\nSee \nGetCurrentBid()\n and \nOnLevel1()\n.\n\n\nUsage\n\n\nGetCurrentAsk()\n\n\nReturn Value\n\n\ndouble value\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nIf an entry condition is fulfilled, then 1 contract should be sold at the current ask price:\nprivate IOrder entryOrder = null;\nprotected override void OnCalculate()\n{\n// Entry condition\nif (Close[0] < SMA(20)[0] && entryOrder == null)\n// Sell 1 contract at the current ask price\n\n    SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Sell,\n                    Type = OrderType.Limit,\n                    Mode = OrderMode.Direct,\n                    Price = GetCurrentAsk(),\n                    Quantity = 1,\n                    SignalName = \"Enter short\",\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n}\n\n\n\n\nGetCurrentAskVolume()\n\n\nDescription\n\n\nThe GetCurrentAskVolume () method returns the current volume on the Ask page of the order book. This function is only executable if the data provider provides level 2 data.\n\n\nSee \nGetCurrentBidVolume()\n, \nGetCurrentBid()\n and \nOnLevel1()\n.\n\n\nUsage\n\n\nGetCurrentAskVolume()\n\n\nReturn Value\n\n\nLong  value\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\n   if (GetCurrentAskVolume() < GetCurrentBidVolume())\n       Print(\"AskVolume {0} < BidVolume {1}\", GetCurrentAskVolume(), GetCurrentBidVolume());\n}\n\n\n\n\nGetCurrentBid()\n\n\nDescription\n\n\nThe GetCurrentBid() method returns the current value of the bid side of the order book. If no level 1 data is available to AgenaTrader, then the function outputs the last traded price.\n\n\nSee \nGetCurrentAsk()\n and \nOnLevel1()\n.\n\n\nUsage\n\n\nGetCurrentBid()\n\n\nReturn Value\n\n\ndouble value\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nIf an entry condition is fulfilled, then 1 contract should be sold at the current bid price:\n\n\nprivate IOrder entryOrder = null;\nprotected override void OnCalculate()\n{\n// Entry condition\nif (Instrument.Compare(Close[0], SMA(20)[0]) > 0 && entryOrder == null)\n// Sell 1 contract at the current bid price\n\n  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Mode = OrderMode.Direct,\n                    Price = GetCurrentBid(),\n                    Quantity = 1,\n                    SignalName = \"Enter long\",\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n}\n\n\n\n\nGetCurrentBidVolume()\n\n\nDescription\n\n\nThe GetCurrentBidVolume () method returns the current volume on the Bid page of the order book. This function is only executable if the data provider provides level 2 data.\n\n\nSee \nGetCurrentAskVolume\n, \nGetCurrentBid()\n and \nOnLevel1()\n.\n\n\nUsage\n\n\nGetCurrentBidVolume()\n\n\nReturn Value\n\n\nLong value\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\n   if (GetCurrentAskVolume() < GetCurrentBidVolume())\n       Print(\"AskVolume {0} < BidVolume {1}\", GetCurrentAskVolume(), GetCurrentBidVolume());\n}\n\n\n\n\nGetCurrentPrice()\n\n\nDescription\n\n\nThe GetCurrentPrice() method returns the current price (Latest). If AgenaTrader does not have Level1 data, the function returns the price of the last sales\n\n\nSee \nGetCurrentAsk\n, \nGetCurrentBid()\n and \nOnLevel1()\n.\n\n\nUsage\n\n\nGetCurrentPrice()\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\ndouble\n\n\nExample\n\n\nIf an initial condition is fulfilled, 1 contract should be purchased at the current exchange rate.\n\n\nprivate IOrder entryOrder = null;\n\nprotected override void OnCalculate()\n{\n\n   .....\n\n   // Einstiegsbedingung\n   if (Instrument.Compare(Close[0], SMA(20)[0]) > 0 && entryOrder == null)\n       // Kauf 1 Kontrakt zum aktuellen BidKurs\n       entryOrder = SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Mode = OrderMode.Direct,\n                    Price = GetCurrentBid(),\n                    Quantity = 1,\n                    SignalName = \"EntryLong\",\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n}\n\n\n\n\nGetCurrentSpread()\n\n\nDescription\n\n\nThe GetCurrentSpare () method returns the current spread.\n\n\nSee \nGetCurrentAsk\n, \nGetCurrentBid()\n and \nOnLevel1()\n.\n\n\nUsage\n\n\nGetCurrentSpread()\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\ndouble\n\n\nExample\n\n\nIf an initial condition is fulfilled, 1 contract should be purchased at the current exchange rate.\n\n\nprotected override void OnCalculate()\n{\n       Print(\"Der aktuelle Spread ist {0}\", GetCurrentSpread());\n}\n\n\n\n\nGetDayAsInt()\n\n\nDescription\n\n\nTo day is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.\nExperienced programmers can continue using the date-time function directly.\n\n\nTo day outputs an int representation in the format of yyyymmdd.\n(yyyy = year, mm = month, dd = day)\n\n\n13.08.2012 would thus be 20120813.\n\n\nSee \nGetTimeAsInt\n.\n\n\nHelp with date-time: \nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n\n\nUsage\n\n\nGetDayAsInt(DateTime time)\n\n\nExample\n\n\n// Do not trade on the 11<sup>th</sup> of September\nif (GetDayAsInt(Time[0]) = 20130911)\nreturn;\n\n\n\n\nGetSeriesHighestValue\n\n\nDescription\n\n\nThe GetSeriesHighestValue() method searches within a predetermined number of periods for the highest bar and outputs how many bars ago it can be found.\n\n\nSee \nGetSeriesLowestValue()\n.\n\n\nParameter\n\n\nperiod Number of bars within which the bar is searched for\n\n\nseries Every data series, such as close, high, low, etc.\n\n\nReturn Value\n\n\nint barsAgo How many bars ago the high occurred\n\n\n\n\nUsage\n\n\nGetSeriesHighestValue(IDataSeries series, int period)\n\n\n\n\nExample\n\n\n// How many bars ago was the highest high for the current session?\nPrint(GetSeriesHighestValue(High, Bars.BarsCountForSession - 1));\n// What value did the market price have at the highest high of the session?\nPrint(\"The highest price for the session was: \" + Open[GetSeriesHighestValue(High, Bars.BarsCountForSession - 1)]);\n\n\n\n\nGetSeriesLowestValue\n\n\nDescription\n\n\nThe GetSeriesLowestValue() method attempts to find the lowest bar within a predefined number of periods.\n\n\nSee \nGetSeriesHighestValue()\n.\n\n\nParameter\n\n\nperiod Number of bars that will be searched for the lowest bar\n\n\nseries Every data series, such as close, high, low etc.\n\n\nReturn Value\n\n\nint\n barsAgo How many bars ago the low occurred\n\n\nUsage\n\n\nGetSeriesLowestValue(IDataSeries series, int period)\n\n\n\n\nExample\n\n\n// How many bars ago was the lowest low of the session?\nPrint(GetSeriesLowestValue(Low, Bars.BarsCountForSession - 1));\n// Which price did the lowest open of the current session have?\nPrint(\"The lowest open price of the current session was: \" + Open[GetSeriesLowestValue(Low, Bars.BarsCountForSession - 1)]);\n\n\n\n\nGetTimeAsInt()\n\n\nDescription\n\n\nTo time is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.\n\n\nTo time outputs an int representation in the format hhmmss.\n(hh = hour, mm = minute, ss = seconds)\n\n\nThe time 07:30 will be displayed as 73000 and 14:15:12 will become 141512.\n\n\nSee \nGetDayAsInt\n.\n\n\nHelp with date-time: \nhttp://msdn.microsoft.com/de-de/library/system.datetime.aspx\n\n\nUsage\n\n\nGetTimeAsInt(DateTime time)\n\n\nExample\n\n\n// Only enter trades between 08:15 and 16:35\nif (GetTimeAsInt(Time[0]) >= 81500 && GetTimeAsInt(Time[0]) <= 163500)\n{\n// Any trading technique\n}\n\n\n\n\nHistorical\n\n\nDescription\n\n\nHistorical allows you to check whether AgenaScript is working with historical or real-time data.\nAs long as OnCalculate() is called up for historical data, then historical = true. As soon as live data is being used, then historical = false.\nDuring a backtest, historical is always true.\n\n\nUsage\n\n\nHistorical\n\n\nReturn Value\n\n\ntrue\n when using historical data\n\nfalse\n when using real-time data\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\n// only execute for real-time data\nif (IsHistoricalMode) return;\n// Trading technique\n}\n\n\n\n\nInputPriceType\n\n\nDescription\n\n\nThe input price type property determines which price series is used by default when calculating an indicator, if no other data series is explicitly stated.\nInputPriceType can be set with the OnInit() method; this specification is then valid for all further calculations.\nIf InputPriceType is in OnCalculate(), these changes are only valid starting with the next instruction.\nEvery further appearance of InputPriceType will be ignored!\n\n\nSee \nPriceType\n\n\nUsage\n\n\nInputPriceType\n\n\n\n\nExample1\n\n\nprotected override void OnInit()\n{\nClearTraceWindow();\nInputPriceType = PriceType.Low;\n}\nprotected override void OnCalculate()\n{\n// The input data series for the indicator (InSeries) is low\nPrint(Low[0] + \" \" + InSeries[0] + \" \" + InputPriceType);\n}\n\n\n\n\nExample2\n\n\nprotected override void OnCalculate()\n{\n// These values are identical\n// since close is used as the input data series by default\nPrint(SMA(20)[0] + \" \" + SMA(Close, 20)[0]);\nInputPriceType = PriceType.Low;\n// From here on out, low is used instead of close\n// Both values are identical\nPrint(SMA(20)[0] + \" \" + SMA(Low, 20)[0]);\nInputPriceType = PriceType.High;\n// The instructions will be ignored\n// InSeries = low is still in effect\n}\n\n\n\n\nInstrument\n\n\nDescription\n\n\nWith \"instrument\", information concerning the trading instrument (stock, future etc.) is made available.\n\n\nDetailed information can be found here: \nInstruments\n.\n\n\nIsAddDrawingsToPricePanel\n\n\nDescription\n\n\nThe property \"IsAddDrawingsToPricePanel\" determines the panel in which the drawing objects are drawn.\n\n\nIsAddDrawingsToPricePanel = true (default)\n\n\n\n\nDrawing objects are shown in the price chart\n\n\nIsAddDrawingsToPricePanel = false\n\n\n\n\nDrawing objects are drawn in the panel (subchart) assigned to the indicator\n\n\nIf the indicator is already assigned to the price chart (overlay = true) then this property has no effect, meaning that no additional subchart is opened.\nThe property can be queried within the script and returns a Boolean value.\n\n\nUsage\n\n\nIsAddDrawingsToPricePanel\n\n\nExample\n\n\nprotected override void OnInit()\n{\n// Indicator is drawn in a new subchart\nIsOverlay = false;\n       AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n// Drawing object is drawn in the price chart\nIsAddDrawingsToPricePanel = true;\n}\nprotected override void OnCalculate()\n{\n// Draws a vertical line in the price chart for the bar from 5 minutes ago\nAddChartVerticalLine(\"MyVerticalLine\", 5, Color.Black);\n}\n\n\n\n\nIsAutoAdjustableScale\n\n\nDescription\n\n\nIsAutoAdjustableScale is a property of indicators that can be set within the OnInit() method.\n\n\nIsAutoAdjustableScale = true (default)\n\n\n\n\nThe price axis (y-axis) of the chart is set so that all plots and lines of an indicator are visible.\n\n\nIsAutoAdjustableScale = false\n\n\n\n\nPlots and lines of an indicator or strategy are not accounted for in the scaling of the y-axis. Therefore they may lie outside of the visible chart area.\n\n\nThis property can be queried and will return either \"true\" or \"false\".\n\n\nUsage\n\n\nIsAutoAdjustableScale\n\n\nExample\n\n\nprotected override void OnInit()\n{\n//Scale the chart so that all drawing objects are visible\nIsAutoAdjustableScale = true;\n}\n\n\n\n\nIsOverlay\n\n\nDescription\n\n\nThe overlay property defines whether the indicator outputs are displayed in the price chart above the bars or whether a separate chart window is opened below the charting area.\n\n\nIsOverlay = true\n\n\n\n\nThe indicator is drawn above the price (for example an \nSMA\n)\n\n\nIsOverlay = false (default)\n\n\n\n\nA separate chart window is opened (RSI)\n\n\nThis property can be queried within the script and outputs a value of the type Boolean (true or false).\n\n\nUsage\n\n\nIsOverlay\n\n\nExample\n\n\nprotected override void OnInit()\n{\n       AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//The indicator should be displayed within a separate window\nIsOverlay = false;\n}\n\n\n\n\nIsProcessingBarIndexLast\n\n\nDescription\n\n\nIndicates if current bar is last in calculation.\n\n\nParameter\n\n\nNone\n\n\nReturn value\n\n\nType bool\n\n\nUsage\n\n\nused for complicated calculation on a last bar\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\n            base.OnCalculate();\n            if (!IsProcessingBarIndexLast)\n                return;\n            bool isUpdated;\n}\n\n\n\n\nIsSerieRising()\n\n\nDescription\n\n\nWith this method you can check if an uptrend exists, i.e. if the current value is bigger than the previous bar\u2019s value.\n\n\nSee \nCrossAbove()\n, \nCrossBelow()\n, \nIsSerieRising()\n, \nIsSerieFalling()\n.\n\n\nUsage\n\n\nIsSerieRising(IDataSeries series)\n\n\n\n\nReturn Value\n\n\ntrue\n If the data series is rising\n\nfalse\n If the data series is not rising\n\n\nParameter\n\n\nseries A data series such as an indicator, close, high etc.\n\n\nExample\n\n\n// Check if SMA(20) is rising\nif (IsSerieRising(SMA(20)))\nPrint(\"The SMA(20) is currently rising.\");\n\n\n\n\nIsSerieFalling()\n\n\nDescription\n\n\nThe IsSerieFalling() method allows you to test whether an \"is falling\" condition exists, i.e. whether the current value is smaller than the value of the previous bar.\n\n\nSee \nCrossAbove()\n, \nCrossBelow()\n, \nIsSerieRising()\n, \nIsSerieFalling()\n.\n\n\nUsage\n\n\nIsSerieFalling(IDataSeries series)\n\n\n\n\nReturn Value\n\n\ntrue\n If the data series is falling\n\nfalse\n If the data series is not falling\n\n\nParameter\n\n\nseries a data series such as an indicator, close, high etc.\n\n\nExample\n\n\n// Check whether SMA(20) is falling\nif (IsSerieFalling(SMA(20)))\nPrint(\"The SMA(20) is currently falling.\");\n\n\n\n\nIsShowChartVerticalGrid\n\n\nDescription\n\n\nThe property IsShowChartVerticalGrid defines whether or not the regularly spaced vertical lines (the so-called grid) are shown within the charting area.\n\n\nIsShowChartVerticalGrid = true (default)\n\n\nVertical grid lines are shown\n\n\nIsShowChartVerticalGrid = false\n\n\nVertical grid lines are not shown\n\n\nThis property can be queried within the script and returns a value of the type Boolean (true or false).\n\n\nUsage\n\n\nIsShowChartVerticalGrid\n\n\nExample\n\n\nprotected override void OnInit()\n{\n       AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n// Vertical grid lines shall not be shown within the chart\nIsShowChartVerticalGrid = false;\n}\n\n\n\n\nIsShowInDataBox\n\n\nDescription\n\n\nThe property \"IsShowInDataBox\" states whether the value of an indicator is contained in the data box of the chart or not.\n\n\nThe property can be queried in the script and returns a value of the type Boolean (true or false).\n\n\nIsShowInDataBox = true (default)\n\n\n\n\nThe indicator values are displayed in the data box.\n\n\nIsShowInDataBox = false\n\n\n\n\nThe indicator values are not displayed in the data box.\n\n\nThe following image displays the values of 3 smoothed averages in the data box.\n\n\n\n\nUsage\n\n\nIsShowInDataBox\n\n\nExample\n\n\nprotected override void OnInit()\n{\n AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Values will not be shown in the data box\nIsShowInDataBox = false;\n}\n\n\n\n\nIsShowPriceMarkers\n\n\nDescription\n\n\nThe paint price markers property defines whether the so-called price markers for the indicator outputs are displayed on the right-hand chart border (in the price axis) or not. In some cases it makes sense to switch these off for a better overview in the chart.\n\nIsShowPriceMarkers = true (default)\n\n\nPrice markers are shown in the price axis\n\n\nIsShowPriceMarkers = false\n\n\nPrice markers are not shown in the price axis\n\n\nThis property can be queried within the script and returns a value of the type Boolean (true or false).\n\n\nUsage\n\n\nIsShowPriceMarkers\n\n\nExample\n\n\nprotected override void OnInit()\n{\n\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Do not show price markers in the price axis\nIsShowPriceMarkers = false;\n}\n\n\n\n\nLevel1Args\n\n\nDescription\n\n\nThe data type Level1Args represents a change in the level 1 data and is used as a parameter of the OnLevel1() function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAskSize\n\n\nCurrent order volume on the ask side\n\n\n\n\n\n\nAskPrice\n\n\nCurrent ask price\n\n\n\n\n\n\nBidSize\n\n\nCurrent order volume on the bid side\n\n\n\n\n\n\nBidPrice\n\n\nCurrent bid price.\n\n\n\n\n\n\nInstrument\n\n\nAn object of the type instrument that contains the trading instrument for which the level 1 data is outputted. See \nInstruments\n\n\n\n\n\n\nLastPrice\n\n\nLast traded price\n\n\n\n\n\n\nMarketDataType\n\n\nPotential values are: MarketDataType.Ask, MarketDataType.AskSize, MarketDataType.Bid, MarketDataType.BidSize, MarketDataType.Last, MarketDataType.Volume\n\n\n\n\n\n\nPrice\n\n\nThis is equal to last price. This field only exists for compatability reasons\n\n\n\n\n\n\nTime\n\n\nA date-time value containing the timestamp of the change\n\n\n\n\n\n\nVolume\n\n\nA long value that shows the volume\n\n\n\n\n\n\n\n\nExample\n\n\nSee \nOnLevel1()\n.\n\n\nLevel2Args\n\n\nDescription\n\n\nThe data type Level2Args represents a change in the level 2 data (market depth) and is used as a parameter within OnLevel2().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarketDataType\n\n\nPotential values are: MarketDataType.Ask, MarketDataType.Bid\n\n\n\n\n\n\nMarketMaker\n\n\nA string value containing the market maker ID\n\n\n\n\n\n\nPosition\n\n\nAn int value that defines the position within the market depth\n\n\n\n\n\n\nOperation\n\n\nRepresents the action caused by a change in the order book.   Values can be: Operation.Insert, Operation.Remove, Operation.Update\n\n\n\n\n\n\nPrice\n\n\nA double value that displays the bid/ask price\n\n\n\n\n\n\nTime\n\n\nA date-time value containing the timestamp of the change\n\n\n\n\n\n\nVolume\n\n\nA long value that shows the volume\n\n\n\n\n\n\n\n\nExample\n\n\nSee \nOnLevel2()\n.\n\n\nLevelLine()\n\n\nDescription\n\n\nA line object is used for drawing a horizontal line in the chart. Usually, these are upper and lower trigger lines for indicators such as the RSI (70 and 30).\nThe lines described here are not to be confused with lines from the drawing objects (see \"AddChartHorizontalLine\").\nLevelLine objects can be added to an indicator with the help of the Add() method, and with this, added to the lines collection.\n\n\nSee \nOutputDescriptor\n.\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor\n\n\nLevelLine color\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\nPen\n\n\nA pen object\n\n\n\n\n\n\nValue\n\n\nDefines which value on the y-axis the line will be drawn for\n\n\n\n\n\n\n\n\nUsage\n\n\nLevelLine(Color color, double value, string name)\nLevelLine(Pen pen, double value, string name)\n\n\n\n\nMore Information\n\n\nInformation on the pen class: \nhttp://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx\n\n\nExample\n\n\n// Example 1\n// A new line with standard values drawn at the value of 70\nAdd(new LevelLine(Color.Black, 70, \"Upper\"));\n// Example 2\n// A new line with self-defined values\nprivate LevelLine line;\nprivate Pen pen;\nprotected override void OnInit()\n{\n// Define a red pen with the line strength 1\npen = new Pen(Color.Red, 1);\n// Define a horizontal line at 10\nline = new LevelLine(pen, 10, \"MyLine\");\n// add the defined line to the indicator\nAdd(line);\n}\n// Example 3\n// Short form for the line in example 2\nAdd(new LevelLine(new Pen(Color.Red, 1), 10, \"MyLine\"));\n\n\n\n\nLog()\n\n\nDescription\n\n\nLog() allows you to write outputs in the AgenaTrader log file (log tab). 5 different log levels are supported.\n\n\nNote: If the log tab is not viewable, it can be displayed using the tools log.\n\n\nUsage\n\n\n**Log**(string message, LogLevel logLevel)\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nText (message)\n\n\n\n\n\n\nlogLevel\n\n\nPossible values are: InfoLogLevel.Info, InfoLogLevel.Message, InfoLogLevel.Warning, InfoLogLevel.ShowAlert, InfoLogLevel.Error\n\n\n\n\n\n\n\n\nExample\n\n\n//Tab protocol\nLog(\"This is information.\", InfoLogLevel.Info); //white\nLog(\"This is a message.\", InfoLogLevel.Message); // white\nLog(\"This is a warning.\", InfoLogLevel.Warning); // blue\nLog(\"This is an alarm.\", InfoLogLevel. ShowAlert); //green\nLog(\"This is a mistake.\", InfoLogLevel.Error); // red\n//Tab messags\nLog(\"This is a message (messages).\", InfoLogLevel.Message); //white\n//PopUp & protocoll\nLog(\"This is an alert popup window.\", InfoLogLevel.ShowAlert); //green\n\n//Output-Tab:\n//InfoLogLevel.Message = send to Tab \"Messages\" not \"Log\"\n\n//Action:\n/*\nInfoLogLevel.Error: also the AT-Status-Line is red and flashes\nInfoLogLevel.ShowAlert: opens also a modeless messagebox\n*/\n\n/*\nSummary: * - InfoLogLevel.ShowAlert Color: green Tab: Log Action: modeless Messagebox * - InfoLogLevel.Warning Color: blue Tab: Log * - InfoLogLevel.Info Color: white Tab: Log * - InfoLogLevel.Error Color: red Tab: Log Action: AT-Status-Line: red + flashing (Error) * - InfoLogLevel.Message Color: white Tab: Messages\n*/\n\n\n\n\nCrossreference:\na crossreference to Print() and ShowAlert()\n\n\nOccurred\n\n\nDescription\n\n\nThis DataSeries is used in conditions and indicates if signal occurred (1-long, -1 short, 0- no signal )\n\n\nParameter\n\n\nNone\n\n\nReturn value\n\n\nInt\n\n\nUsage\n\n\nIn scripted condition for short, long, none signal indication\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\nif ( ProcessingBarIndex %2 == 0 )\nOccurred.Set(1); // Long\nelse if ( ProcessingBarIndex %3 == 0 )\nOccurred.Set(-1); // Short\nelse\nOccurred.Set(0);\n}\n\n\n\n\nOnBarsRequirements()\n\n\nDescription\n\n\nThe OnBarsRequirements() method is called up once at the beginning of an indicator and/or strategy calculation. This method is only necessary when using multi-bars.\nWithin OnBarsRequirements, no other programming commands are executed. For initializing, the OnInit() or OnStart() method should be used.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nExample\n\n\nprotected override void OnBarsRequirements()\n{\nAdd(DatafeedHistoryPeriodicity.Day, 1);\nAdd(DatafeedHistoryPeriodicity.Week, 1);\n}\n\n\n\n\nOnInit()\n\n\nDescription\n\n\nThe OnInit() method is called up once at the beginning of an indicator or strategy calculation. This method can be used to set indicator properties, initialize your own variables, or add plots.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\nprotected override void OnInit()\n\n\n\n\nImportant Keywords\n\n\n\n\nAdd()\n\n\nAllowRemovalOfChartDrawings\n\n\nIsAutoScale\n\n\nRequiredBarsCount\n\n\nCalculateOnClosedBar\n\n\nClearTraceWindow()\n\n\nDisplacement\n\n\nIsShowInDataBox\n\n\nIsAddDrawingsToPricePanel\n\n\nInputPriceType\n\n\nIsOverlay\n\n\nIsShowPriceMarkers\n\n\nIsShowChartVerticalGrid\n\n\n\n\nAdditional Keywords for Strategies\n\n\n\n\nDefaultOrderQuantity\n\n\nEntriesPerDirection\n\n\nSetUpStopLoss()\n\n\nSetUpProfitTarget()\n\n\nSetUpTrailStop()\n\n\nTimeInForce\n\n\nTraceOrders\n\n\n\n\nMore Information\n\n\nCaution:\n\nThe OnInit() method is not only called up at the beginning of an indicator or strategy calculation, but also if the chart is reloaded unexpectedly or if the properties dialog of indicators is opened and so on.\nDevelopers of custom AgenaScripts should NOT use this method for running their own routines, opening forms, performing license checks, etc. The OnStart() method should be used for these kind of tasks.\n\n\nExample\n\n\nprotected override void OnInit()\n{\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Orange), \"Output1\"));\nClearTraceWindow();\nIsAutoScale = false;\nIsOverlay = true;\nIsShowPriceMarkers = false;\nIsShowInDataBox = false;\nCalculateOnClosedBar = true;\n}\n\n\n\n\nOutputDescriptor()\n\n\nDescription\n\n\nA plot (drawing) is used to visually display indicators in a chart. OutputDescriptor objects are assigned to an indicator with the help of the Add() method and attached to the plots collection.\nSee \nLevelLine\n.\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor\n\n\nDrawing color\n\n\n\n\n\n\nPen\n\n\nPen object\n\n\n\n\n\n\nOutputSeriesDisplayStyle\n\n\nLevelLine type: OutputSeriesDisplayStyle.Bar, OutputSeriesDisplayStyle.Block, OutputSeriesDisplayStyle.Cross, OutputSeriesDisplayStyle.Dot, OutputSeriesDisplayStyle.Hash, OutputSeriesDisplayStyle.LevelLine, OutputSeriesDisplayStyle.Square, OutputSeriesDisplayStyle.TriangleDown, OutputSeriesDisplayStyle.TriangleUp\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\nUsage\n\n\nOutputDescriptor(Color color, string name)\nOnPOutputDescriptoraint(Pen pen, string name)\nOutputDescriptor(Color color, OutputSeriesDisplayStyle plotStyle, string name)\nOutputDescriptor(Pen pen, OutputSeriesDisplayStyle plotStyle, string name)\n\n\n\n\nMore Information\n\n\nInformation on the pen class: \nhttp://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx\n\n\nExample\n\n\n// Example 1\n// OutputDescriptor with standard values (line with line strength 1)\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Orange), \"Output1\"));\n// Example 2\n// user-defined values for pen and plot style\nprivate OutputDescriptor plot;\nprivate Pen pen;\nprotected override void OnInit()\n{\n// a red pen with the line strength of 6 is defined\npen = new Pen(Color.Blue, 6);\n// a point line with a thick red pen from above is defined\npaint = new OutputDescriptor(pen, OutputSeriesDisplayStyle.Dot, \"MyPlot\");\n// The defined plot is to be used as a representation for an indicator\nAdd(paint);\n}\n// Example 3\n// Abbreviation of example 2\nprotected override void OnInit()\n{\nAdd(new OutputDescriptor(new Pen(Color.Blue, 6), OutputSeriesDisplayStyle.Dot, \"MyPlot\"));\n}\n\n\n\n\nInputParameter()\n\n\nDescription\n\n\nAttribute which used for indicator customization\n\n\nReturn Value\n\n\nNone\n\n\nParameter\n\n\nNone\n\n\nExample\n\n\n[Description(\"Period for the medium mean average\")]\n[InputParameter]\n[DisplayName(\"MA Medium\")]\npublic int MA_Medium\n{\n    get \n    { \n        return _ma_medium; \n    }\n    set\n    {\n        _ma_medium = value;\n    }\n}\n\n\n\n\nPlaySound()\n\n\nDescription\n\n\nThis method allows you to play a wav file.\n\n\nUsage\n\n\nPlaySound\n(wavFile)\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\nwavFile File name of the wav file to be played\n\n\nExample\n\n\nusing System.IO;\nstring path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\nstring file = \"\\\\\\\\AgenaTrader\\\\\\\\Sounds\\\\\\\\Alert1.wav\";\nPlaySound(path + file);\n\n\n\n\nPlotMethod\n\n\nDescription\n\n\nIn each indicator, the plot method can be overridden in order to add your own graphics (GDI+) to the price chart with the help of the graphics class (System.Drawing).\n\n\nSee \nhttp://msdn.microsoft.com/de-de/library/system.drawing.graphics.aspx\n.\n\n\nThe \nChart\n object offers several parameters.\n\n\nMore examples: \nBar Numbering\n, \nPlotSample\n, \nChart Background Image\n.\n\n\nParameter\n\n\ngraphics The graphics object of the price chart (context)\n\n\nrectangle The size of the drawing area (type \"public struct rectangle\")\n\n\ndouble min The smallest price in the y-axis\n\n\ndouble max The biggest price in the y-axis\n\n\nReturn Value\n\n\nnone\n\n\nUsage\n\n\npublic override void OutputDescriptor(Graphics graphics, Rectangle r, double min, double max)\n\n\n\n\nExample\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"Example for the usage of the plot method.\")]\npublic class PlotSample : UserIndicator\n{\nprivate StringFormat stringFormat = new StringFormat();\nprivate SolidBrush brush = new SolidBrush(Color.Black);\nprivate Font font = new Font(\"Arial\", 10);\nprotected override void OnInit()\n{\nIsChartOnlyIndicator = true;\nIsOverlay = true;\n}\nprotected override void OnCalculate()\n{}\nprotected override void OnDispose()\n{\nbrush.Dispose();\nstringFormat.Dispose();\n}\npublic override void OutputDescriptor(Graphics graphics, Rectangle r, double min, double max)\n{\n// Fill a rectangle\nSolidBrush tmpBrush = new SolidBrush(Color.LightGray);\ngraphics.FillRectangle(tmpBrush, new Rectangle (0, 0, 300, 300));\ntmpBrush.Dispose();\n// Draw a red line from top left to bottom right\nPen pen = new Pen(Color.Red);\ngraphics.AddChartLine(pen, r.X, r.Y, r.X + r.Width, r.Y + r.Height);\n// Draw a red line from bottom left to top right\n// Use anti-alias (the line appears smoother)\n// The current settings for the smoothing are saved\n// Restore after drawing\nSmoothingMode oldSmoothingMode = graphics.SmoothingMode; //Save settings\ngraphics.SmoothingMode = SmoothingMode.AntiAlias; // Use higher smoothing settings\ngraphics.AddChartLine(pen, r.X, r.Y + r.Height, r.X + r.Width, r.Y);\ngraphics.SmoothingMode = oldSmoothingMode; // Settings restored\npen.Dispose();\n// Text in the upper left corner (position 10,35)\nstringFormat.Alignment = StringAlignment.Near; // Align text to the left\nbrush.Color = Color.Blue;\ngraphics.DrawString(\"Hello world!\", font, brush, r.X + 10, r.Y + 35, stringFormat);\n// Text in the left lower corner and draw a line around it\nbrush.Color = Color.Aquamarine;\ngraphics.FillRectangle(brush, r.X + 10, r.Y + r.Height - 20, 140, 19);\n// Draw outside line\npen = new Pen(Color.Black);\ngraphics.AddChartRectangle(pen, r.X + 10, r.Y + r.Height - 20, 140, 19);\npen.Dispose();\n// Write text\nbrush.Color = Color.Red;\ngraphics.DrawString(\"Here is bottom left!\", font, brush, r.X + 10, r.Y + r.Height - 20, stringFormat);\n}\n}\n}\n\n\n\n\nPriceType\n\n\nDescription\n\n\nPrice type describes a form of price data.\n\n\nSee \nInputPriceType\n\n\nFollowing variables are available:\n-   PriceType.Close\n-   PriceType.High\n-   PriceType.Low\n-   PriceType.Median\n-   PriceType.Open\n-   PriceType.Typical\n-   PriceType.Volume\n-   PriceType.Weighted\n\n\nUsage\n\n\nPriceType\n\n\nExample\n\n\nSee \nInputPriceType\n\n\nPrint()\n\n\nDescription\n\n\nThe Print() method writes outputs in the AgenaTrader output window.\nSee \nClearTraceWindow()\n.\n\n\nUsage\n\n\nPrint(string message)\nPrint(bool value)\nPrint(double value)\nPrint(int value)\nPrint(DateTime value)\nPrint(string format, string message)\n\n\n\n\nParameter\n\n\nstring Text an individual message text\n\n\nReturn Value\n\n\nnone\n\n\nMore Information\n\n\nInformation regarding output formatting: \nFormatting numbers\n.\n\n\nHints about the String.Format() method: \nhttp://msdn.microsoft.com/de-de/library/fht0f5be%28v=vs.80%29.aspx\n\n\nExample\n\n\n// \"Quick&Dirty\" formatting of a number with 2 decimal points\nPrint(Close[0].ToString(\"0.00\"));\n// Output day of the week from the timestamp for the bar\nPrint(string.Format(\"{0:dddd}\", Time[0]));\n// An additional empty row with an escape sequence\nPrint(\"One empty row afterwards \\\\n\");\n\n\n\n\nProcessingBarIndex\n\n\nDescription\n\n\nCurrent bar is a method of indexing bars used in the OnCalculate() method. If a chart contains 500 bars and an indicator is to be calculated on the basis of these, then AgenaTrader will begin calculating from the oldest bar. The oldest bar receives the number 0. Once the calculation for this bar has been completed, the OnCalculate() method is called up for the next bar, which in turn receives the number 1. This continues until the last bar, which receives a value of 500.\n\n\nParameter\n\n\nnone\n\n\nReturn Value\n\n\nCurrent bar is a variable of the type int, which always contains the number of the bar currently being used.\n\n\nUsage\n\n\nProcessingBarIndex\n\n\nMore Information\n\n\nThe OnCalculate() method uses numbering different from that of ProcessingBarIndex in terms of the \nBarindex\n and \nBars\n. Understanding this difference is of great importance, which is why we ask you to please read the following paragraph carefully:\n\n\nProcessingBarIndex numbers continuously from the oldest to youngest bar starting with 0. The BarIndex for the youngest bar is always 0. In the example referenced below this paragraph, Time[0] stands for the timestamp of the current bar. The index of the oldest bar always has 1 added to it. Thus a logical numbering of barsAgo is possible. The timestamp for the bar of 5 periods ago is Time[5].\nFor using multiple timeframes (multi-bars) in an indicator, see ProcessingBarIndexes.\n\n\nExample\n\n\nprotected override void OnCalculate()\n{\nPrint(\"Call of OnCalculate for bar nr. \" + ProcessingBarIndex + \" of \" + Time[0]);\n}\n\n\n\n\nRemoveChartDrawing()\n\n\nDescription\n\n\nThe RemoveChartDrawing() method removes a specific drawing object from the chart based on a unique identifier (tag).\nSee \nRemoveChartDrawings()\n.\n\n\nUsage\n\n\nRemoveChartDrawings(string tag)\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\nstring tag The clearly identifiable name for the drawing object\n\n\nExample\n\n\nRemoveChartDrawings(\"My line\");\n\n\n\n\nRemoveChartDrawings()\n\n\nDescription\n\n\nThis method removes all drawings from the chart\nSee \nRemoveChartDrawings()\n.\n\n\nUsage\n\n\nRemoveChartDrawings()\n\n\nReturn Value\n\n\nnone\n\n\nExample\n\n\n//Delete all drawings from the chart\nRemoveChartDrawings();\n\n\n\n\nRequiredBarsCount\n\n\nDescription\n\n\nThe property \"RequiredBarsCount\" determines how many historical bars are required for an indicator or a strategy to call up the OnCalculate() method for the first time and thus begin the calculations. Bars required should be set within the OnInit() method.\nThe setting should be chosen carefully. If you require 100 days for the calculation of a moving average, then you should ensure that at least 100 days of historical data are loaded.\nThe property can be queried in the script and will return an int value.\n\n\nWhen OnCalculate is called up for the first time, the ProcessingBarIndex property is 0 regardless of the value of RequiredBarsCount.\n\n\nUsage\n\n\nRequiredBarsCount\n\n\nExample\n\n\nprotected override void OnInit()\n{\n//The indicator requires a minimum of 50 bars loaded into the history\nRequiredBarsCount = 50;\n}\n\n\n\n\nShowAlert()\n\n\nDescription\n\n\nThe ShowAlert method creates an acoustic and/or visual alarm.\n\n\nUsage\n\n\nShowAlert(string message, bool showMessageBox, string soundLocation);\n//Due to compatability reasons, an old signature is still used here. When using this method, the color settings and the \"re-arm seconds\" parameter are ignored.\nShowAlert(string id, AlertPriority priority, string message, string soundLocation, int rearmSeconds, Color backColor, Color forColor);\n\n\n\n\nReturn Value\n\n\nNone\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nAlert text displayed within the messages tab\n\n\n\n\n\n\nsoundLocation\n\n\nName of a sound file in the *.wav format. If no path is specified, then \"My Documents\\AgenaTrader\\Sounds\\ is used\n\n\n\n\n\n\nshowMessageBox\n\n\nIf set to \"true\", a message box will be displayed in addition to the sound\n\n\n\n\n\n\n\n\nExample\n\n\n// Message will be outputted if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nAlert(\"Check short signal!\", true, \"Alert4.wav\");\n\n\n\n\nTo use music files in a different path, you need to specify the path:\n\n\nstring pathOfSoundfile = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)+@\"\\\\MyAlertSounds\\\\\";\nstring nameOfSoundFile = \"MyAlertSoundFile.wav\";\nAlert(\"Message text\", true, pathOfSoundfile + nameOfSoundFile);\n\n\n\n\nTickSize\n\n\nA tick is the smallest possible price change of a financial instrument within an exchange. If, for example, the trading prices are specified to 2 decimal places, then a tick equals 0.01. You can expect Forex instruments to be specified to within 4 or 5 decimal places. A tick is called a pip in Forex trading and usually equals 0.0001 or 0.00001.\nThe tick value is usually predefined by the exchange and does not (usually) change.\nSee \nInstrument.TickSize\n.\n\n\nUsually, a tick is displayed as a decimal number. Historically speaking (especially in American exchanges) stocks have been noted with tick sizes of 1/16 of a dollar.\nThis notation is still widespread within commodities. Corn futures (ZC) are noted in \u00bc US cents/bushel (usually equals 12.50 US$ per contract).\nUS treasury bonds are noted in a tick size of 1/32 points, which equals 31.25$.\nNotations are usually made with apostrophes, for example:\n\n\n149'00 equals exactly 149,\n149'01 equals 149 1/32 (meaning 149.03125),\n149'31 equals 149 31/32 (149.96875),\nand the next value after this is 150\u201900\n\n\nIn the so-called T-Bond intermonth spreads, notations are specified in quarters of 1/32, resulting in point values of 7.8125 per contract.\n\n\nNotations have a dash:\n\n\n17-24 equals 17 24/32 points,\n17-242 equals 17 24.25/32 points,\n17-245 equals 17 24.5/32 points and\n17-247 equals 17 24.75/32 points.\nThe next notation after 17-247 is 17-25 and then 17-252, 17-255 etc.\nAfter 17-317 comes 18.\n\n\nThe individual contract specifications can be found on the websites of the respective exchanges.\n\n\nCME: \nhttp://www.cmegroup.com\n under Products & Trading\nEurex (FDAX): \nhttp://www.eurexchange.com/exchange-en/products/idx/dax/17206/\n\n\nSee \nInstrument.TickSize\n.\n\n\nTimeFrame\n\n\nSee \nBars.TimeFrame\n.\n\n\nWhen using multiple timeframes (\nMultibars\n) in an indicator, please see \nTimeFrames\n.\n\n\nUpdate()\n\n\nDescription\n\n\nThe Update() method calls up the OnCalculate method in order to recalculate the indicator values.\n\n\nUpdate() is to be used with caution and is intended for use by experienced programmers.\n\n\nUsage\n\n\nUpdate()\n\n\n\n\nReturn Value\n\n\nnone\n\n\nParameter\n\n\nnone\n\n\nExample\n\n\nThe effect of update can be illustrated with the help of 2 indicators.\nThe first indicator, Ind1, uses a public variable from the indicator Ind2.\n\n\nCode from Ind1:\n\n\npublic class Ind1 : UserIndicator\n{\nprotected override void OnCalculate()\n{\nPrint( Ind2().MyPublicVariable );\n}\n}\n\n\n\n\nCode from Ind2:\n\n\nprivate double myPublicVariable = 0;\nprotected override void OnCalculate()\n{\nmyPublicVariable = 1;\n}\npublic double MyPublicVariable\n{\nget\n{\nUpdate();\nreturn myPublicVariable;\n}\n}\n\n\n\n\nWithout Update() - Wrong\n\nIf Ind2 is called up by Ind1, the get-method of MyPublicVariable is called up in Ind2. Without Update(), the value of MyPublicVariable would be returned. In this case it would be 0.\n\n\nWith Update() - Correct\n\nBy calling up Update(), OnCalculate() is initially executed by Ind2. This sets MyPublicVariable to 1. Lastly, the value 1 is passed on to the requesting indicator.\n\n\nValue\n\n\nDescription\n\n\nValue is a data series object containing the first data series of an indicator.\n\n\nWhen the Add() method is called up, a value object is automatically created and added to the values collection.\n\n\nValue is identical to Values[0].\n\n\nUsage\n\n\nValue\n\n\nValue[\nint\n barsAgo]\n\n\nMore Information\n\n\nThe methods known for a collection, Set(), Reset(), and Count(), can be used for values.\n\n\nExample\n\n\nSee \nValues\n.",
            "title": "Keywords"
        },
        {
            "location": "/keywords/#keywords",
            "text": "",
            "title": "Keywords"
        },
        {
            "location": "/keywords/#addoutput",
            "text": "",
            "title": "AddOutput()"
        },
        {
            "location": "/keywords/#addline",
            "text": "",
            "title": "AddLine()"
        },
        {
            "location": "/keywords/#description",
            "text": "The add method allows you to add plots or line objects to the chart. When a new plot object is added using Add(), this automatically creates a data series of the type DataSeries, which is attached to this object. The value collection allows you to reference and access this data series.\nAdd () can be used with the OnInit() and the OnCalculate() methods.",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter",
            "text": "plot \u2013 a  OutputDescriptor  object\nline \u2013 a  LevelLine  object",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage",
            "text": "AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\nAdd(LevelLine line)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example",
            "text": "#region Usings\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\n#endregion\nnamespace AgenaTrader.UserCode\n{\n  [Description(\"Enter the description for the new custom indicator here\")]\n  public class MyIndicator : UserIndicator\n  {\n    protected override void OnInit()\n    {\n    // Two blue lines will be placed into the chart, one at 70 and the other at 30\n    AddLine(new LevelLine(Color.Blue, 70, \"UpperLine\"));\n    AddLine(new LevelLine(Color.Blue, 30, \"LowerLine\"));\n\n    // Add 2 plots\n    AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Red), \"FastSMA\"));\n    AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Blue), \"SlowSMA\"));\n    }\n\n    protected override void OnCalculate()\n    {\n    //The set method is assigned to the value of the current bar\n    FastSMA.Set( SMA(8)[0] ); // is identical with Outputs[0].Set( SMA(8)[0] );\n    SlowSMA.Set( SMA(50)[0] ); // is identical with Outputs[1].Set( SMA(50)[0] );\n    }\n\n    // Two data series are made available here\n    // These are not necessary for the display of the indicator // With the help of these series, one indicator can access the other\n    // For example: double d = MyIndicator.FastSMA[0] - MyIndicator.SlowSMA[0];\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries FastSMA\n    {\n      get { return Outputs[0]; }\n    }\n\n    [Browsable(false)]\n    [XmlIgnore()]\n    public DataSeries SlowSMA\n    {\n      get { return Outputs[1]; }\n    }\n  }\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#allowremovalofchartdrawings",
            "text": "",
            "title": "AllowRemovalOfChartDrawings"
        },
        {
            "location": "/keywords/#description_1",
            "text": "\"AllowRemovalOfChartDrawings\" is a property of indicators that can be set under  OnInit() .  AllowRemovalOfChartDrawings = true  Drawing objects that are drawn by an indicator or a strategy can be manually removed from the chart.  AllowRemovalOfChartDrawings = false (default)  Drawing objects that have been created by a strategy or indicator CANNOT be manually removed from the chart. They are removed once the indicator or strategy is removed.  This property can be queried and will return \"true\" or \"false\".",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_1",
            "text": "AllowRemovalOfChartDrawings",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_1",
            "text": "protected override void OnInit()\n{\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Drawing objects can be manually removed from the chart\nAllowRemovalOfChartDrawings = true;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#attribute",
            "text": "Attribute is a component of the C# language. Within AgenaScript, indicators, and strategies, you can use these attributes in the same manner as you would in C#.\nInformation regarding the usage of attributes can be found here:  http://msdn.microsoft.com/de-de/library/z0w1kczw%28v=vs.80%29.aspx  The most commonly used attributes in AgenaScript are:   Browsable  Category  ConditionalValue  Description  DisplayName  TimeFrameRequirements  XmlIgnore",
            "title": "Attribute"
        },
        {
            "location": "/keywords/#browsable",
            "text": "Browsable is an  Attribute  within AgenaScript.  AgenaScript uses public variables for entering parameters for indicators (such as periods for the SMA) and for outputting events and calculations within indicators (for example, data series).\nVariables used for entering parameters must be displayed in the properties dialog. Data series are exempt from this.\nPublic variables with the browsable attribute set to false are not displayed within the properties dialog.  By default, browsable is set to true. Therefore, within a variable containing an entry parameter, the attribute does not need to be specified.  Example for a parameter:  The parameter should be displayed and queried in the properties window. Therefore browsable should be set to true.  [Description(\"Numbers of bars used for calculations\")]\n[Category(\"InputParameter\")]\npublic int Period\n{\nget { return period; }\nset { period = Math.Max(1, value); }\n}  Example for a data series:  [Browsable(false)]\n[DisplayName(\"Lower band\")]\n[XmlIgnore]\npublic DataSeries Lower\n{\nget { return Outputs[0]; }\n}",
            "title": "Browsable"
        },
        {
            "location": "/keywords/#category",
            "text": "Category is an  Attribute  in AgenaScript and can be used on properties and classes.  The category attribute on properties defines under which category in the properties dialog the parameter is shown.\nIf this attribute is missing, the parameters category is accepted as the standard.  The following example shows how to create the new category \"My InputParameter\" in the properties dialog:  [Category(\"My InputParameter\")]\n[DisplayName(\"Period number\")]\npublic double _period\n{\nget { return _period; }\nset { _period = value; }\n}   If you use the category  Attribute  on classes you are able to create subcategories for your scripts and group them all in one category.\nThis is pretty useful if you are creating a package and you want to group a few indicators in a group with one name.  The following example shows how to create a subfolder \"My Package\":  namespace AgenaTrader.UserCode\n{\n    [Description(\"Description what this indicator doing.\")]\n    [Category(\"My Package\")]\n    public class MyHolyGrail_Indicator : UserIndicator\n    {\n      /* your code here */\n    }\n}",
            "title": "Category"
        },
        {
            "location": "/keywords/#conditionalvalue",
            "text": "Conditional value is an  Attribute  in AgenaScript.  Normally, when making comparisons within the ConditionEscort, the data series generated by indicators are used. One such example would be checking whether a moving average lies above or below a specific price value.\nAn indicator can also yield values that are not contained within data series, such as values of the type int, double, char, Boolean, string, etc.\nTo use these values within the scanner or ConditionEscort, they have to be labeled with the conditional value attribute.  [Browsable(false)]\n[XmlIgnore]\n[ConditionalValue]\npublic int PublicVariable\n{\nget\n{\nUpdate();\nreturn _internVariable;\n}\n}",
            "title": "ConditionalValue"
        },
        {
            "location": "/keywords/#description_2",
            "text": "Description is an  Attribute  in AgenaScript.  The description attribute is used in AgenaScript for classes and public variables.\nAs an attribute of the class, the text is a description of the function of the entire indicator.  [Description(\"Displays the tick count of a bar.\")]\npublic class TickCounter : UserIndicator\n{\n//As an attribute of a public variable, the text is a description of the function of the parameter.\n[Description(\"Number of standard deviations\")]\n[DisplayName(\"# of std. dev.\")]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}\n}  The descriptions are displayed in the relevant properties dialog.",
            "title": "Description"
        },
        {
            "location": "/keywords/#displayname",
            "text": "Display name is an  Attribute  in AgenaScript.  The display name attribute defines the text shown in the properties dialog for the parameter.  If this attribute is not specified, the name of the public variable is used.  [Description(\"Number of standard deviations\")]\n[DisplayName(\"# of std. dev.\")]\npublic double NumStdDev\n{\nget { return numStdDev; }\nset { numStdDev = Math.Max(0, value); }\n}",
            "title": "DisplayName"
        },
        {
            "location": "/keywords/#timeframerequirements",
            "text": "Timeframe requirements is an  Attribute  in AgenaScripts.  If you want a script to use data from various timeframes, the class requires the attribute \u201eTimeFrameRequirements\". You can specify multiple timeframes here:  [TimeFrameRequirements(\"1 day\")]\n[TimeFrameRequirements(\"15 minutes\", \"1 day\", \"1 week\")]  The amount of data provided for the other timeframes will always be the same as the number of actual candles loaded into the chart. If there are 500 candles for a 5-minute chart, then 500 candles of another timeframe will also be loaded. In the first example above, 500 daily candles will be loaded. In the second example, 500 15-minute candles, 500 daily candles and 500 weekly candles will be loaded.\nThe amount of data can become rather large very quickly, thus you should take precautions when using this attribute.  See  MultiBars .  Important:  If a class uses a different indicator that requires one or more secondary timeframes, then the \"TimeFrameRequirements\" attribute must be set for the class retrieving the data. An example for this can be seen here:  GetDayBar .",
            "title": "TimeFrameRequirements"
        },
        {
            "location": "/keywords/#xmlignore",
            "text": "XML ignore is an  Attribute  in AgenaScript.  AgenaTrader saves all parameter settings for the indicators in a template. The template files are saved in an XML format. In order to avoid a parameter being saved as part of the template, the attribute XML ignore can be set.  To save parameters in an XML file, the values must be serialized. Under most circumstances, AgenaTrader performs this automatically. Self-defined data types cannot be serialized automatically, so in this case the programmer is responsible for the correct serialization.\nIn the following example, the color and font are used as parameters of an indicator. AgenaTrader has two methods for serializing color and font information (TextColorSerialize and TextFontSerialize). Both parameters \u2013 TextColor and TextFont \u2013 thus need to be marked with the XML ignore parameter.  private Color _textColor = Color.Blue;\nprivate Font _textFont = new Font(\"Arial\", 12, FontStyle.Bold);\n[XmlIgnore]\n[Description(\"Textcolor\")]\npublic Color TextColor\n{\nget { return _textColor; }\nset { _textColor = value; }\n}\n[Browsable(false)]\npublic string TextColorSerialize\n{\nget { return SerializableColor.ToString(_textColor); }\nset { _textColor = SerializableColor.FromString(value); }\n}\n[XmlIgnore()]\n[Description(\"TextFont\")]\npublic Font TextFont\n{\nget { return _textFont; }\nset { _textFont = value; }\n}\n[Browsable(false)]\npublic string TextFontSerialize\n{\nget { return SerializableFont.ToString(_textFont); }\nset { _textFont = SerializableFont.FromString(value); }\n}",
            "title": "XMLIgnore"
        },
        {
            "location": "/keywords/#calculateonclosedbar",
            "text": "",
            "title": "CalculateOnClosedBar"
        },
        {
            "location": "/keywords/#description_3",
            "text": "The property \"CalculateOnClosedBar\" determines the events for which AgenaTrader can call up the OnCalculate() method.  CalculateOnClosedBar = true  OnCalculate()  is called up when a bar is closed and the next incoming tick creates a new bar.  CalculateOnClosedBar = false  OnCalculate() is called up for each new incoming tick.\nIf you are running AgenaTrader on older hardware, this may cause performance issues with instruments that are highly liquid.\nThe property can be queried in the script and will return a value of the type Boolean (true or false).\nCalculateOnClosedBar can be used within OnInit() and also within OnCalculate().\nOnCalculate is only called up for the closing price of each bar with historical data, even if CalculateOnClosedBar is set to false.\nWhen an indicator is called up by another indicator, the CalculateOnClosedBar property of the retrieved indicator overwrites the indicator performing the retrieving.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_2",
            "text": "CalculateOnClosedBar",
            "title": "Usage"
        },
        {
            "location": "/keywords/#more-information",
            "text": "See  Bars .",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_2",
            "text": "protected override void OnInit()\n{\n//Indicator calculation should only occur when a bar has closed/finished\nCalculateOnClosedBar = true;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#chart",
            "text": "Chart control is an object that provides reading access of various properties for the chart.  The important properties are:   ChartFontColor, BackColor  UpColor, DownColor  Font  BarMarginLeft, BarMarginRight  BarSpace, BarWidth  BarsPainted  FirstBarPainted, LastBarPainted  BarsVisible  FirstBarVisible, LastBarVisible  GetXByBarIdx, GetYByValue   An example can be seen here:  PlotSample .  BarsPainted und BarsVisible:  BarsPainted contains the number of bars that a chart  could  display from the left to right border with the current width and distance of the candles.\nBarsVisible contains the number of bars actually visible.  FirstBarPainted und FirstBarVisible:  FirstBarPainted contains the number of the bar that  would  be displayed on the left border of the chart.  FirstBarVisible contains the number of the bar that is actually shown as the first bar on the left side of the chart area.  Example: the chart has been moved so that the first bar of the chart is now in the middle of the chart.  FirstBarPainted would be negative.  FirstBarVisible would be 0.  LastBarPainted und LastBarVisible:  LastBarPainted contains the number of the bar that  would  be displayed on the right border of the chart.  LastBarVisible contains the number of the bar that is actually displayed on the right side of the chart.  Example: the chart has been moved so that the last bar of the chart is displayed in the middle section.  LastBarPainted would be larger than Bars.Count.  LastBarVisible would be Bars.Count -1.",
            "title": "Chart"
        },
        {
            "location": "/keywords/#cleartracewindow",
            "text": "",
            "title": "ClearTraceWindow()"
        },
        {
            "location": "/keywords/#description_4",
            "text": "The ClearTraceWindow() method empties the output window. The method can be used within OnInit() as well as within OnCalculate().\nThe output window contains all outputs that have been created with the  Print()  command.\nUsing the output window is a great method for code debugging.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_3",
            "text": "ClearTraceWindow()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#parameter_1",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#example_3",
            "text": "protected override void OnInit()\n{\n// Delete the content of the output window\nClearTraceWindow();\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#colors",
            "text": "AgenaScript provides you with the following commands for defining colors and making color changes to the chart:  BarColor  Color of a bar  BackColor  Background color of the chart  BackColorAll  Background color of the chart and all panels  Chart.UpColor Color of up ticks (up bars)\nChart.DownColor Color of down ticks (down bars)  For each bar, its colors are saved in the following data series. If these data series are written in, the color of the referenced bar will change.  BarColorSeries  CandleOutlineColorSeries  BackColorSeries  BackColorAllSeries",
            "title": "Colors"
        },
        {
            "location": "/keywords/#backcolor",
            "text": "",
            "title": "BackColor"
        },
        {
            "location": "/keywords/#description_5",
            "text": "Back color changes the background color of a bar or gives the current background color of a bar when queried.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_2",
            "text": "A color object of the type \"public struct color\"",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_4",
            "text": "BackColor",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_4",
            "text": "// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColor = Color.Blue;   // Changing the bar background color depending on a smoothing average\n// Market price above the SMA(14) to green\n// Market price below the SMA(14) to maroon\nBackColor = SMA(14)[0] >= Close[0] ? Color.Maroon : Color.LimeGreen;",
            "title": "Example"
        },
        {
            "location": "/keywords/#backcolorall",
            "text": "",
            "title": "BackColorAll"
        },
        {
            "location": "/keywords/#description_6",
            "text": "Back color all changes the background color of a bar within the chart window and in all subcharts.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_3",
            "text": "A color object of the type \"public struct color\"",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_5",
            "text": "BackColorAll",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_5",
            "text": "// Every Monday, change the bar background color to blue\nif (Time[0].DayOfWeek == DayOfWeek.Monday)\nBackColorAll = Color.Blue;",
            "title": "Example"
        },
        {
            "location": "/keywords/#backcolorallseries",
            "text": "",
            "title": "BackColorAllSeries"
        },
        {
            "location": "/keywords/#description_7",
            "text": "Back color all series is a data series containing the background color for each bar. The difference to BackColorSeries is that the background color of the subchart is included.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_4",
            "text": "a color object of the type \"public struct color\"  int barsAgo",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_6",
            "text": "BackColorAllSeries\nBackColorAllSeries[int barsAgo]  When using the method with an index [ int  barsAgo] the background color for the referenced bar will be changed or returned.",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_6",
            "text": "See  BackColorSeries .",
            "title": "Example"
        },
        {
            "location": "/keywords/#backcolorseries",
            "text": "",
            "title": "BackColorSeries"
        },
        {
            "location": "/keywords/#description_8",
            "text": "Back color series is a data series containing the background color for each bar. If the background color for the subcharts is to be included, please use \"BackColorAllSeries\" instead.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_5",
            "text": "a color object of the type \"public struct color\"  int barsAgo",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_7",
            "text": "BackColorSeries\nBackColorSeries[int barsAgo]  When using this method with an index [ int  barsAgo] the background color for the referenced bar will be outputted.",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_7",
            "text": "// Which background color does the current bar have?\nPrint (BackColorSeries[0]);\n// Set the current bar\u2019s background color to blue\n// This is identical to BackColor = Color.Blue\nBackColorSeries[3] = Color.Blue;\n// Set background color for the previous bar to green\nBackColorSeries[1] = Color.Green;",
            "title": "Example"
        },
        {
            "location": "/keywords/#barcolor",
            "text": "",
            "title": "BarColor"
        },
        {
            "location": "/keywords/#description_9",
            "text": "Bar color changes the color of a bar.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_6",
            "text": "a color object of the type \"public struct color\"",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_8",
            "text": "BarColor",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_8",
            "text": "// If the closing price is above the SMA(14), color the bar orange\nif (Close[0] > SMA(14)[0]) BarColor = Color.Orange;",
            "title": "Example"
        },
        {
            "location": "/keywords/#barcolorseries",
            "text": "",
            "title": "BarColorSeries"
        },
        {
            "location": "/keywords/#description_10",
            "text": "Bar color series is a data series containing the color for each bar.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_7",
            "text": "a color object of the type \"public struct color\"  int barsAgo",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_9",
            "text": "BarColorSeries  BarColorSeries[ int  barsAgo]  When using the method with an index [ int  barsAgo] the color for the referenced bar will be changed or returned.  Caution: Only the color of a bar whose color has been explicitly changed beforehand will be returned. In all other cases, the \"Color.Empty\" value will be returned.",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_9",
            "text": "protected override void OnCalculate()\n{\nif (ProcessingBarIndex == Bars.Count-1-(CalculateOnClosedBar?1:0))\n{\n// Color the current bar blue\n// This is identical to BarColor = color.Blue\nBarColorSeries[0] = Color.Blue;\n// Color the previous bars green\nBarColorSeries[1] = Color.Orange;\n// Color the third bar yellow\nBarColorSeries[2] = Color.Yellow;\n}\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#candleoutlinecolor",
            "text": "",
            "title": "CandleOutlineColor"
        },
        {
            "location": "/keywords/#description_11",
            "text": "Candle outline color changes the border/outline color (including the wick) of a bar.  If the color of the bar is changed using BarColor and the outline is not changed using CandleOutlineColor, the outline color is adjusted to match the color of the bar.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_8",
            "text": "a color object of the type \"public struct color\"",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_10",
            "text": "CandleOutlineColor",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_10",
            "text": "if (SMA(14)[0] > SMA(200)[0])\nCandleOutlineColor = Color.LimeGreen;\nelse\nCandleOutlineColor = Color.Red;",
            "title": "Example"
        },
        {
            "location": "/keywords/#candleoutlinecolorseries",
            "text": "",
            "title": "CandleOutlineColorSeries"
        },
        {
            "location": "/keywords/#description_12",
            "text": "Candle outline color series is a data series that saves the outline color for each bar.  See  Colors ,  BarColor ,  BackColor ,  BackColorAll ,  BarColorSeries ,  BackColorAll ,  CandleOutlineColor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_9",
            "text": "a color object of the type \"public struct color\"  int barsAgo",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_11",
            "text": "CandleOutlineColorSeries\nCandleOutlineColorSeries[int barsAgo]  When using this method with an index [ int  barsAgo] the border color for the referenced bar will be outputted.  Caution: Color.Empty will be outputted for a bar unless it has been previously changed.",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_11",
            "text": "// Set the outline color of the current bar to blue\nCandleOutlineColorSeries[0] = Color.Blue;\n// Change the outline color to the chart default value\nCandleOutlineColorSeries[0] = Color.Empty;",
            "title": "Example"
        },
        {
            "location": "/keywords/#crossabove",
            "text": "",
            "title": "CrossAbove()"
        },
        {
            "location": "/keywords/#description_13",
            "text": "The CrossAbove() method allows you to check whether a crossing of two values has occurred (from bottom to top) within a predefined number of periods. The values can be a market price, an indicator, a data series or a constant value.  See  CrossAbove() ,  CrossBelow() ,  IsSerieRising() ,  IsSerieFalling() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_12",
            "text": "CrossAbove(IDataSeries series1, double value, int lookBackPeriod)\nCrossAbove(IDataSeries series1, IDataSeries series2, int lookBackPeriod)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_1",
            "text": "true  a cross has occurred false  a cross has not occurred",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_10",
            "text": "lookBackPeriod  Number of bars within which a cross will be searched for    series1 und series2  A data series such as an indicator, close, high, etc.    value  A constant value of the type double",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_12",
            "text": "// Puts out a notice if the SMA(20) crosses above the SMA(50)\nif (CrossAbove(SMA(20), SMA(50), 1))\nPrint(\"SMA(20) has risen above SMA(50)!\");\n// Puts out a notice if the SMA(20) crosses above the value of 40\nif (CrossAbove(SMA(20), 40, 1))\nPrint(\"SMA(20) has risen above 40!\");\n// Put out a notice for a long entry if the SMA(20) has crossed above the SMA(50) within the last 5 bars.\nif (CrossAbove(SMA(20), SMA(50), 1) && Close[0] > Close[1])\nPrint(\"Long entry !!!\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#crossbelow",
            "text": "",
            "title": "CrossBelow()"
        },
        {
            "location": "/keywords/#description_14",
            "text": "Using the CrossBelow() method, you can test whether or not a cross below has occurred within a predefined number of periods. The values can be the market price, an indicator, any data series, or a constant value.  See  CrossAbove() ,  CrossBelow() ,  IsSerieRising() ,  IsSerieFalling() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_13",
            "text": "CrossBelow(IDataSeries series1, double value, int lookBackPeriod)\nCrossBelow(IDataSeries series1, IDataSeries series2, int lookBackPeriod)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_2",
            "text": "true  a cross has occurred false  a cross has not occurred",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_11",
            "text": "lookBackPeriod  Number of Bars within which a cross will be searched for    series1 und series2  A data series such as an indicator, close, high etc.    value  A constant value of the type double",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_13",
            "text": "// Puts out a notice if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nPrint(\"SMA(20) has fallen below SMA(50)!\");\n// Puts out a notice if the SMA(20) falls below the value of 40\nif (CrossBelow(SMA(20), 40, 1))\nPrint(\"SMA(20) has fallen below 40!\");\n// Puts out a notice for a short entry if a crossing of the SMA(20) below the SMA(50) has occurred within the last 5 bars.\n.\nif (CrossBelow(SMA(20), SMA(50), 1) \n&& Instrument.Compare(Close[1], Close[0]) > 1)\nPrint(\"Short entry !!!\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#datafeedhistoryperiodicity",
            "text": "",
            "title": "DatafeedHistoryPeriodicity"
        },
        {
            "location": "/keywords/#description_15",
            "text": "Datafeed history periodicity is a data type.",
            "title": "Description"
        },
        {
            "location": "/keywords/#definition",
            "text": "public enum DatafeedHistoryPeriodicity\n-   DatafeedHistoryPeriodicity.Tick\n-   DatafeedHistoryPeriodicity.Second\n-   DatafeedHistoryPeriodicity.Minute\n-   DatafeedHistoryPeriodicity.Hour\n-   DatafeedHistoryPeriodicity.Day\n-   DatafeedHistoryPeriodicity.Week\n-   DatafeedHistoryPeriodicity.Month\n-   DatafeedHistoryPeriodicity.Volume\n-   DatafeedHistoryPeriodicity.Range\n-   DatafeedHistoryPeriodicity.Quarter\n-   DatafeedHistoryPeriodicity.Year\n-   DatafeedHistoryPeriodicity.HeikinAshi\n-   DatafeedHistoryPeriodicity.Renko\n-   DatafeedHistoryPeriodicity.LineBreak\n-   DatafeedHistoryPeriodicity.Kagi\n-   DatafeedHistoryPeriodicity.PointAndFigure\n-   DatafeedHistoryPeriodicity.Custom  See  TimeFrame ,  TimeFrames .",
            "title": "Definition"
        },
        {
            "location": "/keywords/#dataseries",
            "text": "",
            "title": "DataSeries"
        },
        {
            "location": "/keywords/#description_16",
            "text": "Data series (data rows) are an easy yet powerful method of saving additional values for individual bars. For example, when calculating the smoothing average, each bar is assigned the value calculated for this bar.\nA data series is an array that contains as many elements as there are bars displayed in a chart. AgenaTrader ensures that data series are correctly synchronized with the bars.\nData series are used in exactly the same way as the close or time series. They can therefore also be used for the input data for various indicators.\nIn the table below you will find 4 newly created data series (highlighted). Each data series has exactly one value of a special data type (int, bool, string) attached to it per bar. The indexing with barsAgo is thus identical to the data series provided by the system.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usable-data-series-in-agenatrader",
            "text": "BoolSeries  DataSeries  DateTimeSeries  FloatSeries  IntSeries  LongSeries  StringSeries  In addition, there are also data series such as ColorSeries, although these are only used for internal purposes and should not be used directly.\nTo change the color of plots, please use  PlotColors .",
            "title": "Usable Data Series in AgenaTrader"
        },
        {
            "location": "/keywords/#set-reset-und-containsvalue",
            "text": "Each data series contains a  Set() ,  Reset()  and  ContainsValue()  method.\nWith Set(value) or Set(int barsAgo, value) you can place values into the data series for the current position, or in this case into the barsAgo position.\nWith Reset() or Reset(int barsAgo) you can delete a value from the data series for the current position or for the barsAgo position. This has the result that no valid value exists at this position any more.\nProgramming with the help of the reset method can simplify otherwise complex logic. This is especially true for Boolean series, where only \"true\" or \"false\" values can be included.\nThe ContainsValue() checks whether a data series has a value for a specific position.",
            "title": "Set(), Reset() und ContainsValue()"
        },
        {
            "location": "/keywords/#information-about-data-types",
            "text": "http://msdn.microsoft.com/de-de/library/s1ax56ch%28v=vs.80%29.aspx",
            "title": "Information about Data Types"
        },
        {
            "location": "/keywords/#boolseries",
            "text": "",
            "title": "BoolSeries"
        },
        {
            "location": "/keywords/#description_17",
            "text": "Bool series is a data series that contains a Boolean value for each bar. The number of elements in this series correlates with the exact number of bars within the chart.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-new-bool-series",
            "text": "In the area for the declaration of variables, simply declare a new variable:  //Variable declaration\nprivate BoolSeries myBoolSeries;  With the OnInit() method, this variable assigns a new instance of the Bool series:  protected override void OnInit()\n{\nmyBoolSeries = new BoolSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create New Bool Series"
        },
        {
            "location": "/keywords/#assign-values",
            "text": "Assigning a value to the data series for the current position:  myBoolSeries.Set(true);  Writing a value in the past into the data series:  myBoolSeries.Set(int barsAgo, bool Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values",
            "text": "Removing the current value for the data series:  myBoolSeries.Reset();  Removing a value in the past from the data series:  myBoolSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity",
            "text": "myBoolSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value",
            "text": "Print (\"For the bar of \" + Time[0] + \" ago the value of the data series is: \" + myBoolSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_14",
            "text": "protected override void OnCalculate()\n{\nif (Close[0] > Open[0])\nmyBoolSeries.Set(true);\nelse\nmyBoolSeries.Set(false);\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#dataseries_1",
            "text": "",
            "title": "DataSeries"
        },
        {
            "location": "/keywords/#description_18",
            "text": "Data series is a  DataSeries  that can contain a double value for each bar. The number of elements in this series corresponds to the exact number of bars within the charts.  Data series for double values are the data series most commonly used for indicators.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-a-new-data-series",
            "text": "In the declaration area for variables:  //Variable declaration\nprivate DataSeries myDataSeries;  With the OnInit() method, this variable is assigned a new instance:  protected override void OnInit()\n{\nmyDataSeries = new DataSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create a New Data Series"
        },
        {
            "location": "/keywords/#assign-values_1",
            "text": "Assigning a value to the data series for the current position:  myDataSeries.Set(Bars[0].Close);  Writing a value in the past into the data series:  myDataSeries.Set(int barsAgo, double Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values_1",
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value in the past from the data series:  myDataSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity_1",
            "text": "myDataSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value_1",
            "text": "Print (\"For the bar from \" + Time[0] + \" ago the value for the data series is: \" + myDataSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_15",
            "text": "//Saves the span between the high and low of a bar\nmyDataSeries.Set(Math.Abs(High[0]-Low[0]));",
            "title": "Example"
        },
        {
            "location": "/keywords/#datetimeseries",
            "text": "",
            "title": "DateTimeSeries"
        },
        {
            "location": "/keywords/#description_19",
            "text": "Date time series is a  DataSeries  that can record a date time value for each bar. The number of elements in this series corresponds to the number of bars in the chart.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-a-new-data-series_1",
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate DateTimeSeries myDataSeries;  Assign a new instance of DateTimeSeries for the variable with the OnInit() method:  protected override void OnInit()\n{\nmyDataSeries = new DateTimeSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create a New Data Series"
        },
        {
            "location": "/keywords/#assign-values_2",
            "text": "Assigning a value to the current position of the data series:  myDataSeries.Set(DateTime Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, DateTime Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values_2",
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Remove a past value from the data series:  myDataSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity_2",
            "text": "myDataSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value_2",
            "text": "Print (\"For the bar from \" + Time[0] + \" ago the value of the data series is: \" + myDataSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_16",
            "text": "//Saves the difference of -6 hours (eastern time, New York) for a time zone conversion\nmyDataSeries.Set(Time[0].AddHours(-6));",
            "title": "Example"
        },
        {
            "location": "/keywords/#floatseries",
            "text": "",
            "title": "FloatSeries"
        },
        {
            "location": "/keywords/#description_20",
            "text": "Float series is a DataSeries that contains a float value for each bar in the chart. The number of elements in this series corresponds to the number of bars within the chart.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-a-new-data-series_2",
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate FloatSeries myDataSeries;  Assign a new instance of the FloatSeries to the variable with the OnInit() method:  protected override void OnInit()\n{\nmyDatatSeries = new FloatSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create a New Data Series"
        },
        {
            "location": "/keywords/#assign-values_3",
            "text": "Assigning a value to the current position of the data series  myDataSeries.Set(float Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, float Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values_3",
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity_3",
            "text": "myDataSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value_3",
            "text": "Print (\"For the bar from \" + Time[0] + \" ago the value for the data series is: \" + myDataSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_17",
            "text": "//Saves the span between the high and the low of a bar\nmyDataSeries.Set(Math.Abs((float) High[0] - (float) Low[0]));",
            "title": "Example"
        },
        {
            "location": "/keywords/#intseries",
            "text": "",
            "title": "IntSeries"
        },
        {
            "location": "/keywords/#description_21",
            "text": "Int series is a data series that can assign an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-a-new-data-series_3",
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate IntSeries myDataSeries;  Assign an instance of the int series to the variable with the OnInit() method:  protected override void OnInit()\n{\nmyDataSeries = new IntSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create a New Data Series"
        },
        {
            "location": "/keywords/#assign-values_4",
            "text": "Assigning a value to the current position of the data series  myDataSeries.Set(int Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, int Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values_4",
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity_4",
            "text": "myDataSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value_4",
            "text": "Print (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_18",
            "text": "//Saves the span in ticks between high and low for each bar\nmyDataSeries.Set((int) ((High[0] - Low[0]) / TickSize));",
            "title": "Example"
        },
        {
            "location": "/keywords/#longseries",
            "text": "",
            "title": "LongSeries"
        },
        {
            "location": "/keywords/#description_22",
            "text": "Long series is a data series that can include an integer value for each bar. The number of elements in this series corresponds to the number of bars within the chart.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-a-new-data-series_4",
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate LongSeries myDataSeries;  Assign a new instance of the long series to the variable with the OnInit() method:  protected override void OnInit()\n{\nmyDataSeries = new LongSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create a New Data Series"
        },
        {
            "location": "/keywords/#assign-values_5",
            "text": "Assigning a value to the current position of the data series:  myDataSeries.Set(long Value);  Writing a value from the past into the data deries:  myDataSeries.Set(int barsAgo, long Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values_5",
            "text": "Removing the current value from the data series:  myDataSeries.Reset();  Removing a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity_5",
            "text": "myDataSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value_5",
            "text": "Print (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_19",
            "text": "//Saves the span of ticks between high and low for each bar\nmyDataSeries.Set((long) ((High[0] - Low[0]) / TickSize));",
            "title": "Example"
        },
        {
            "location": "/keywords/#stringseries",
            "text": "",
            "title": "StringSeries"
        },
        {
            "location": "/keywords/#description_23",
            "text": "String series is a data series for string values that are saved for each bar. The number of elements in this series corresponds to the number of bars within the chart.",
            "title": "Description"
        },
        {
            "location": "/keywords/#create-a-new-data-series_5",
            "text": "Create a new variable in the declaration area:  //Variable declaration\nprivate StringSeries myDataSeries;  Assign an instance of string series to the variable with the OnInit() method:  protected override void OnInit()\n{\nmyDataSeries = new StringSeries(this);\nCalculateOnClosedBar = true;\n}",
            "title": "Create a New Data Series"
        },
        {
            "location": "/keywords/#assign-values_6",
            "text": "Assigning a value to the current position of the data series:  myDataSeries.Set(string Value);  Writing a value from the past into the data series:  myDataSeries.Set(int barsAgo, string Value);",
            "title": "Assign Values"
        },
        {
            "location": "/keywords/#delete-values_6",
            "text": "Remove the current value from the data series:  myDataSeries.Reset();  Remove a value located in the past from the data series:  myDataSeries.Reset(int barsAgo);",
            "title": "Delete Values"
        },
        {
            "location": "/keywords/#check-values-for-their-validity_6",
            "text": "myDataSeries.ContainsValue(int barsAgo);",
            "title": "Check Values for their Validity"
        },
        {
            "location": "/keywords/#read-value_6",
            "text": "Print (For the bar from + Time[0] + the value of the data series is:+ myDataSeries[0]);",
            "title": "Read Value"
        },
        {
            "location": "/keywords/#example_20",
            "text": "//Save the current calendar day for each bar (Monday\u2026 Tuesday etc.)\nmyDataSeries.Set(string.Format(\"{0:dddd}\", Time[0]));",
            "title": "Example"
        },
        {
            "location": "/keywords/#dayofweek",
            "text": "",
            "title": "DayOfWeek"
        },
        {
            "location": "/keywords/#description_24",
            "text": "\"DayOfWeek\" outputs the date-time value (such as a timestamp) for each bar.  Of course, all other methods defined within the C# language for usage of date-time objects are also available, such as day, month, year, hour, minute, second, day of week etc.  See  http://msdn.microsoft.com/de-de/library/03ybds8y.aspx",
            "title": "Description"
        },
        {
            "location": "/keywords/#definition_1",
            "text": "Property DayOfWeek  public enum DayOfWeek\n-   DayOfWeek.Monday\n-   DayOfWeek.Tuesday\n-   DayOfWeek.Wednesday\n-   DayOfWeek.Thursday\n-   DayOfWeek.Friday\n-   DayOfWeek.Saturday\n-   DayOfWeek.Sunday",
            "title": "Definition"
        },
        {
            "location": "/keywords/#example_21",
            "text": "//Outputs the weekday for each bar\nPrint(Time[0].DayOfWeek);\n//Do not execute trades on a Friday\nif (Time[0].DayOfWeek == DayOfWeek.Friday)\nreturn;",
            "title": "Example"
        },
        {
            "location": "/keywords/#displacement",
            "text": "",
            "title": "Displacement"
        },
        {
            "location": "/keywords/#description_25",
            "text": "By implementing \"Displacement\", you can shift a drawn indicator line right or left along the x-axis.\nThis property can be queried within the script and will return an int value.  Blue line: Displacement = 0 (Original)\nRed line: Displacement = -5\nGreen line: Displacement = +5",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_14",
            "text": "Displacement",
            "title": "Usage"
        },
        {
            "location": "/keywords/#parameter_12",
            "text": "int Offset Number of bars by which the indicator is to be moved.",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_22",
            "text": "protected override void OnInit()\n{\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Displacement of the plot by one bar to the right\nDisplacement = 1;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#email-function",
            "text": "",
            "title": "Email function"
        },
        {
            "location": "/keywords/#description_26",
            "text": "Override method which allows to send mail.",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_13",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_3",
            "text": "string",
            "title": "Return value"
        },
        {
            "location": "/keywords/#usage_15",
            "text": "used for complicated calculation on a last bar",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_23",
            "text": "protected override void OnOrderExecution(IExecution execution)\n{\nif (execution.Order != null && execution.Order.OrderState == OrderState.FilledQuantity)\n{\nif (oEnter != null && execution.Name == oEnter.Name)\n{\n// Enter-Order gef\u00fcllt\nif (_sendMail) this.SendEmail(Core.AccountManager.Core.Settings.MailDefaultFromAddress, Core.PreferenceManager.DefaultEmailAddress,\nexecution.Instrument.Symbol + \" order \" + execution.Name + \" executed.\", \"The order for \" + execution.Instrument.Name + \" was executed. Invest: \" + (Trade.Quantity * Trade.AvgPrice).ToString(\"F2\"));\n}\nelse if (oTStop != null && execution.Name == oTStop.Name)\n{\nOrderStatus = 0; // Trend-Stopp-Order gef\u00fcllt\nif (_sendMail) this.SendEmail(Core.AccountManager.Core.Settings.MailDefaultFromAddress, Core.PreferenceManager.DefaultEmailAddress,\nexecution.Instrument.Symbol +\" order \" + execution.Name + \" executed.\",\nexecution.Instrument.Symbol +\" order \" + execution.Name + \" executed. Profit:\" + Trade.ClosedProfitLoss.ToString(\"F2\"));\n}\n}\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#firsttickofbar",
            "text": "",
            "title": "FirstTickOfBar"
        },
        {
            "location": "/keywords/#description_27",
            "text": "FirstTickOfBar is a property of the type \"bool\" that returns \"true\" if the currently incoming tick is associated with a new bar. This means that this tick is the first tick of a new bar.\nThis property can only be meaningfully applied when the indicator or strategy is running in the tick-by-tick mode, meaning that CalculateOnClosedBar = false and the data feed is able to output real-time values.\nWhen using end-of-day data in a daily chart, the \"FirstTickOfBar\" is always true for the last bar.\nFirstTickOfBar should not be used outside of the OnCalculate() method.\nSee  Bars.TicksCountForLastBar .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_16",
            "text": "FirstTickOfBar",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_24",
            "text": "// Within a tick-by-tick strategy, execute one part bar-by-bar only\nif (FirstTickOfBar)\n{\nif (CCI(20)[1] < -250)\nOpenLong();\nreturn;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#firsttickofbarmtf",
            "text": "",
            "title": "FirstTickOfBarMtf"
        },
        {
            "location": "/keywords/#description_28",
            "text": "FirstTickOfBarMtf is the  multi-time frame  variant of the  FirstTickOfBar  property.  The setting of CalculateOnClosedBar only affects the primary timeframe (chart timeframe). When working with multi-bars, the ticks of the secondary timeframes are provided on a tick-by-tick basis independently of the CalculateOnClosedBar setting.\nWith the help of FirstTickOfBarMtf, it is possible to determine when a new bar has begun in a secondary timeframe.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_17",
            "text": "FirstTickOfBarMtf(ProcessingBarSeriesIndex)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#parameter_14",
            "text": "FirstTickOfBarMtf(ProcessingBarSeriesIndex).  See  ProcessingBarSeriesIndex .",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_25",
            "text": "if (FirstTickOfBarMtf(ProcessingBarSeriesIndex))\nPrint(\"A new bar has begun.\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#getcurrentask",
            "text": "",
            "title": "GetCurrentAsk()"
        },
        {
            "location": "/keywords/#description_29",
            "text": "The GetCurrentAsk() method returns the current value of the ask side of the order book. If no level 1 data is available to AgenaTrader, then this function simply outputs the last trade value.  See  GetCurrentBid()  and  OnLevel1() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_18",
            "text": "GetCurrentAsk()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_4",
            "text": "double value",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_15",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_26",
            "text": "If an entry condition is fulfilled, then 1 contract should be sold at the current ask price:\nprivate IOrder entryOrder = null;\nprotected override void OnCalculate()\n{\n// Entry condition\nif (Close[0] < SMA(20)[0] && entryOrder == null)\n// Sell 1 contract at the current ask price\n\n    SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Sell,\n                    Type = OrderType.Limit,\n                    Mode = OrderMode.Direct,\n                    Price = GetCurrentAsk(),\n                    Quantity = 1,\n                    SignalName = \"Enter short\",\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#getcurrentaskvolume",
            "text": "",
            "title": "GetCurrentAskVolume()"
        },
        {
            "location": "/keywords/#description_30",
            "text": "The GetCurrentAskVolume () method returns the current volume on the Ask page of the order book. This function is only executable if the data provider provides level 2 data.  See  GetCurrentBidVolume() ,  GetCurrentBid()  and  OnLevel1() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_19",
            "text": "GetCurrentAskVolume()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_5",
            "text": "Long  value",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_16",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_27",
            "text": "protected override void OnCalculate()\n{\n   if (GetCurrentAskVolume() < GetCurrentBidVolume())\n       Print(\"AskVolume {0} < BidVolume {1}\", GetCurrentAskVolume(), GetCurrentBidVolume());\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#getcurrentbid",
            "text": "",
            "title": "GetCurrentBid()"
        },
        {
            "location": "/keywords/#description_31",
            "text": "The GetCurrentBid() method returns the current value of the bid side of the order book. If no level 1 data is available to AgenaTrader, then the function outputs the last traded price.  See  GetCurrentAsk()  and  OnLevel1() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_20",
            "text": "GetCurrentBid()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_6",
            "text": "double value",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_17",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_28",
            "text": "If an entry condition is fulfilled, then 1 contract should be sold at the current bid price:  private IOrder entryOrder = null;\nprotected override void OnCalculate()\n{\n// Entry condition\nif (Instrument.Compare(Close[0], SMA(20)[0]) > 0 && entryOrder == null)\n// Sell 1 contract at the current bid price\n\n  SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Mode = OrderMode.Direct,\n                    Price = GetCurrentBid(),\n                    Quantity = 1,\n                    SignalName = \"Enter long\",\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#getcurrentbidvolume",
            "text": "",
            "title": "GetCurrentBidVolume()"
        },
        {
            "location": "/keywords/#description_32",
            "text": "The GetCurrentBidVolume () method returns the current volume on the Bid page of the order book. This function is only executable if the data provider provides level 2 data.  See  GetCurrentAskVolume ,  GetCurrentBid()  and  OnLevel1() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_21",
            "text": "GetCurrentBidVolume()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_7",
            "text": "Long value",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_18",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_29",
            "text": "protected override void OnCalculate()\n{\n   if (GetCurrentAskVolume() < GetCurrentBidVolume())\n       Print(\"AskVolume {0} < BidVolume {1}\", GetCurrentAskVolume(), GetCurrentBidVolume());\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#getcurrentprice",
            "text": "",
            "title": "GetCurrentPrice()"
        },
        {
            "location": "/keywords/#description_33",
            "text": "The GetCurrentPrice() method returns the current price (Latest). If AgenaTrader does not have Level1 data, the function returns the price of the last sales  See  GetCurrentAsk ,  GetCurrentBid()  and  OnLevel1() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_22",
            "text": "GetCurrentPrice()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_8",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_19",
            "text": "double",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_30",
            "text": "If an initial condition is fulfilled, 1 contract should be purchased at the current exchange rate.  private IOrder entryOrder = null;\n\nprotected override void OnCalculate()\n{\n\n   .....\n\n   // Einstiegsbedingung\n   if (Instrument.Compare(Close[0], SMA(20)[0]) > 0 && entryOrder == null)\n       // Kauf 1 Kontrakt zum aktuellen BidKurs\n       entryOrder = SubmitOrder(new StrategyOrderParameters\n                {\n                    Direction = OrderDirection.Buy,\n                    Type = OrderType.Limit,\n                    Mode = OrderMode.Direct,\n                    Price = GetCurrentBid(),\n                    Quantity = 1,\n                    SignalName = \"EntryLong\",\n                    Instrument = Instrument,\n                    TimeFrame = TimeFrame,\n                    LiveUntilCancelled = true\n                });\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#getcurrentspread",
            "text": "",
            "title": "GetCurrentSpread()"
        },
        {
            "location": "/keywords/#description_34",
            "text": "The GetCurrentSpare () method returns the current spread.  See  GetCurrentAsk ,  GetCurrentBid()  and  OnLevel1() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_23",
            "text": "GetCurrentSpread()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_9",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_20",
            "text": "double",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_31",
            "text": "If an initial condition is fulfilled, 1 contract should be purchased at the current exchange rate.  protected override void OnCalculate()\n{\n       Print(\"Der aktuelle Spread ist {0}\", GetCurrentSpread());\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#getdayasint",
            "text": "",
            "title": "GetDayAsInt()"
        },
        {
            "location": "/keywords/#description_35",
            "text": "To day is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.\nExperienced programmers can continue using the date-time function directly.  To day outputs an int representation in the format of yyyymmdd.\n(yyyy = year, mm = month, dd = day)  13.08.2012 would thus be 20120813.  See  GetTimeAsInt .  Help with date-time:  http://msdn.microsoft.com/de-de/library/system.datetime.aspx",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_24",
            "text": "GetDayAsInt(DateTime time)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_32",
            "text": "// Do not trade on the 11<sup>th</sup> of September\nif (GetDayAsInt(Time[0]) = 20130911)\nreturn;",
            "title": "Example"
        },
        {
            "location": "/keywords/#getserieshighestvalue",
            "text": "",
            "title": "GetSeriesHighestValue"
        },
        {
            "location": "/keywords/#description_36",
            "text": "The GetSeriesHighestValue() method searches within a predetermined number of periods for the highest bar and outputs how many bars ago it can be found.  See  GetSeriesLowestValue() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_21",
            "text": "period Number of bars within which the bar is searched for  series Every data series, such as close, high, low, etc.",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_10",
            "text": "int barsAgo How many bars ago the high occurred",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#usage_25",
            "text": "GetSeriesHighestValue(IDataSeries series, int period)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_33",
            "text": "// How many bars ago was the highest high for the current session?\nPrint(GetSeriesHighestValue(High, Bars.BarsCountForSession - 1));\n// What value did the market price have at the highest high of the session?\nPrint(\"The highest price for the session was: \" + Open[GetSeriesHighestValue(High, Bars.BarsCountForSession - 1)]);",
            "title": "Example"
        },
        {
            "location": "/keywords/#getserieslowestvalue",
            "text": "",
            "title": "GetSeriesLowestValue"
        },
        {
            "location": "/keywords/#description_37",
            "text": "The GetSeriesLowestValue() method attempts to find the lowest bar within a predefined number of periods.  See  GetSeriesHighestValue() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_22",
            "text": "period Number of bars that will be searched for the lowest bar  series Every data series, such as close, high, low etc.",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_11",
            "text": "int  barsAgo How many bars ago the low occurred",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#usage_26",
            "text": "GetSeriesLowestValue(IDataSeries series, int period)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_34",
            "text": "// How many bars ago was the lowest low of the session?\nPrint(GetSeriesLowestValue(Low, Bars.BarsCountForSession - 1));\n// Which price did the lowest open of the current session have?\nPrint(\"The lowest open price of the current session was: \" + Open[GetSeriesLowestValue(Low, Bars.BarsCountForSession - 1)]);",
            "title": "Example"
        },
        {
            "location": "/keywords/#gettimeasint",
            "text": "",
            "title": "GetTimeAsInt()"
        },
        {
            "location": "/keywords/#description_38",
            "text": "To time is a method specifically suited for inexperienced programmers who have problems with the potentially complex .net date-time structure of C#.  To time outputs an int representation in the format hhmmss.\n(hh = hour, mm = minute, ss = seconds)  The time 07:30 will be displayed as 73000 and 14:15:12 will become 141512.  See  GetDayAsInt .  Help with date-time:  http://msdn.microsoft.com/de-de/library/system.datetime.aspx",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_27",
            "text": "GetTimeAsInt(DateTime time)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_35",
            "text": "// Only enter trades between 08:15 and 16:35\nif (GetTimeAsInt(Time[0]) >= 81500 && GetTimeAsInt(Time[0]) <= 163500)\n{\n// Any trading technique\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#historical",
            "text": "",
            "title": "Historical"
        },
        {
            "location": "/keywords/#description_39",
            "text": "Historical allows you to check whether AgenaScript is working with historical or real-time data.\nAs long as OnCalculate() is called up for historical data, then historical = true. As soon as live data is being used, then historical = false.\nDuring a backtest, historical is always true.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_28",
            "text": "Historical",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_12",
            "text": "true  when using historical data false  when using real-time data",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#example_36",
            "text": "protected override void OnCalculate()\n{\n// only execute for real-time data\nif (IsHistoricalMode) return;\n// Trading technique\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#inputpricetype",
            "text": "",
            "title": "InputPriceType"
        },
        {
            "location": "/keywords/#description_40",
            "text": "The input price type property determines which price series is used by default when calculating an indicator, if no other data series is explicitly stated.\nInputPriceType can be set with the OnInit() method; this specification is then valid for all further calculations.\nIf InputPriceType is in OnCalculate(), these changes are only valid starting with the next instruction.\nEvery further appearance of InputPriceType will be ignored!  See  PriceType",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_29",
            "text": "InputPriceType",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example1",
            "text": "protected override void OnInit()\n{\nClearTraceWindow();\nInputPriceType = PriceType.Low;\n}\nprotected override void OnCalculate()\n{\n// The input data series for the indicator (InSeries) is low\nPrint(Low[0] + \" \" + InSeries[0] + \" \" + InputPriceType);\n}",
            "title": "Example1"
        },
        {
            "location": "/keywords/#example2",
            "text": "protected override void OnCalculate()\n{\n// These values are identical\n// since close is used as the input data series by default\nPrint(SMA(20)[0] + \" \" + SMA(Close, 20)[0]);\nInputPriceType = PriceType.Low;\n// From here on out, low is used instead of close\n// Both values are identical\nPrint(SMA(20)[0] + \" \" + SMA(Low, 20)[0]);\nInputPriceType = PriceType.High;\n// The instructions will be ignored\n// InSeries = low is still in effect\n}",
            "title": "Example2"
        },
        {
            "location": "/keywords/#instrument",
            "text": "",
            "title": "Instrument"
        },
        {
            "location": "/keywords/#description_41",
            "text": "With \"instrument\", information concerning the trading instrument (stock, future etc.) is made available.  Detailed information can be found here:  Instruments .",
            "title": "Description"
        },
        {
            "location": "/keywords/#isadddrawingstopricepanel",
            "text": "",
            "title": "IsAddDrawingsToPricePanel"
        },
        {
            "location": "/keywords/#description_42",
            "text": "The property \"IsAddDrawingsToPricePanel\" determines the panel in which the drawing objects are drawn.  IsAddDrawingsToPricePanel = true (default)  Drawing objects are shown in the price chart  IsAddDrawingsToPricePanel = false  Drawing objects are drawn in the panel (subchart) assigned to the indicator  If the indicator is already assigned to the price chart (overlay = true) then this property has no effect, meaning that no additional subchart is opened.\nThe property can be queried within the script and returns a Boolean value.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_30",
            "text": "IsAddDrawingsToPricePanel",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_37",
            "text": "protected override void OnInit()\n{\n// Indicator is drawn in a new subchart\nIsOverlay = false;\n       AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n// Drawing object is drawn in the price chart\nIsAddDrawingsToPricePanel = true;\n}\nprotected override void OnCalculate()\n{\n// Draws a vertical line in the price chart for the bar from 5 minutes ago\nAddChartVerticalLine(\"MyVerticalLine\", 5, Color.Black);\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#isautoadjustablescale",
            "text": "",
            "title": "IsAutoAdjustableScale"
        },
        {
            "location": "/keywords/#description_43",
            "text": "IsAutoAdjustableScale is a property of indicators that can be set within the OnInit() method.  IsAutoAdjustableScale = true (default)  The price axis (y-axis) of the chart is set so that all plots and lines of an indicator are visible.  IsAutoAdjustableScale = false  Plots and lines of an indicator or strategy are not accounted for in the scaling of the y-axis. Therefore they may lie outside of the visible chart area.  This property can be queried and will return either \"true\" or \"false\".",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_31",
            "text": "IsAutoAdjustableScale",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_38",
            "text": "protected override void OnInit()\n{\n//Scale the chart so that all drawing objects are visible\nIsAutoAdjustableScale = true;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#isoverlay",
            "text": "",
            "title": "IsOverlay"
        },
        {
            "location": "/keywords/#description_44",
            "text": "The overlay property defines whether the indicator outputs are displayed in the price chart above the bars or whether a separate chart window is opened below the charting area.  IsOverlay = true  The indicator is drawn above the price (for example an  SMA )  IsOverlay = false (default)  A separate chart window is opened (RSI)  This property can be queried within the script and outputs a value of the type Boolean (true or false).",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_32",
            "text": "IsOverlay",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_39",
            "text": "protected override void OnInit()\n{\n       AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//The indicator should be displayed within a separate window\nIsOverlay = false;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#isprocessingbarindexlast",
            "text": "",
            "title": "IsProcessingBarIndexLast"
        },
        {
            "location": "/keywords/#description_45",
            "text": "Indicates if current bar is last in calculation.",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_23",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_13",
            "text": "Type bool",
            "title": "Return value"
        },
        {
            "location": "/keywords/#usage_33",
            "text": "used for complicated calculation on a last bar",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_40",
            "text": "protected override void OnCalculate()\n{\n            base.OnCalculate();\n            if (!IsProcessingBarIndexLast)\n                return;\n            bool isUpdated;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#isserierising",
            "text": "",
            "title": "IsSerieRising()"
        },
        {
            "location": "/keywords/#description_46",
            "text": "With this method you can check if an uptrend exists, i.e. if the current value is bigger than the previous bar\u2019s value.  See  CrossAbove() ,  CrossBelow() ,  IsSerieRising() ,  IsSerieFalling() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_34",
            "text": "IsSerieRising(IDataSeries series)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_14",
            "text": "true  If the data series is rising false  If the data series is not rising",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_24",
            "text": "series A data series such as an indicator, close, high etc.",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_41",
            "text": "// Check if SMA(20) is rising\nif (IsSerieRising(SMA(20)))\nPrint(\"The SMA(20) is currently rising.\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#isseriefalling",
            "text": "",
            "title": "IsSerieFalling()"
        },
        {
            "location": "/keywords/#description_47",
            "text": "The IsSerieFalling() method allows you to test whether an \"is falling\" condition exists, i.e. whether the current value is smaller than the value of the previous bar.  See  CrossAbove() ,  CrossBelow() ,  IsSerieRising() ,  IsSerieFalling() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_35",
            "text": "IsSerieFalling(IDataSeries series)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_15",
            "text": "true  If the data series is falling false  If the data series is not falling",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_25",
            "text": "series a data series such as an indicator, close, high etc.",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_42",
            "text": "// Check whether SMA(20) is falling\nif (IsSerieFalling(SMA(20)))\nPrint(\"The SMA(20) is currently falling.\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#isshowchartverticalgrid",
            "text": "",
            "title": "IsShowChartVerticalGrid"
        },
        {
            "location": "/keywords/#description_48",
            "text": "The property IsShowChartVerticalGrid defines whether or not the regularly spaced vertical lines (the so-called grid) are shown within the charting area.  IsShowChartVerticalGrid = true (default)  Vertical grid lines are shown  IsShowChartVerticalGrid = false  Vertical grid lines are not shown  This property can be queried within the script and returns a value of the type Boolean (true or false).",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_36",
            "text": "IsShowChartVerticalGrid",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_43",
            "text": "protected override void OnInit()\n{\n       AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n// Vertical grid lines shall not be shown within the chart\nIsShowChartVerticalGrid = false;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#isshowindatabox",
            "text": "",
            "title": "IsShowInDataBox"
        },
        {
            "location": "/keywords/#description_49",
            "text": "The property \"IsShowInDataBox\" states whether the value of an indicator is contained in the data box of the chart or not.  The property can be queried in the script and returns a value of the type Boolean (true or false).  IsShowInDataBox = true (default)  The indicator values are displayed in the data box.  IsShowInDataBox = false  The indicator values are not displayed in the data box.  The following image displays the values of 3 smoothed averages in the data box.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_37",
            "text": "IsShowInDataBox",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_44",
            "text": "protected override void OnInit()\n{\n AddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Values will not be shown in the data box\nIsShowInDataBox = false;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#isshowpricemarkers",
            "text": "",
            "title": "IsShowPriceMarkers"
        },
        {
            "location": "/keywords/#description_50",
            "text": "The paint price markers property defines whether the so-called price markers for the indicator outputs are displayed on the right-hand chart border (in the price axis) or not. In some cases it makes sense to switch these off for a better overview in the chart. IsShowPriceMarkers = true (default)  Price markers are shown in the price axis  IsShowPriceMarkers = false  Price markers are not shown in the price axis  This property can be queried within the script and returns a value of the type Boolean (true or false).",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_38",
            "text": "IsShowPriceMarkers",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_45",
            "text": "protected override void OnInit()\n{\n\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Black), \"MyPlot1\"));\n//Do not show price markers in the price axis\nIsShowPriceMarkers = false;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#level1args",
            "text": "",
            "title": "Level1Args"
        },
        {
            "location": "/keywords/#description_51",
            "text": "The data type Level1Args represents a change in the level 1 data and is used as a parameter of the OnLevel1() function.           AskSize  Current order volume on the ask side    AskPrice  Current ask price    BidSize  Current order volume on the bid side    BidPrice  Current bid price.    Instrument  An object of the type instrument that contains the trading instrument for which the level 1 data is outputted. See  Instruments    LastPrice  Last traded price    MarketDataType  Potential values are: MarketDataType.Ask, MarketDataType.AskSize, MarketDataType.Bid, MarketDataType.BidSize, MarketDataType.Last, MarketDataType.Volume    Price  This is equal to last price. This field only exists for compatability reasons    Time  A date-time value containing the timestamp of the change    Volume  A long value that shows the volume",
            "title": "Description"
        },
        {
            "location": "/keywords/#example_46",
            "text": "See  OnLevel1() .",
            "title": "Example"
        },
        {
            "location": "/keywords/#level2args",
            "text": "",
            "title": "Level2Args"
        },
        {
            "location": "/keywords/#description_52",
            "text": "The data type Level2Args represents a change in the level 2 data (market depth) and is used as a parameter within OnLevel2().           MarketDataType  Potential values are: MarketDataType.Ask, MarketDataType.Bid    MarketMaker  A string value containing the market maker ID    Position  An int value that defines the position within the market depth    Operation  Represents the action caused by a change in the order book.   Values can be: Operation.Insert, Operation.Remove, Operation.Update    Price  A double value that displays the bid/ask price    Time  A date-time value containing the timestamp of the change    Volume  A long value that shows the volume",
            "title": "Description"
        },
        {
            "location": "/keywords/#example_47",
            "text": "See  OnLevel2() .",
            "title": "Example"
        },
        {
            "location": "/keywords/#levelline",
            "text": "",
            "title": "LevelLine()"
        },
        {
            "location": "/keywords/#description_53",
            "text": "A line object is used for drawing a horizontal line in the chart. Usually, these are upper and lower trigger lines for indicators such as the RSI (70 and 30).\nThe lines described here are not to be confused with lines from the drawing objects (see \"AddChartHorizontalLine\").\nLevelLine objects can be added to an indicator with the help of the Add() method, and with this, added to the lines collection.  See  OutputDescriptor .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_26",
            "text": "Color  LevelLine color    Name  Description    Pen  A pen object    Value  Defines which value on the y-axis the line will be drawn for",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_39",
            "text": "LevelLine(Color color, double value, string name)\nLevelLine(Pen pen, double value, string name)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#more-information_1",
            "text": "Information on the pen class:  http://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_48",
            "text": "// Example 1\n// A new line with standard values drawn at the value of 70\nAdd(new LevelLine(Color.Black, 70, \"Upper\"));\n// Example 2\n// A new line with self-defined values\nprivate LevelLine line;\nprivate Pen pen;\nprotected override void OnInit()\n{\n// Define a red pen with the line strength 1\npen = new Pen(Color.Red, 1);\n// Define a horizontal line at 10\nline = new LevelLine(pen, 10, \"MyLine\");\n// add the defined line to the indicator\nAdd(line);\n}\n// Example 3\n// Short form for the line in example 2\nAdd(new LevelLine(new Pen(Color.Red, 1), 10, \"MyLine\"));",
            "title": "Example"
        },
        {
            "location": "/keywords/#log",
            "text": "",
            "title": "Log()"
        },
        {
            "location": "/keywords/#description_54",
            "text": "Log() allows you to write outputs in the AgenaTrader log file (log tab). 5 different log levels are supported.  Note: If the log tab is not viewable, it can be displayed using the tools log.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_40",
            "text": "**Log**(string message, LogLevel logLevel)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#parameter_27",
            "text": "message  Text (message)    logLevel  Possible values are: InfoLogLevel.Info, InfoLogLevel.Message, InfoLogLevel.Warning, InfoLogLevel.ShowAlert, InfoLogLevel.Error",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_49",
            "text": "//Tab protocol\nLog(\"This is information.\", InfoLogLevel.Info); //white\nLog(\"This is a message.\", InfoLogLevel.Message); // white\nLog(\"This is a warning.\", InfoLogLevel.Warning); // blue\nLog(\"This is an alarm.\", InfoLogLevel. ShowAlert); //green\nLog(\"This is a mistake.\", InfoLogLevel.Error); // red\n//Tab messags\nLog(\"This is a message (messages).\", InfoLogLevel.Message); //white\n//PopUp & protocoll\nLog(\"This is an alert popup window.\", InfoLogLevel.ShowAlert); //green\n\n//Output-Tab:\n//InfoLogLevel.Message = send to Tab \"Messages\" not \"Log\"\n\n//Action:\n/*\nInfoLogLevel.Error: also the AT-Status-Line is red and flashes\nInfoLogLevel.ShowAlert: opens also a modeless messagebox\n*/\n\n/*\nSummary: * - InfoLogLevel.ShowAlert Color: green Tab: Log Action: modeless Messagebox * - InfoLogLevel.Warning Color: blue Tab: Log * - InfoLogLevel.Info Color: white Tab: Log * - InfoLogLevel.Error Color: red Tab: Log Action: AT-Status-Line: red + flashing (Error) * - InfoLogLevel.Message Color: white Tab: Messages\n*/  Crossreference:\na crossreference to Print() and ShowAlert()",
            "title": "Example"
        },
        {
            "location": "/keywords/#occurred",
            "text": "",
            "title": "Occurred"
        },
        {
            "location": "/keywords/#description_55",
            "text": "This DataSeries is used in conditions and indicates if signal occurred (1-long, -1 short, 0- no signal )",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_28",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_16",
            "text": "Int",
            "title": "Return value"
        },
        {
            "location": "/keywords/#usage_41",
            "text": "In scripted condition for short, long, none signal indication",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_50",
            "text": "protected override void OnCalculate()\n{\nif ( ProcessingBarIndex %2 == 0 )\nOccurred.Set(1); // Long\nelse if ( ProcessingBarIndex %3 == 0 )\nOccurred.Set(-1); // Short\nelse\nOccurred.Set(0);\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#onbarsrequirements",
            "text": "",
            "title": "OnBarsRequirements()"
        },
        {
            "location": "/keywords/#description_56",
            "text": "The OnBarsRequirements() method is called up once at the beginning of an indicator and/or strategy calculation. This method is only necessary when using multi-bars.\nWithin OnBarsRequirements, no other programming commands are executed. For initializing, the OnInit() or OnStart() method should be used.",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_29",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_17",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#example_51",
            "text": "protected override void OnBarsRequirements()\n{\nAdd(DatafeedHistoryPeriodicity.Day, 1);\nAdd(DatafeedHistoryPeriodicity.Week, 1);\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#oninit",
            "text": "",
            "title": "OnInit()"
        },
        {
            "location": "/keywords/#description_57",
            "text": "The OnInit() method is called up once at the beginning of an indicator or strategy calculation. This method can be used to set indicator properties, initialize your own variables, or add plots.",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_30",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_18",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#usage_42",
            "text": "protected override void OnInit()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#important-keywords",
            "text": "Add()  AllowRemovalOfChartDrawings  IsAutoScale  RequiredBarsCount  CalculateOnClosedBar  ClearTraceWindow()  Displacement  IsShowInDataBox  IsAddDrawingsToPricePanel  InputPriceType  IsOverlay  IsShowPriceMarkers  IsShowChartVerticalGrid   Additional Keywords for Strategies   DefaultOrderQuantity  EntriesPerDirection  SetUpStopLoss()  SetUpProfitTarget()  SetUpTrailStop()  TimeInForce  TraceOrders",
            "title": "Important Keywords"
        },
        {
            "location": "/keywords/#more-information_2",
            "text": "Caution: \nThe OnInit() method is not only called up at the beginning of an indicator or strategy calculation, but also if the chart is reloaded unexpectedly or if the properties dialog of indicators is opened and so on.\nDevelopers of custom AgenaScripts should NOT use this method for running their own routines, opening forms, performing license checks, etc. The OnStart() method should be used for these kind of tasks.",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_52",
            "text": "protected override void OnInit()\n{\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Orange), \"Output1\"));\nClearTraceWindow();\nIsAutoScale = false;\nIsOverlay = true;\nIsShowPriceMarkers = false;\nIsShowInDataBox = false;\nCalculateOnClosedBar = true;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#outputdescriptor",
            "text": "",
            "title": "OutputDescriptor()"
        },
        {
            "location": "/keywords/#description_58",
            "text": "A plot (drawing) is used to visually display indicators in a chart. OutputDescriptor objects are assigned to an indicator with the help of the Add() method and attached to the plots collection.\nSee  LevelLine .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_31",
            "text": "Color  Drawing color    Pen  Pen object    OutputSeriesDisplayStyle  LevelLine type: OutputSeriesDisplayStyle.Bar, OutputSeriesDisplayStyle.Block, OutputSeriesDisplayStyle.Cross, OutputSeriesDisplayStyle.Dot, OutputSeriesDisplayStyle.Hash, OutputSeriesDisplayStyle.LevelLine, OutputSeriesDisplayStyle.Square, OutputSeriesDisplayStyle.TriangleDown, OutputSeriesDisplayStyle.TriangleUp    Name  Description",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#usage_43",
            "text": "OutputDescriptor(Color color, string name)\nOnPOutputDescriptoraint(Pen pen, string name)\nOutputDescriptor(Color color, OutputSeriesDisplayStyle plotStyle, string name)\nOutputDescriptor(Pen pen, OutputSeriesDisplayStyle plotStyle, string name)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#more-information_3",
            "text": "Information on the pen class:  http://msdn.microsoft.com/de-de/library/system.drawing.pen.aspx",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_53",
            "text": "// Example 1\n// OutputDescriptor with standard values (line with line strength 1)\nAddOutput(new OutputDescriptor(Color.FromKnownColor(KnownColor.Orange), \"Output1\"));\n// Example 2\n// user-defined values for pen and plot style\nprivate OutputDescriptor plot;\nprivate Pen pen;\nprotected override void OnInit()\n{\n// a red pen with the line strength of 6 is defined\npen = new Pen(Color.Blue, 6);\n// a point line with a thick red pen from above is defined\npaint = new OutputDescriptor(pen, OutputSeriesDisplayStyle.Dot, \"MyPlot\");\n// The defined plot is to be used as a representation for an indicator\nAdd(paint);\n}\n// Example 3\n// Abbreviation of example 2\nprotected override void OnInit()\n{\nAdd(new OutputDescriptor(new Pen(Color.Blue, 6), OutputSeriesDisplayStyle.Dot, \"MyPlot\"));\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#inputparameter",
            "text": "",
            "title": "InputParameter()"
        },
        {
            "location": "/keywords/#description_59",
            "text": "Attribute which used for indicator customization",
            "title": "Description"
        },
        {
            "location": "/keywords/#return-value_19",
            "text": "None",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_32",
            "text": "None",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_54",
            "text": "[Description(\"Period for the medium mean average\")]\n[InputParameter]\n[DisplayName(\"MA Medium\")]\npublic int MA_Medium\n{\n    get \n    { \n        return _ma_medium; \n    }\n    set\n    {\n        _ma_medium = value;\n    }\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#playsound",
            "text": "",
            "title": "PlaySound()"
        },
        {
            "location": "/keywords/#description_60",
            "text": "This method allows you to play a wav file.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_44",
            "text": "PlaySound (wavFile)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_20",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_33",
            "text": "wavFile File name of the wav file to be played",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_55",
            "text": "using System.IO;\nstring path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\nstring file = \"\\\\\\\\AgenaTrader\\\\\\\\Sounds\\\\\\\\Alert1.wav\";\nPlaySound(path + file);",
            "title": "Example"
        },
        {
            "location": "/keywords/#plotmethod",
            "text": "",
            "title": "PlotMethod"
        },
        {
            "location": "/keywords/#description_61",
            "text": "In each indicator, the plot method can be overridden in order to add your own graphics (GDI+) to the price chart with the help of the graphics class (System.Drawing).  See  http://msdn.microsoft.com/de-de/library/system.drawing.graphics.aspx .  The  Chart  object offers several parameters.  More examples:  Bar Numbering ,  PlotSample ,  Chart Background Image .",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_34",
            "text": "graphics The graphics object of the price chart (context)  rectangle The size of the drawing area (type \"public struct rectangle\")  double min The smallest price in the y-axis  double max The biggest price in the y-axis",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_21",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#usage_45",
            "text": "public override void OutputDescriptor(Graphics graphics, Rectangle r, double min, double max)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_56",
            "text": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"Example for the usage of the plot method.\")]\npublic class PlotSample : UserIndicator\n{\nprivate StringFormat stringFormat = new StringFormat();\nprivate SolidBrush brush = new SolidBrush(Color.Black);\nprivate Font font = new Font(\"Arial\", 10);\nprotected override void OnInit()\n{\nIsChartOnlyIndicator = true;\nIsOverlay = true;\n}\nprotected override void OnCalculate()\n{}\nprotected override void OnDispose()\n{\nbrush.Dispose();\nstringFormat.Dispose();\n}\npublic override void OutputDescriptor(Graphics graphics, Rectangle r, double min, double max)\n{\n// Fill a rectangle\nSolidBrush tmpBrush = new SolidBrush(Color.LightGray);\ngraphics.FillRectangle(tmpBrush, new Rectangle (0, 0, 300, 300));\ntmpBrush.Dispose();\n// Draw a red line from top left to bottom right\nPen pen = new Pen(Color.Red);\ngraphics.AddChartLine(pen, r.X, r.Y, r.X + r.Width, r.Y + r.Height);\n// Draw a red line from bottom left to top right\n// Use anti-alias (the line appears smoother)\n// The current settings for the smoothing are saved\n// Restore after drawing\nSmoothingMode oldSmoothingMode = graphics.SmoothingMode; //Save settings\ngraphics.SmoothingMode = SmoothingMode.AntiAlias; // Use higher smoothing settings\ngraphics.AddChartLine(pen, r.X, r.Y + r.Height, r.X + r.Width, r.Y);\ngraphics.SmoothingMode = oldSmoothingMode; // Settings restored\npen.Dispose();\n// Text in the upper left corner (position 10,35)\nstringFormat.Alignment = StringAlignment.Near; // Align text to the left\nbrush.Color = Color.Blue;\ngraphics.DrawString(\"Hello world!\", font, brush, r.X + 10, r.Y + 35, stringFormat);\n// Text in the left lower corner and draw a line around it\nbrush.Color = Color.Aquamarine;\ngraphics.FillRectangle(brush, r.X + 10, r.Y + r.Height - 20, 140, 19);\n// Draw outside line\npen = new Pen(Color.Black);\ngraphics.AddChartRectangle(pen, r.X + 10, r.Y + r.Height - 20, 140, 19);\npen.Dispose();\n// Write text\nbrush.Color = Color.Red;\ngraphics.DrawString(\"Here is bottom left!\", font, brush, r.X + 10, r.Y + r.Height - 20, stringFormat);\n}\n}\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#pricetype",
            "text": "",
            "title": "PriceType"
        },
        {
            "location": "/keywords/#description_62",
            "text": "Price type describes a form of price data.  See  InputPriceType  Following variables are available:\n-   PriceType.Close\n-   PriceType.High\n-   PriceType.Low\n-   PriceType.Median\n-   PriceType.Open\n-   PriceType.Typical\n-   PriceType.Volume\n-   PriceType.Weighted",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_46",
            "text": "PriceType",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_57",
            "text": "See  InputPriceType",
            "title": "Example"
        },
        {
            "location": "/keywords/#print",
            "text": "",
            "title": "Print()"
        },
        {
            "location": "/keywords/#description_63",
            "text": "The Print() method writes outputs in the AgenaTrader output window.\nSee  ClearTraceWindow() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_47",
            "text": "Print(string message)\nPrint(bool value)\nPrint(double value)\nPrint(int value)\nPrint(DateTime value)\nPrint(string format, string message)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#parameter_35",
            "text": "string Text an individual message text",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_22",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#more-information_4",
            "text": "Information regarding output formatting:  Formatting numbers .  Hints about the String.Format() method:  http://msdn.microsoft.com/de-de/library/fht0f5be%28v=vs.80%29.aspx",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_58",
            "text": "// \"Quick&Dirty\" formatting of a number with 2 decimal points\nPrint(Close[0].ToString(\"0.00\"));\n// Output day of the week from the timestamp for the bar\nPrint(string.Format(\"{0:dddd}\", Time[0]));\n// An additional empty row with an escape sequence\nPrint(\"One empty row afterwards \\\\n\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#processingbarindex",
            "text": "",
            "title": "ProcessingBarIndex"
        },
        {
            "location": "/keywords/#description_64",
            "text": "Current bar is a method of indexing bars used in the OnCalculate() method. If a chart contains 500 bars and an indicator is to be calculated on the basis of these, then AgenaTrader will begin calculating from the oldest bar. The oldest bar receives the number 0. Once the calculation for this bar has been completed, the OnCalculate() method is called up for the next bar, which in turn receives the number 1. This continues until the last bar, which receives a value of 500.",
            "title": "Description"
        },
        {
            "location": "/keywords/#parameter_36",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#return-value_23",
            "text": "Current bar is a variable of the type int, which always contains the number of the bar currently being used.",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#usage_48",
            "text": "ProcessingBarIndex",
            "title": "Usage"
        },
        {
            "location": "/keywords/#more-information_5",
            "text": "The OnCalculate() method uses numbering different from that of ProcessingBarIndex in terms of the  Barindex  and  Bars . Understanding this difference is of great importance, which is why we ask you to please read the following paragraph carefully:  ProcessingBarIndex numbers continuously from the oldest to youngest bar starting with 0. The BarIndex for the youngest bar is always 0. In the example referenced below this paragraph, Time[0] stands for the timestamp of the current bar. The index of the oldest bar always has 1 added to it. Thus a logical numbering of barsAgo is possible. The timestamp for the bar of 5 periods ago is Time[5].\nFor using multiple timeframes (multi-bars) in an indicator, see ProcessingBarIndexes.",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_59",
            "text": "protected override void OnCalculate()\n{\nPrint(\"Call of OnCalculate for bar nr. \" + ProcessingBarIndex + \" of \" + Time[0]);\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#removechartdrawing",
            "text": "",
            "title": "RemoveChartDrawing()"
        },
        {
            "location": "/keywords/#description_65",
            "text": "The RemoveChartDrawing() method removes a specific drawing object from the chart based on a unique identifier (tag).\nSee  RemoveChartDrawings() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_49",
            "text": "RemoveChartDrawings(string tag)",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_24",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_37",
            "text": "string tag The clearly identifiable name for the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_60",
            "text": "RemoveChartDrawings(\"My line\");",
            "title": "Example"
        },
        {
            "location": "/keywords/#removechartdrawings",
            "text": "",
            "title": "RemoveChartDrawings()"
        },
        {
            "location": "/keywords/#description_66",
            "text": "This method removes all drawings from the chart\nSee  RemoveChartDrawings() .",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_50",
            "text": "RemoveChartDrawings()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_25",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#example_61",
            "text": "//Delete all drawings from the chart\nRemoveChartDrawings();",
            "title": "Example"
        },
        {
            "location": "/keywords/#requiredbarscount",
            "text": "",
            "title": "RequiredBarsCount"
        },
        {
            "location": "/keywords/#description_67",
            "text": "The property \"RequiredBarsCount\" determines how many historical bars are required for an indicator or a strategy to call up the OnCalculate() method for the first time and thus begin the calculations. Bars required should be set within the OnInit() method.\nThe setting should be chosen carefully. If you require 100 days for the calculation of a moving average, then you should ensure that at least 100 days of historical data are loaded.\nThe property can be queried in the script and will return an int value.  When OnCalculate is called up for the first time, the ProcessingBarIndex property is 0 regardless of the value of RequiredBarsCount.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_51",
            "text": "RequiredBarsCount",
            "title": "Usage"
        },
        {
            "location": "/keywords/#example_62",
            "text": "protected override void OnInit()\n{\n//The indicator requires a minimum of 50 bars loaded into the history\nRequiredBarsCount = 50;\n}",
            "title": "Example"
        },
        {
            "location": "/keywords/#showalert",
            "text": "",
            "title": "ShowAlert()"
        },
        {
            "location": "/keywords/#description_68",
            "text": "The ShowAlert method creates an acoustic and/or visual alarm.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_52",
            "text": "ShowAlert(string message, bool showMessageBox, string soundLocation);\n//Due to compatability reasons, an old signature is still used here. When using this method, the color settings and the \"re-arm seconds\" parameter are ignored.\nShowAlert(string id, AlertPriority priority, string message, string soundLocation, int rearmSeconds, Color backColor, Color forColor);",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_26",
            "text": "None",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_38",
            "text": "message  Alert text displayed within the messages tab    soundLocation  Name of a sound file in the *.wav format. If no path is specified, then \"My Documents\\AgenaTrader\\Sounds\\ is used    showMessageBox  If set to \"true\", a message box will be displayed in addition to the sound",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_63",
            "text": "// Message will be outputted if the SMA(20) crosses below the SMA(50)\nif (CrossBelow(SMA(20), SMA(50), 1))\nAlert(\"Check short signal!\", true, \"Alert4.wav\");  To use music files in a different path, you need to specify the path:  string pathOfSoundfile = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)+@\"\\\\MyAlertSounds\\\\\";\nstring nameOfSoundFile = \"MyAlertSoundFile.wav\";\nAlert(\"Message text\", true, pathOfSoundfile + nameOfSoundFile);",
            "title": "Example"
        },
        {
            "location": "/keywords/#ticksize",
            "text": "A tick is the smallest possible price change of a financial instrument within an exchange. If, for example, the trading prices are specified to 2 decimal places, then a tick equals 0.01. You can expect Forex instruments to be specified to within 4 or 5 decimal places. A tick is called a pip in Forex trading and usually equals 0.0001 or 0.00001.\nThe tick value is usually predefined by the exchange and does not (usually) change.\nSee  Instrument.TickSize .  Usually, a tick is displayed as a decimal number. Historically speaking (especially in American exchanges) stocks have been noted with tick sizes of 1/16 of a dollar.\nThis notation is still widespread within commodities. Corn futures (ZC) are noted in \u00bc US cents/bushel (usually equals 12.50 US$ per contract).\nUS treasury bonds are noted in a tick size of 1/32 points, which equals 31.25$.\nNotations are usually made with apostrophes, for example:  149'00 equals exactly 149,\n149'01 equals 149 1/32 (meaning 149.03125),\n149'31 equals 149 31/32 (149.96875),\nand the next value after this is 150\u201900  In the so-called T-Bond intermonth spreads, notations are specified in quarters of 1/32, resulting in point values of 7.8125 per contract.  Notations have a dash:  17-24 equals 17 24/32 points,\n17-242 equals 17 24.25/32 points,\n17-245 equals 17 24.5/32 points and\n17-247 equals 17 24.75/32 points.\nThe next notation after 17-247 is 17-25 and then 17-252, 17-255 etc.\nAfter 17-317 comes 18.  The individual contract specifications can be found on the websites of the respective exchanges.  CME:  http://www.cmegroup.com  under Products & Trading\nEurex (FDAX):  http://www.eurexchange.com/exchange-en/products/idx/dax/17206/  See  Instrument.TickSize .",
            "title": "TickSize"
        },
        {
            "location": "/keywords/#timeframe",
            "text": "See  Bars.TimeFrame .  When using multiple timeframes ( Multibars ) in an indicator, please see  TimeFrames .",
            "title": "TimeFrame"
        },
        {
            "location": "/keywords/#update",
            "text": "",
            "title": "Update()"
        },
        {
            "location": "/keywords/#description_69",
            "text": "The Update() method calls up the OnCalculate method in order to recalculate the indicator values.  Update() is to be used with caution and is intended for use by experienced programmers.",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_53",
            "text": "Update()",
            "title": "Usage"
        },
        {
            "location": "/keywords/#return-value_27",
            "text": "none",
            "title": "Return Value"
        },
        {
            "location": "/keywords/#parameter_39",
            "text": "none",
            "title": "Parameter"
        },
        {
            "location": "/keywords/#example_64",
            "text": "The effect of update can be illustrated with the help of 2 indicators.\nThe first indicator, Ind1, uses a public variable from the indicator Ind2.  Code from Ind1:  public class Ind1 : UserIndicator\n{\nprotected override void OnCalculate()\n{\nPrint( Ind2().MyPublicVariable );\n}\n}  Code from Ind2:  private double myPublicVariable = 0;\nprotected override void OnCalculate()\n{\nmyPublicVariable = 1;\n}\npublic double MyPublicVariable\n{\nget\n{\nUpdate();\nreturn myPublicVariable;\n}\n}  Without Update() - Wrong \nIf Ind2 is called up by Ind1, the get-method of MyPublicVariable is called up in Ind2. Without Update(), the value of MyPublicVariable would be returned. In this case it would be 0.  With Update() - Correct \nBy calling up Update(), OnCalculate() is initially executed by Ind2. This sets MyPublicVariable to 1. Lastly, the value 1 is passed on to the requesting indicator.",
            "title": "Example"
        },
        {
            "location": "/keywords/#value",
            "text": "",
            "title": "Value"
        },
        {
            "location": "/keywords/#description_70",
            "text": "Value is a data series object containing the first data series of an indicator.  When the Add() method is called up, a value object is automatically created and added to the values collection.  Value is identical to Values[0].",
            "title": "Description"
        },
        {
            "location": "/keywords/#usage_54",
            "text": "Value  Value[ int  barsAgo]",
            "title": "Usage"
        },
        {
            "location": "/keywords/#more-information_6",
            "text": "The methods known for a collection, Set(), Reset(), and Count(), can be used for values.",
            "title": "More Information"
        },
        {
            "location": "/keywords/#example_65",
            "text": "See  Values .",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/",
            "text": "DrawingObjects\n\n\nAddChartAndrewsPitchfork()\n\n\nDescription\n\n\nThis drawing object draws an Andrew\u2019s Pitchfork.\n\n\nInformation concerning its usage:\n-   \nvtad.de\n\n-   \nhvolumen-analyse.de\n\n-   \nGodmode-Trader.de\n\n\nUsage\n\n\nAddChartAndrewsPitchfork(string name, bool autoScale, int start1BarsBack, double start1Y, int start2BarsBack, double start2Y, int start3BarsBack, double start3Y, Color color, DashStyle dashStyle, int width)\nAddChartAndrewsPitchfork(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IAndrewsPitchfork (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstart1BarsBack\n\n\nNumber of bars ago for start point 1 (x-axis)\n\n\n\n\n\n\nstart1Time\n\n\nDate/time for start point 1 (x-axis)\n\n\n\n\n\n\nstart1Y\n\n\ny-value for start point 1\n\n\n\n\n\n\nstart2BarsBack\n\n\nNumber of bars ago for start point 2 (x-axis)\n\n\n\n\n\n\nstart2Time\n\n\nDate/time for start point 2 (x-axis)\n\n\n\n\n\n\nstart2Y\n\n\ny-value for start point 2\n\n\n\n\n\n\nstart3BarsBack\n\n\nNumber of bars ago for start point 3 (x-axis)\n\n\n\n\n\n\nstart3Time\n\n\nDate/time for start point 3 (x-axis)\n\n\n\n\n\n\nstart3Y\n\n\ny-value for start point 3\n\n\n\n\n\n\ncolor\n\n\nColor of the object\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine styles:\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate: using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draw the Andrew\u2019s Pitchfork (\u201cMyAPF\u201d)\nAddChartAndrewsPitchfork(\"MyAPF-\" + ProcessingBarIndex, true, 4, Low[4], 3, High[3], 1, Low[1], Color.Black, DashStyle.Solid, 2);\n\n\n\n\nAddChartArc()\n\n\nDescription\n\n\nAddChartArc() draws a circular arc.\n\n\nUsage\n\n\nAddChartArc(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartArc(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, DashStyle dashStyle, int width)\nAddChartArc(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArc (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nNumber of bars ago for the starting point\n\n\n\n\n\n\nstartTime\n\n\nDate/time for the starting point\n\n\n\n\n\n\nstartY\n\n\ny-value for the starting point\n\n\n\n\n\n\nbarsBackEnd\n\n\nNumber of bars ago for the end point\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end point\n\n\n\n\n\n\nendY\n\n\ny-value for the end point\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine style:\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate: using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// AddChart a blue arc\nAddChartArc(\"MyArc-\" + ProcessingBarIndex, true, 10, 10, 0, 20, Color.Blue, DashStyle.Solid, 3);\n\n\n\n\nAddChartArrowDown()\n\n\nDescription\n\n\nAddChartArrowDown() draws an arrow pointing downwards:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartSquare()\n, \nAddChartTriangleUp()\n, \nAddChartTriangleDown()\n).\n\n\nUsage\n\n\nAddChartArrowDown(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartArrowDown(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArrowDown (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar on which the arrow should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nDate/time of the bar on which the arrow should be drawn\n\n\n\n\n\n\ny\n\n\ny-value for the arrow\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a red arrow 3 ticks above the high for the current bar\nAddChartArrowDown(\"MyArrow-\" + ProcessingBarIndex, true, 0, High[0] + 3*TickSize, Color.Red);\n// Draws a red arrow on a three-bar reversal pattern\nif(High[2] > High[3] && High[1] > High[2] && Close[0] < Open[0])\nAddChartArrowDown(ProcessingBarIndex.ToString(), true, 0, High[0] + 3*TickSize, Color.Red);\n\n\n\n\nAddChartArrowLine()\n\n\nDescription\n\n\nAddChartArrowLine() draws an arrow:\n\n\n\n\nUsage\n\n\n AddChartArrowLine (string name,  int  barsBackStart,  double  startY,  int  barsBackEnd,  double  endY, Color color)\n AddChartArrowLine (string name,  bool  autoScale,  int  barsBackStart,  double  startY,  int  barsBackEnd,  double  endY, Color color, DashStyle dashStyle,  int  width)\n AddChartArrowLine (string name,  bool  autoScale, DateTime startTime,  double  startY, DateTime endTime,  double  endY, Color color, DashStyle dashStyle,  int  width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArrowLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nSets the preceding bar at which the arrow should start (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nDate/time of the bar at which the arrow should start\n\n\n\n\n\n\nstartY\n\n\ny-value for the starting point of the arrow\n\n\n\n\n\n\nbarsBackEnd\n\n\nSets the preceding bar at which the arrow should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the arrow should end\n\n\n\n\n\n\nendY\n\n\ny-value at which the arrow should end\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine style:\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:  using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a black arrow\nAddChartArrowLine(\"MyArrow-\" + ProcessingBarIndex, false, 10, 10, 0, 5, Color.Black, DashStyle.Solid, 4);\n\n\n\n\nAddChartArrowUp()\n\n\nDescription\n\n\nAddChartArowUp() draws an arrow pointing upwards:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartSquare()\n, \nAddChartTriangleUp()\n, \nAddChartTriangleDown()\n.\n\n\nUsage\n\n\nAddChartArrowUp(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartArrowUp(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IArrowUp (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar on which the arrow should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nDate/time at which the arrow should be drawn\n\n\n\n\n\n\ny\n\n\ny-value for the arrow\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a green arrow for the current bar 3 ticks below the low\nAddChartArrowUp(\"MyArrow-\" + ProcessingBarIndex, true, 0, Low[0] - 3*TickSize, Color.Green);\n\n\n\n\nAddChartDiamond()\n\n\nDescription\n\n\nAddChartDiamond() draws a diamond:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartSquare()\n, \nAddChartTriangleUp()\n, \nAddChartTriangleDown()\n.\n\n\nUsage\n\n\nAddChartDiamond(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartDiamond(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IDiamond (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nDefines the preceding bar on which the diamond should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time of the bar on which the diamond should be drawn\n\n\n\n\n\n\ny\n\n\ny-value on which the diamond should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a light blue diamond for the current bar 5 ticks below the low\nAddChartDiamond(\"MyDiamond-\" + ProcessingBarIndex, true, 0, Low[0] - 5*TickSize, Color.SteelBlue);\n\n\n\n\nAddChartDot()\n\n\nDescription\n\n\nAddChartDot() draws a dot:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartSquare()\n, \nAddChartTriangleUp()\n, \nAddChartTriangleDown()\n.\n\n\nUsage\n\n\nAddChartDot(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartDot(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IDot (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nDefines the preceding bar on which the dot should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nThe date/time at which the dot should be drawn\n\n\n\n\n\n\ny\n\n\ny-value at which the dot should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws an orange dot for the current bar 5 ticks above the high\nAddChartDot(\"MyDot-\" + ProcessingBarIndex, true, 0, High[0] + 5*TickSize, Color.Orange);\n\n\n\n\nAddChartEllipse()\n\n\nDescription\n\n\nAddChartEllipse() draws an ellipse.\n\n\nUsage\n\n\nAddChartEllipse(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartEllipse(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, Color areaColor, int areaOpacity)\nAddChartEllipse(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IEllipse (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nSets the preceding bar at which the ellipse should start\n\n\n\n\n\n\nstartTime\n\n\nDate/time at which the ellipse should start\n\n\n\n\n\n\nstartY\n\n\ny-value for the start of the ellipse\n\n\n\n\n\n\nbarsBackEnd\n\n\nSets the preceding bar at which the ellipse should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the ellipse should end\n\n\n\n\n\n\nendY\n\n\ny-value for the end of the ellipse\n\n\n\n\n\n\ncolor\n\n\nBorder color of the drawing object\n\n\n\n\n\n\nareaColor\n\n\nFill color of the drawing object\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color value between 0 and 255 (0 = completely transparent , 255 = completely opaque)\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a yellow ellipse from the current bar to 5 bars ago\nAddChartEllipse(\"MyEllipse-\" + ProcessingBarIndex, true, 5, High[5], 0, Close[0], Color.Yellow, Color.Yellow, 1);\n\n\n\n\nAddChartExtendedLine()\n\n\nDescription\n\n\nAddChartExtendedLine() draws a line with an infinite end point.\n\n\nSee \nAddChartLine()\n, \nAddChartHorizontalLine()\n, \nAddChartVerticalLine()\n, \nAddChartRay()\n.\n\n\nUsage\n\n\nAddChartExtendedLine(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartExtendedLine(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, DashStyle dashStyle, int width)\nAddChartExtendedLine(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IExtendedLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nNumber of bars ago for the start point\n\n\n\n\n\n\nstartTime\n\n\nDate/time for the start point\n\n\n\n\n\n\nstartY\n\n\ny-value for the start point\n\n\n\n\n\n\nbarsBackEnd\n\n\nNumber of bars ago for the second point (a true end point does not exist; the line extends to infinity)\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end point\n\n\n\n\n\n\nendY\n\n\ny-value for the end point\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine styl :\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:   using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a line without an end point\nAddChartExtendedLine(\"MyExt.LevelLine-\" + ProcessingBarIndex, false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);\n\n\n\n\nAddChartFibonacciCircle()\n\n\nDescription\n\n\nAddChartFibonacciCircle() draws a Fibonacci circle.\n\n\nUsage\n\n\nAddChartFibonacciCircle(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY)\nAddChartFibonacciCircle(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciCircle (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nDefines the starting point in terms of bars ago\n\n\n\n\n\n\nstartTime\n\n\nDate/time of the bar for the starting point\n\n\n\n\n\n\nstartY\n\n\ny-value for the start of the Fibonacci circle\n\n\n\n\n\n\nbarsBackEnd\n\n\nDefines the end point in terms of bars ago\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end of the Fibonacci circle\n\n\n\n\n\n\nendY\n\n\ny-value for the end point of the Fibonacci circle\n\n\n\n\n\n\n\n\nExample\n\n\n//Draws a Fibonacci circle\nAddChartFibonacciCircle(\"MyFibCircle-\" + ProcessingBarIndex, true, 5, Low[5], 0, High[0]);\n\n\n\n\nAddChartFibonacciExtensions()\n\n\nDescription\n\n\nAddChartFibonacciExtensions() draws Fibonacci extensions.\n\n\nUsage\n\n\nAddChartFibonacciExtensions(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y)\nAddChartFibonacciExtensions(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciExtensions (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstart1BarsAgo\n\n\nNumber of bars ago for start point 1\n\n\n\n\n\n\nstart1Time\n\n\nDate/time for start point 1\n\n\n\n\n\n\nstart1Y\n\n\ny-value for start point 1\n\n\n\n\n\n\nstart2BarsAgo\n\n\nNumber of bars ago for start point 2\n\n\n\n\n\n\nstart2Time\n\n\nDate/time for start point 2\n\n\n\n\n\n\nstart2Y\n\n\ny-value for the start point 2\n\n\n\n\n\n\nstart3BarsAgo\n\n\nNumber of bars ago for start point 3\n\n\n\n\n\n\nstart3Time\n\n\nDate/time for start point 3\n\n\n\n\n\n\nstart3Y\n\n\ny-value for start point 3\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws Fibonacci extensions\nAddChartFibonacciExtensions(\"MyFibExt-\" + ProcessingBarIndex, true, 4, Low[4], 3, High[3], 1, Low[1]);\n\n\n\n\nAddChartFibonacciProjections()\n\n\nDescription\n\n\nDraw Fibonacci Projections () sketches Fibonacci Projections.\n\n\nUsage\n\n\nAddChartFibonacciProjections(string name, bool autoScale, DateTime start1Time, double start1Y,DateTime start2Time, double start2Y, DateTime start3Time, double start3Y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciProjections (Interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstart1Time\n\n\nDate/time for start point 1\n\n\n\n\n\n\nstart1Y\n\n\ny-value for start point 1\n\n\n\n\n\n\nstart2Time\n\n\nDate/time for start point 2\n\n\n\n\n\n\nstart2Y\n\n\ny-value for the start point 2\n\n\n\n\n\n\nstart3Time\n\n\nDate/time for start point 3\n\n\n\n\n\n\nstart3Y\n\n\ny-value for start point 3\n\n\n\n\n\n\n\n\nExample\n\n\n// zeichnet FibonacciProjections\nAddChartFibonacciProjections(\"MyFibPro-\" + ProcessingBarIndex, true, Low[4], 3, High[3], 1, Low[1], 2);\n\n\n\n\n\nAddChartFibonacciRetracements()\n\n\nDescription\n\n\nAddChartFibonacciRetracements() draws Fibonacci retracements.\n\n\nUsage\n\n\nAddChartFibonacciRetracements(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY)\nAddChartFibonacciRetracements(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciRetracements (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nDefines how many bars ago the starting point of the Fibonacci retracement is located\n\n\n\n\n\n\nstartTime\n\n\nDate/time of the bar at which the Fibonacci retracement should begin\n\n\n\n\n\n\nstartY\n\n\ny-value at which the Fibonacci retracement will begin\n\n\n\n\n\n\nbarsBackEnd\n\n\nDefines how many bars ago the end point of the Fibonacci retracement is located\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the Fibonacci retracement should end\n\n\n\n\n\n\nendY\n\n\ny-value at which the Fibonacci retracement should end\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws Fibonnaci retracements\nAddChartFibonacciRetracements(\"MyFibRet-\" + ProcessingBarIndex, true, 10, Low[10], 0, High[0]);\n\n\n\n\nAddChartFibonacciTimeExtensions()\n\n\nDescription\n\n\nAddChartFibonacciTimeExtensions() draws Fibonacci time extensions.\n\n\nUsage\n\n\nAddChartFibonacciTimeExtensions(string name, int barsBackStart, double startY, int barsBackEnd, double endY)\nAddChartFibonacciTimeExtensions(string name, DateTime startTime, double startY, DateTime endTime, double endY)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IFibonacciTimeExtensions (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nbarsBackStart\n\n\nDefines how many bars ago the extensions should start\n\n\n\n\n\n\nstartTime\n\n\nDate/time at which the extensions should start\n\n\n\n\n\n\nstartY\n\n\ny-value at which the extensions should start\n\n\n\n\n\n\nbarsBackEnd\n\n\nDefines how many bars ago the extensions should end\n\n\n\n\n\n\nendTime\n\n\nDate/time at which the extensions should end\n\n\n\n\n\n\nendY\n\n\ny-value at which the extensions should end\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws Fibonacci time extensions\nAddChartFibonacciTimeExtensions(\"MyFibTimeExt-\" + ProcessingBarIndex, 10, Low[10], 0, High[0]);\n\n\n\n\nAddChartGannFan()\n\n\nDescription\n\n\nAddChartGannFan() draws a Gann fan.\n\n\nUsage\n\n\nAddChartGannFan(string name, bool autoScale, int barsAgo, double y)\nAddChartGannFan(string name, bool autoScale, DateTime time, double y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IGannFan (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar on which the Gann fan should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time at which the Gann fan should start\n\n\n\n\n\n\ny\n\n\ny-value for the Gann fan\n\n\n\n\n\n\n\n\nExample\n\n\n// Shows a Gann fan at the low of the bar from 10 periods ago\nAddChartGannFan(\"MyGannFan-\" + ProcessingBarIndex, true, 10, Low[10]);\n\n\n\n\nAddChartHorizontalLine()\n\n\nDescription\n\n\nAddChartHorizontalLine() draws a horizontal line in the chart.\n\n\nSee \nAddChartLine()\n, \nAddChartVerticalLine()\n, \nAddChartExtendedLine()\n, \nAddChartRay()\n.\n\n\nUsage\n\n\nAddChartHorizontalLine(string name, double y, Color color)\nAddChartHorizontalLine(string name, bool autoScale, double y, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IHorizontalLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\ny\n\n\nAny double value of your choice\n\n\n\n\n\n\ncolor\n\n\nLevelLine color\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine style:\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:  using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a horizontal line at y=10\nAddChartHorizontalLine(\"MyHorizontalLine-\" + ProcessingBarIndex, 10, Color.Black);\n\n\n\n\nAddChartLine()\n\n\nDescription\n\n\nAddChartLine() draws a (trend) line.\n\n\nSee \nAddChartHorizontalLine()\n, \nAddChartVerticalLine()\n, \nAddChartExtendedLine()\n, \nAddChartRay()\n.\n\n\nUsage\n\n\nAddChartLine(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartLine(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, DashStyle dashStyle, int width)\nAddChartLine(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITrendLine (interface).\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nNumber of bars ago for the starting point\n\n\n\n\n\n\nstartTime\n\n\nDate/time for the starting point\n\n\n\n\n\n\nstartY\n\n\ny-value for the starting point\n\n\n\n\n\n\nbarsBackEnd\n\n\nNumber of bars ago for the end point\n\n\n\n\n\n\nendTime\n\n\nDate/time for the end point\n\n\n\n\n\n\nendY\n\n\ny-value for the end point\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine style:\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate: using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength in points\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a line\nAddChartLine(\"MyLine-\" + ProcessingBarIndex, false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);\n\n\n\n\nAddChartRay()\n\n\nDescription\n\n\nAddChartRay() draws a (trend) line and extends it to infinity.\n\n\nSee \nAddChartLine()\n, \nAddChartHorizontalLine()\n, \nAddChartVerticalLine()\n, \nAddChartExtendedLine()\n.\n\n\nUsage\n\n\nAddChartRay(string name, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, Color color)\nAddChartRay(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, Color color, DashStyle dashStyle, int width)\nAddChartRay(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRay (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstart1BarsAgo\n\n\nNumber of bars ago for start point 1\n\n\n\n\n\n\nstart1Time\n\n\nDate/time for anstartchor point 1\n\n\n\n\n\n\nstart1Y\n\n\ny-value for start point 1\n\n\n\n\n\n\nstart2BarsAgo\n\n\nNumber of bars ago for start point 2\n\n\n\n\n\n\nstart2Time\n\n\nDate/time for start point 2\n\n\n\n\n\n\nstart2Y\n\n\ny-value for start point 2\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate:  using System.Drawing.Drawing2D;\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a line from the bar from 10 periods ago to the current bar (x-axis)\n// --> line is extended to the right\n// from y=3 to y=7\nAddChartRay(\"MyRay-\" + ProcessingBarIndex, 10, 3, 0, 7, Color.Green);\n// Draws a line from the current bar to the bar from 10 periods ago\n// --> line is extended to the left\n// from y=3 to y=7\nAddChartRay(\"MyRay-\" + ProcessingBarIndex, 0, 3, 10, 7, Color.Green);\n\n\n\n\nAddChartRectangle()\n\n\nDescription\n\n\nAddChartRectangle() draws a rectangle.\n\n\nUsage\n\n\nAddChartRectangle(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartRectangle(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, Color areaColor, int areaOpacity)\nAddChartRectangle(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRectangle (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nSets the preceding bar at which the one corner of the rectangle should be located (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nDate/time at which the start of the one rectangle corner should be located\n\n\n\n\n\n\nstartY\n\n\ny-value at which the one corner of the rectangle should be located\n\n\n\n\n\n\nbarsBackEnd\n\n\nSets the preceding bar at which the second corner of the rectangle should be located (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nDate/time of the second rectangle corner\n\n\n\n\n\n\nendY\n\n\ny-value of the second rectangle corner\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\nareaColor\n\n\nFill color of the drawing object\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a green rectangle from the low of 10 periods ago to the high of 5 periods ago\n// with a fill color of pale green and a transparency of 2\nAddChartRectangle(\"MyRect-\" + ProcessingBarIndex, true, 10, Low[10], 5, High[5], Color.PaleGreen, Color.PaleGreen, 2);\n\n\n\n\nAddChartRegion()\n\n\nDescription\n\n\nAddChartRegion() fills a specific area on a chart.\n\n\nUsage\n\n\nAddChartRegion(string name, int barsBackStart, int barsBackEnd, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nAddChartRegion(string name, int barsBackStart, int barsBackEnd, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)\nAddChartRegion(string name, DateTime startTime, DateTime endTime, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nAddChartRegion(string name, DateTime startTime, DateTime endTime, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRegion (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nbarsBackStart\n\n\nSets the preceding bar at which the drawing should begin (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nStart time for the drawing\n\n\n\n\n\n\nbarsBackEnd\n\n\nSets the preceding bar at which the drawing should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nEnd time for the drawing\n\n\n\n\n\n\nseries1, series2\n\n\nEvery data series, for example an indicator, close, high, low and so on. The respective value of the data series for the current bar is used as a y-value.\n\n\n\n\n\n\ny\n\n\nAny double value\n\n\n\n\n\n\noutlineColor\n\n\nColor for the border\n\n\n\n\n\n\nareaColor\n\n\nFill color for the area\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)\n\n\n\n\n\n\n\n\nExample\n\n\n// Fills the area between the upper and lower Bollinger Bands\nAddChartRegion(\"MyRegion-\" + ProcessingBarIndex, ProcessingBarIndex, 0, Bollinger(2, 14).Upper, Bollinger(2, 14).Lower, Color.Empty, Color.Lime, 100);\n\n\n\n\nAddChartRegressionChannel()\n\n\nDescription\n\n\nAddChartRegressionChannel() draws a regression channel.\n\n\nUsage\n\n\nAddChartRegressionChannel(string name, int barsBackStart, int barsBackEnd, Color color)\nAddChartRegressionChannel(string name, bool autoScale, int barsBackStart, int barsBackEnd, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)\nAddChartRegressionChannel(string name, bool autoScale, DateTime startTime, DateTime endTime, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IRegressionChannel (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsBackStart\n\n\nSets the preceding bar at which the regression channel should start (0 = current bar)\n\n\n\n\n\n\nstartTime\n\n\nStart time for the regression channel\n\n\n\n\n\n\nbarsBackEnd\n\n\nSets the preceding bar at which the regression channel should end (0 = current bar)\n\n\n\n\n\n\nendTime\n\n\nEnd time for the regression channel\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\nupperDashStyle, middleDashStyle, lowerDashStyle\n\n\nLevelLine style:\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou may have to integrate: using System.Drawing.Drawing2D;\n\n\n\n\n\n\nupperColor,  middleColor,    lowerColor\n\n\nLevelLine color\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nupperWidth,   middleWidth,  lowerWidth\n\n\nLevelLine strength\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a regression channel from the low of the bar from 10 days ago to the high of the bar from 5 days ago.\nAddChartRegressionChannel(\"MyRegChannel-\" + ProcessingBarIndex, 10, 0, Color.Black);\n\n\n\n\nAddChartSquare()\n\n\nDescription\n\n\nAddChartSquare() draws a square:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartTriangleUp()\n, \nAddChartTriangleDown()\n.\n\n\nUsage\n\n\nDrawSqare(string name, bool autoScale, int barsAgo, double y, Color color)\nDrawSqare(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ISquare (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets the preceding bar at which the square should be drawn (0 = current bar)\n\n\n\n\n\n\nTime\n\n\nDate/time of the bar at which the square should be drawn\n\n\n\n\n\n\nY\n\n\ny-value for the square\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a dark red square at the current bar 10 ticks above the high\nAddChartSquare(\"MySquare-\" + ProcessingBarIndex, true, 0, High[0] + 10*TickSize, Color.DarkRed);\n\n\n\n\nAddChartText()\n\n\nDescription\n\n\nAddChartText() writes whatever text you want onto the chart using price and datetime coordinates.\n\n\nSee \nAddChartTextFixed()\n.\n\n\nUsage\n\n\nAddChartText(string tag, string text, int barsAgo, double y, Color color);\nAddChartText(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, string text, int barsAgo, double y, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, DateTime x, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, DateTime x, double y, int pixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment hAlign, VerticalAlignment vAlign, Color outlineColor, Color areaColor);\nAddChartText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment hAlign, VerticalAlignment vAlign, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, DateTime x, double y, int pixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment hAlign, VerticalAlignment vAlign, Color outlineColor, Color areaColor);   \n\n\n\n\nImportant note:\n\nWhen using signatures that contain horizontal alignment and vertical alignment, you need to add the following lines:\n\n\nusing System.Windows.Forms;\nusing System.Windows.Forms.VisualStyles;\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IText (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nText\n\n\nText to be displayed (may contain escape sequences)\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the text should be displayed\n\n\n\n\n\n\nTime\n\n\nDate/time of the bar at which the text should begin\n\n\n\n\n\n\nY\n\n\ny-value at which the text should be written\n\n\n\n\n\n\nyPixelOffset\n\n\nVertical offset of the text; positive numbers move it up, and negative numbers move it down\n\n\n\n\n\n\ntextColor\n\n\nText color\n\n\n\n\n\n\nFont\n\n\nFont\n\n\n\n\n\n\nAlignment\n\n\nPossible values are: StringAlignment.Center, StringAlignment.Far, StringAlignment.Near\n\n\n\n\n\n\nHAlign\n\n\nPossible values are: HorizontalAlign.Left, HorizontalAlign.Center, HorizontalAlign.Right\n\n\n\n\n\n\nVAlign\n\n\nPossible values are: VerticalAlign.Top, VerticalAlign.Center, VerticalAlign.Bottom\n\n\n\n\n\n\noutlineColor\n\n\nBorder color around the text (for no border, select Color.Empty)\n\n\n\n\n\n\nareaColor\n\n\nFill color for the text box\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)\n\n\n\n\n\n\n\n\nExample\n\n\n// writes text at y=3.0\nAddChartText(\"MyText-\" + ProcessingBarIndex, \"This is sample text.\", 10, 3, Color.Black);\n// writes red text in the font Arial 7\nAddChartText(\"MyText-\" + ProcessingBarIndex, false, \"This is sample text.\", Time[0], Close[0]+50*TickSize, 0,\nColor.Red, new Font(\"Arial\",7), StringAlignment.Center, Color.Blue, Color.DarkOliveGreen, 10);\n\n\n\n\nThis leads to the following result:\n\n\n\n\nAddChartText(\"MyTag-\" + ProcessingBarIndex,true,\"Text\",1,\n// barsAgo\nHigh[1], // y\n10, // yPixelOffset\nColor.Blue, // Text color\nnew Font(\"Arial\", 10, FontStyle.Bold),\nStringAlignment.Center,\nHorizontalAlignment.Center,\nVerticalAlignment.Bottom,\nColor.Red, // Outline color\nColor.Yellow, // Fill color\n100); // Opacity\n\n\n\n\nAddChartTextFixed()\n\n\nDescription\n\n\nAddChartTextFixed() writes text into one of 5 predetermined locations on the chart.\n\n\nSee \nAddChartText()\n.\n\n\nUsage\n\n\nAddChartTextFixed(string tag, string text, TextPosition textPosition);\nAddChartTextFixed(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor);\nAddChartTextFixed(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor, int areaOpacity);\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITextFixed (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\ntext\n\n\nThe text to be displayed\n\n\n\n\n\n\nTextPosition\n\n\nTextPosition.BottomLeft, TextPosition.BottomRight, TextPosition.Center, TextPosition.TopLeft, TextPosition.TopRight\n\n\n\n\n\n\ntextColor\n\n\nText color\n\n\n\n\n\n\nfont\n\n\nFont\n\n\n\n\n\n\noutlineColor\n\n\nColor for the border around the text. For no border color, use Color.Empty\n\n\n\n\n\n\nareaColor\n\n\nFill color of the text box. For no fill color, use Color.Empty\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)\n\n\n\n\n\n\n\n\nExample\n\n\n// Writes text into the middle of the chart\nAddChartTextFixed(\"MyText\", \"This is sample text.\", TextPosition.Center);\n// Writes red text with a blue border into the middle of the chart\nAddChartTextFixed(\"MyText\", \"This is sample text.\", TextPosition.Center, Color.Red, new Font(\"Arial\",35), Color.Blue, Color.Empty, 10);\n\n\n\n\nAddChartTrendChannel()\n\n\nDescription\n\n\nAddChartTrendChannel() draws a trend channel.\n\n\nUsage\n\n\nAddChartTrendChannel(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y)\nAddChartTrendChannel(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITrendChannel (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstart1BarsAgo\n\n\nNumber of bars ago for start point 1 (x-axis)\n\n\n\n\n\n\nstart1Time\n\n\nDate/time for start point 1 (x-axis)\n\n\n\n\n\n\nstart1Y\n\n\ny-value for start point 1\n\n\n\n\n\n\nstart2BarsAgo\n\n\nNumber of bars ago for start point 2 (x-axis)\n\n\n\n\n\n\nstart2Time\n\n\nDate/time for start point 2 (x-axis)\n\n\n\n\n\n\nstart2Y\n\n\ny-value for start point 2\n\n\n\n\n\n\nstart3BarsAgo\n\n\nNumber of bars ago for start point 3 (x-axis)\n\n\n\n\n\n\nstart3Time\n\n\nDate/time for start point 3 (x-axis)\n\n\n\n\n\n\nstart3Y\n\n\ny-value for start point 3\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a trend channel\nAddChartTrendChannel(\"MyTrendChannel-\" + ProcessingBarIndex, true, 10, Low[10], 0, High[0], 10, High[10] + 5 * TickSize);\n\n\n\n\nAddChartTriangle()\n\n\nDescription\n\n\nAddChartTriangle() draws a triangle.\n\n\nUsage\n\n\nAddChartTriangle(string name, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y, Color color)\nAddChartTriangle(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y, Color color, Color areaColor, int areaOpacity)\nAddChartTriangle(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y, Color color, Color areaColor, int areaOpacity)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITriangle (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nstart1BarsAgo\n\n\nNumber of bars ago for start point 1 (x-axis)\n\n\n\n\n\n\nstart1Time\n\n\nDate/time for start point 1 (x-axis)\n\n\n\n\n\n\nstart1Y\n\n\ny-value for start point 1\n\n\n\n\n\n\nstart2BarsAgo\n\n\nNumber of bars ago for start point 2 (x-axis)\n\n\n\n\n\n\nstart2Time\n\n\nDate/time for start point 2 (x-axis)\n\n\n\n\n\n\nstart2Y\n\n\ny-value for start point 2\n\n\n\n\n\n\nstart3BarsAgo\n\n\nNumber of bars ago for start point 3 (x-axis)\n\n\n\n\n\n\nstart3Time\n\n\nDate/time for start point 3 (x-axis)\n\n\n\n\n\n\nstart3Y\n\n\ny-value for start point 3\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\nareaColor\n\n\nFill color of the drawing object\n\n\n\n\n\n\nareaOpacity\n\n\nTransparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a green triangle\nAddChartTriangle(\"tag1-\" + ProcessingBarIndex, 4, Low[4], 3, High[3], 1, Low[1], Color.Green);\n\n\n\n\nAddChartTriangleDown()\n\n\nDescription\n\n\nAddChartTriangleDown() draws a small downwards-pointing triangle:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartSquare()\n, \nAddChartTriangleUp()\n.\n\n\nUsage\n\n\nAddChartTriangleDown(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartTriangleDown(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITriangleDown (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the triangle should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time for the bar at which the triangle should be drawn\n\n\n\n\n\n\nY\n\n\ny-value at which the triangle should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a small red triangle at the current bar 10 ticks above the high\nAddChartTriangleDown(\"MyTriangleDown-\" + ProcessingBarIndex, true, 0, High[0] + 10*TickSize, Color.Red);\n\n\n\n\nAddChartTriangleUp()\n\n\nDescription\n\n\nAddChartTriangleUp() draws a small upwards-pointing triangle:\n\n\n\n\nSee \nAddChartArrowUp()\n, \nAddChartArrowDown()\n, \nAddChartDiamond()\n, \nAddChartDot()\n, \nAddChartSquare()\n, \nAddChartTriangleDown()\n.\n\n\nUsage\n\n\nAddChartTriangleUp(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartTriangleUp(string name, bool autoScale, DateTime time, double y, Color color)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type ITriangleUp (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nautoScale\n\n\nAdjusts the scale of the y-axis so that drawing objects can be viewed in their entirety\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the triangle should be drawn\n\n\n\n\n\n\ntime\n\n\nDate/time for the bar at which the triangle should be drawn\n\n\n\n\n\n\ny\n\n\ny-value at which the triangle should be drawn\n\n\n\n\n\n\ncolor\n\n\nColor of the drawing object\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a small light green triangle at the current bar 10 ticks below the low\nAddChartTriangleUp(\"MyTriangleUp-\" + ProcessingBarIndex, true, 0, Low[0] - 10*TickSize, Color.LightGreen);\n\n\n\n\nAddChartVerticalLine()\n\n\nDescription\n\n\nAddChartVerticalLine() draws a vertical line in the chart.\n\n\nSee \nAddChartLine()\n, \nAddChartHorizontalLine()\n, \nAddChartExtendedLine()\n, \nAddChartRay()\n.\n\n\nUsage\n\n\nAddChartVerticalLine(string name, int barsAgo, Color color)\nAddChartVerticalLine(string name, int barsAgo, Color color, DashStyle dashStyle, int width)\nAddChartVerticalLine(string name, DateTime time, Color color, DashStyle dashStyle, int width)\n\n\n\n\nReturn Value\n\n\nA drawing object of the type IVerticalLine (interface)\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA clearly identifiable name for the drawing object\n\n\n\n\n\n\nbarsAgo\n\n\nSets how many bars ago the vertical line should be drawn (0 = current bar)\n\n\n\n\n\n\ntime\n\n\nDate/time of the bar at which the vertical line should be drawn\n\n\n\n\n\n\ncolor\n\n\nLevelLine color\n\n\n\n\n\n\ndashStyle\n\n\nLevelLine style\n\n\n\n\n\n\n\n\nDashStyle.Dash\n\n\n\n\n\n\n\n\nDashStyle.DashDot\n\n\n\n\n\n\n\n\nDashStyle.DashDotDot\n\n\n\n\n\n\n\n\nDashStyle.Dot\n\n\n\n\n\n\n\n\nDashStyle.Solid\n\n\n\n\n\n\nwidth\n\n\nLevelLine strength\n\n\n\n\n\n\n\n\nExample\n\n\n// Draws a vertical line at the bar from 10 periods ago\nAddChartVerticalLine(\"MyVerticalLine-\" + ProcessingBarIndex, 10, Color.Black);",
            "title": "Drawing objects"
        },
        {
            "location": "/drawing_objects/#drawingobjects",
            "text": "",
            "title": "DrawingObjects"
        },
        {
            "location": "/drawing_objects/#addchartandrewspitchfork",
            "text": "",
            "title": "AddChartAndrewsPitchfork()"
        },
        {
            "location": "/drawing_objects/#description",
            "text": "This drawing object draws an Andrew\u2019s Pitchfork.  Information concerning its usage:\n-    vtad.de \n-    hvolumen-analyse.de \n-    Godmode-Trader.de",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage",
            "text": "AddChartAndrewsPitchfork(string name, bool autoScale, int start1BarsBack, double start1Y, int start2BarsBack, double start2Y, int start3BarsBack, double start3Y, Color color, DashStyle dashStyle, int width)\nAddChartAndrewsPitchfork(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value",
            "text": "A drawing object of the type IAndrewsPitchfork (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    start1BarsBack  Number of bars ago for start point 1 (x-axis)    start1Time  Date/time for start point 1 (x-axis)    start1Y  y-value for start point 1    start2BarsBack  Number of bars ago for start point 2 (x-axis)    start2Time  Date/time for start point 2 (x-axis)    start2Y  y-value for start point 2    start3BarsBack  Number of bars ago for start point 3 (x-axis)    start3Time  Date/time for start point 3 (x-axis)    start3Y  y-value for start point 3    color  Color of the object    dashStyle  LevelLine styles:     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate: using System.Drawing.Drawing2D;    width  LevelLine strength in points",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example",
            "text": "// Draw the Andrew\u2019s Pitchfork (\u201cMyAPF\u201d)\nAddChartAndrewsPitchfork(\"MyAPF-\" + ProcessingBarIndex, true, 4, Low[4], 3, High[3], 1, Low[1], Color.Black, DashStyle.Solid, 2);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartarc",
            "text": "",
            "title": "AddChartArc()"
        },
        {
            "location": "/drawing_objects/#description_1",
            "text": "AddChartArc() draws a circular arc.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_1",
            "text": "AddChartArc(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartArc(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, DashStyle dashStyle, int width)\nAddChartArc(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_1",
            "text": "A drawing object of the type IArc (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_1",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Number of bars ago for the starting point    startTime  Date/time for the starting point    startY  y-value for the starting point    barsBackEnd  Number of bars ago for the end point    endTime  Date/time for the end point    endY  y-value for the end point    color  Color of the drawing object    dashStyle  LevelLine style:     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate: using System.Drawing.Drawing2D;    width  LevelLine strength in points",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_1",
            "text": "// AddChart a blue arc\nAddChartArc(\"MyArc-\" + ProcessingBarIndex, true, 10, 10, 0, 20, Color.Blue, DashStyle.Solid, 3);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartarrowdown",
            "text": "",
            "title": "AddChartArrowDown()"
        },
        {
            "location": "/drawing_objects/#description_2",
            "text": "AddChartArrowDown() draws an arrow pointing downwards:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartSquare() ,  AddChartTriangleUp() ,  AddChartTriangleDown() ).",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_2",
            "text": "AddChartArrowDown(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartArrowDown(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_2",
            "text": "A drawing object of the type IArrowDown (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_2",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar on which the arrow should be drawn (0 = current bar)    time  Date/time of the bar on which the arrow should be drawn    y  y-value for the arrow    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_2",
            "text": "// Draws a red arrow 3 ticks above the high for the current bar\nAddChartArrowDown(\"MyArrow-\" + ProcessingBarIndex, true, 0, High[0] + 3*TickSize, Color.Red);\n// Draws a red arrow on a three-bar reversal pattern\nif(High[2] > High[3] && High[1] > High[2] && Close[0] < Open[0])\nAddChartArrowDown(ProcessingBarIndex.ToString(), true, 0, High[0] + 3*TickSize, Color.Red);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartarrowline",
            "text": "",
            "title": "AddChartArrowLine()"
        },
        {
            "location": "/drawing_objects/#description_3",
            "text": "AddChartArrowLine() draws an arrow:",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_3",
            "text": "AddChartArrowLine (string name,  int  barsBackStart,  double  startY,  int  barsBackEnd,  double  endY, Color color)\n AddChartArrowLine (string name,  bool  autoScale,  int  barsBackStart,  double  startY,  int  barsBackEnd,  double  endY, Color color, DashStyle dashStyle,  int  width)\n AddChartArrowLine (string name,  bool  autoScale, DateTime startTime,  double  startY, DateTime endTime,  double  endY, Color color, DashStyle dashStyle,  int  width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_3",
            "text": "A drawing object of the type IArrowLine (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_3",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Sets the preceding bar at which the arrow should start (0 = current bar)    startTime  Date/time of the bar at which the arrow should start    startY  y-value for the starting point of the arrow    barsBackEnd  Sets the preceding bar at which the arrow should end (0 = current bar)    endTime  Date/time at which the arrow should end    endY  y-value at which the arrow should end    color  Color of the drawing object    dashStyle  LevelLine style:     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:  using System.Drawing.Drawing2D;    width  LevelLine strength in points",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_3",
            "text": "// Draws a black arrow\nAddChartArrowLine(\"MyArrow-\" + ProcessingBarIndex, false, 10, 10, 0, 5, Color.Black, DashStyle.Solid, 4);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartarrowup",
            "text": "",
            "title": "AddChartArrowUp()"
        },
        {
            "location": "/drawing_objects/#description_4",
            "text": "AddChartArowUp() draws an arrow pointing upwards:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartSquare() ,  AddChartTriangleUp() ,  AddChartTriangleDown() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_4",
            "text": "AddChartArrowUp(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartArrowUp(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_4",
            "text": "A drawing object of the type IArrowUp (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_4",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar on which the arrow should be drawn (0 = current bar)    time  Date/time at which the arrow should be drawn    y  y-value for the arrow    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_4",
            "text": "// Draws a green arrow for the current bar 3 ticks below the low\nAddChartArrowUp(\"MyArrow-\" + ProcessingBarIndex, true, 0, Low[0] - 3*TickSize, Color.Green);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartdiamond",
            "text": "",
            "title": "AddChartDiamond()"
        },
        {
            "location": "/drawing_objects/#description_5",
            "text": "AddChartDiamond() draws a diamond:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartSquare() ,  AddChartTriangleUp() ,  AddChartTriangleDown() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_5",
            "text": "AddChartDiamond(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartDiamond(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_5",
            "text": "A drawing object of the type IDiamond (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_5",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Defines the preceding bar on which the diamond should be drawn    time  Date/time of the bar on which the diamond should be drawn    y  y-value on which the diamond should be drawn    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_5",
            "text": "// Draws a light blue diamond for the current bar 5 ticks below the low\nAddChartDiamond(\"MyDiamond-\" + ProcessingBarIndex, true, 0, Low[0] - 5*TickSize, Color.SteelBlue);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartdot",
            "text": "",
            "title": "AddChartDot()"
        },
        {
            "location": "/drawing_objects/#description_6",
            "text": "AddChartDot() draws a dot:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartSquare() ,  AddChartTriangleUp() ,  AddChartTriangleDown() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_6",
            "text": "AddChartDot(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartDot(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_6",
            "text": "A drawing object of the type IDot (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_6",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Defines the preceding bar on which the dot should be drawn (0 = current bar)    time  The date/time at which the dot should be drawn    y  y-value at which the dot should be drawn    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_6",
            "text": "// Draws an orange dot for the current bar 5 ticks above the high\nAddChartDot(\"MyDot-\" + ProcessingBarIndex, true, 0, High[0] + 5*TickSize, Color.Orange);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartellipse",
            "text": "",
            "title": "AddChartEllipse()"
        },
        {
            "location": "/drawing_objects/#description_7",
            "text": "AddChartEllipse() draws an ellipse.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_7",
            "text": "AddChartEllipse(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartEllipse(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, Color areaColor, int areaOpacity)\nAddChartEllipse(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_7",
            "text": "A drawing object of the type IEllipse (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_7",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Sets the preceding bar at which the ellipse should start    startTime  Date/time at which the ellipse should start    startY  y-value for the start of the ellipse    barsBackEnd  Sets the preceding bar at which the ellipse should end (0 = current bar)    endTime  Date/time at which the ellipse should end    endY  y-value for the end of the ellipse    color  Border color of the drawing object    areaColor  Fill color of the drawing object    areaOpacity  Transparency of the fill color value between 0 and 255 (0 = completely transparent , 255 = completely opaque)",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_7",
            "text": "// Draws a yellow ellipse from the current bar to 5 bars ago\nAddChartEllipse(\"MyEllipse-\" + ProcessingBarIndex, true, 5, High[5], 0, Close[0], Color.Yellow, Color.Yellow, 1);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartextendedline",
            "text": "",
            "title": "AddChartExtendedLine()"
        },
        {
            "location": "/drawing_objects/#description_8",
            "text": "AddChartExtendedLine() draws a line with an infinite end point.  See  AddChartLine() ,  AddChartHorizontalLine() ,  AddChartVerticalLine() ,  AddChartRay() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_8",
            "text": "AddChartExtendedLine(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartExtendedLine(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, DashStyle dashStyle, int width)\nAddChartExtendedLine(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_8",
            "text": "A drawing object of the type IExtendedLine (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_8",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Number of bars ago for the start point    startTime  Date/time for the start point    startY  y-value for the start point    barsBackEnd  Number of bars ago for the second point (a true end point does not exist; the line extends to infinity)    endTime  Date/time for the end point    endY  y-value for the end point    color  Color of the drawing object    dashStyle  LevelLine styl :     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:   using System.Drawing.Drawing2D;    width  LevelLine strength in points",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_8",
            "text": "// Draws a line without an end point\nAddChartExtendedLine(\"MyExt.LevelLine-\" + ProcessingBarIndex, false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartfibonaccicircle",
            "text": "",
            "title": "AddChartFibonacciCircle()"
        },
        {
            "location": "/drawing_objects/#description_9",
            "text": "AddChartFibonacciCircle() draws a Fibonacci circle.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_9",
            "text": "AddChartFibonacciCircle(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY)\nAddChartFibonacciCircle(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_9",
            "text": "A drawing object of the type IFibonacciCircle (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_9",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Defines the starting point in terms of bars ago    startTime  Date/time of the bar for the starting point    startY  y-value for the start of the Fibonacci circle    barsBackEnd  Defines the end point in terms of bars ago    endTime  Date/time for the end of the Fibonacci circle    endY  y-value for the end point of the Fibonacci circle",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_9",
            "text": "//Draws a Fibonacci circle\nAddChartFibonacciCircle(\"MyFibCircle-\" + ProcessingBarIndex, true, 5, Low[5], 0, High[0]);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartfibonacciextensions",
            "text": "",
            "title": "AddChartFibonacciExtensions()"
        },
        {
            "location": "/drawing_objects/#description_10",
            "text": "AddChartFibonacciExtensions() draws Fibonacci extensions.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_10",
            "text": "AddChartFibonacciExtensions(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y)\nAddChartFibonacciExtensions(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_10",
            "text": "A drawing object of the type IFibonacciExtensions (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_10",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    start1BarsAgo  Number of bars ago for start point 1    start1Time  Date/time for start point 1    start1Y  y-value for start point 1    start2BarsAgo  Number of bars ago for start point 2    start2Time  Date/time for start point 2    start2Y  y-value for the start point 2    start3BarsAgo  Number of bars ago for start point 3    start3Time  Date/time for start point 3    start3Y  y-value for start point 3",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_10",
            "text": "// Draws Fibonacci extensions\nAddChartFibonacciExtensions(\"MyFibExt-\" + ProcessingBarIndex, true, 4, Low[4], 3, High[3], 1, Low[1]);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartfibonacciprojections",
            "text": "",
            "title": "AddChartFibonacciProjections()"
        },
        {
            "location": "/drawing_objects/#description_11",
            "text": "Draw Fibonacci Projections () sketches Fibonacci Projections.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_11",
            "text": "AddChartFibonacciProjections(string name, bool autoScale, DateTime start1Time, double start1Y,DateTime start2Time, double start2Y, DateTime start3Time, double start3Y)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_11",
            "text": "A drawing object of the type IFibonacciProjections (Interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_11",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    start1Time  Date/time for start point 1    start1Y  y-value for start point 1    start2Time  Date/time for start point 2    start2Y  y-value for the start point 2    start3Time  Date/time for start point 3    start3Y  y-value for start point 3",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_11",
            "text": "// zeichnet FibonacciProjections\nAddChartFibonacciProjections(\"MyFibPro-\" + ProcessingBarIndex, true, Low[4], 3, High[3], 1, Low[1], 2);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartfibonacciretracements",
            "text": "",
            "title": "AddChartFibonacciRetracements()"
        },
        {
            "location": "/drawing_objects/#description_12",
            "text": "AddChartFibonacciRetracements() draws Fibonacci retracements.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_12",
            "text": "AddChartFibonacciRetracements(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY)\nAddChartFibonacciRetracements(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_12",
            "text": "A drawing object of the type IFibonacciRetracements (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_12",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Defines how many bars ago the starting point of the Fibonacci retracement is located    startTime  Date/time of the bar at which the Fibonacci retracement should begin    startY  y-value at which the Fibonacci retracement will begin    barsBackEnd  Defines how many bars ago the end point of the Fibonacci retracement is located    endTime  Date/time at which the Fibonacci retracement should end    endY  y-value at which the Fibonacci retracement should end",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_12",
            "text": "// Draws Fibonnaci retracements\nAddChartFibonacciRetracements(\"MyFibRet-\" + ProcessingBarIndex, true, 10, Low[10], 0, High[0]);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartfibonaccitimeextensions",
            "text": "",
            "title": "AddChartFibonacciTimeExtensions()"
        },
        {
            "location": "/drawing_objects/#description_13",
            "text": "AddChartFibonacciTimeExtensions() draws Fibonacci time extensions.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_13",
            "text": "AddChartFibonacciTimeExtensions(string name, int barsBackStart, double startY, int barsBackEnd, double endY)\nAddChartFibonacciTimeExtensions(string name, DateTime startTime, double startY, DateTime endTime, double endY)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_13",
            "text": "A drawing object of the type IFibonacciTimeExtensions (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_13",
            "text": "name  A clearly identifiable name for the drawing object    barsBackStart  Defines how many bars ago the extensions should start    startTime  Date/time at which the extensions should start    startY  y-value at which the extensions should start    barsBackEnd  Defines how many bars ago the extensions should end    endTime  Date/time at which the extensions should end    endY  y-value at which the extensions should end",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_13",
            "text": "// Draws Fibonacci time extensions\nAddChartFibonacciTimeExtensions(\"MyFibTimeExt-\" + ProcessingBarIndex, 10, Low[10], 0, High[0]);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartgannfan",
            "text": "",
            "title": "AddChartGannFan()"
        },
        {
            "location": "/drawing_objects/#description_14",
            "text": "AddChartGannFan() draws a Gann fan.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_14",
            "text": "AddChartGannFan(string name, bool autoScale, int barsAgo, double y)\nAddChartGannFan(string name, bool autoScale, DateTime time, double y)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_14",
            "text": "A drawing object of the type IGannFan (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_14",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar on which the Gann fan should be drawn    time  Date/time at which the Gann fan should start    y  y-value for the Gann fan",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_14",
            "text": "// Shows a Gann fan at the low of the bar from 10 periods ago\nAddChartGannFan(\"MyGannFan-\" + ProcessingBarIndex, true, 10, Low[10]);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharthorizontalline",
            "text": "",
            "title": "AddChartHorizontalLine()"
        },
        {
            "location": "/drawing_objects/#description_15",
            "text": "AddChartHorizontalLine() draws a horizontal line in the chart.  See  AddChartLine() ,  AddChartVerticalLine() ,  AddChartExtendedLine() ,  AddChartRay() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_15",
            "text": "AddChartHorizontalLine(string name, double y, Color color)\nAddChartHorizontalLine(string name, bool autoScale, double y, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_15",
            "text": "A drawing object of the type IHorizontalLine (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_15",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    y  Any double value of your choice    color  LevelLine color    dashStyle  LevelLine style:     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:  using System.Drawing.Drawing2D;    width  LevelLine strength",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_15",
            "text": "// Draws a horizontal line at y=10\nAddChartHorizontalLine(\"MyHorizontalLine-\" + ProcessingBarIndex, 10, Color.Black);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartline",
            "text": "",
            "title": "AddChartLine()"
        },
        {
            "location": "/drawing_objects/#description_16",
            "text": "AddChartLine() draws a (trend) line.  See  AddChartHorizontalLine() ,  AddChartVerticalLine() ,  AddChartExtendedLine() ,  AddChartRay() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_16",
            "text": "AddChartLine(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartLine(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, DashStyle dashStyle, int width)\nAddChartLine(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_16",
            "text": "A drawing object of the type ITrendLine (interface).",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_16",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Number of bars ago for the starting point    startTime  Date/time for the starting point    startY  y-value for the starting point    barsBackEnd  Number of bars ago for the end point    endTime  Date/time for the end point    endY  y-value for the end point    color  Color of the drawing object    dashStyle  LevelLine style:     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate: using System.Drawing.Drawing2D;    width  LevelLine strength in points",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_16",
            "text": "// Draws a line\nAddChartLine(\"MyLine-\" + ProcessingBarIndex, false, 10, Close[10], 0, Close[0], Color.Black, DashStyle.Solid, 1);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartray",
            "text": "",
            "title": "AddChartRay()"
        },
        {
            "location": "/drawing_objects/#description_17",
            "text": "AddChartRay() draws a (trend) line and extends it to infinity.  See  AddChartLine() ,  AddChartHorizontalLine() ,  AddChartVerticalLine() ,  AddChartExtendedLine() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_17",
            "text": "AddChartRay(string name, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, Color color)\nAddChartRay(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, Color color, DashStyle dashStyle, int width)\nAddChartRay(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_17",
            "text": "A drawing object of the type IRay (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_17",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    start1BarsAgo  Number of bars ago for start point 1    start1Time  Date/time for anstartchor point 1    start1Y  y-value for start point 1    start2BarsAgo  Number of bars ago for start point 2    start2Time  Date/time for start point 2    start2Y  y-value for start point 2    color  Color of the drawing object    dashStyle  LevelLine style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate:  using System.Drawing.Drawing2D;    width  LevelLine strength",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_17",
            "text": "// Draws a line from the bar from 10 periods ago to the current bar (x-axis)\n// --> line is extended to the right\n// from y=3 to y=7\nAddChartRay(\"MyRay-\" + ProcessingBarIndex, 10, 3, 0, 7, Color.Green);\n// Draws a line from the current bar to the bar from 10 periods ago\n// --> line is extended to the left\n// from y=3 to y=7\nAddChartRay(\"MyRay-\" + ProcessingBarIndex, 0, 3, 10, 7, Color.Green);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartrectangle",
            "text": "",
            "title": "AddChartRectangle()"
        },
        {
            "location": "/drawing_objects/#description_18",
            "text": "AddChartRectangle() draws a rectangle.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_18",
            "text": "AddChartRectangle(string name, int barsBackStart, double startY, int barsBackEnd, double endY, Color color)\nAddChartRectangle(string name, bool autoScale, int barsBackStart, double startY, int barsBackEnd, double endY, Color color, Color areaColor, int areaOpacity)\nAddChartRectangle(string name, bool autoScale, DateTime startTime, double startY, DateTime endTime, double endY, Color color, Color areaColor, int areaOpacity)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_18",
            "text": "A drawing object of the type IRectangle (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_18",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Sets the preceding bar at which the one corner of the rectangle should be located (0 = current bar)    startTime  Date/time at which the start of the one rectangle corner should be located    startY  y-value at which the one corner of the rectangle should be located    barsBackEnd  Sets the preceding bar at which the second corner of the rectangle should be located (0 = current bar)    endTime  Date/time of the second rectangle corner    endY  y-value of the second rectangle corner    color  Color of the drawing object    areaColor  Fill color of the drawing object    areaOpacity  Transparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_18",
            "text": "// Draws a green rectangle from the low of 10 periods ago to the high of 5 periods ago\n// with a fill color of pale green and a transparency of 2\nAddChartRectangle(\"MyRect-\" + ProcessingBarIndex, true, 10, Low[10], 5, High[5], Color.PaleGreen, Color.PaleGreen, 2);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartregion",
            "text": "",
            "title": "AddChartRegion()"
        },
        {
            "location": "/drawing_objects/#description_19",
            "text": "AddChartRegion() fills a specific area on a chart.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_19",
            "text": "AddChartRegion(string name, int barsBackStart, int barsBackEnd, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nAddChartRegion(string name, int barsBackStart, int barsBackEnd, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)\nAddChartRegion(string name, DateTime startTime, DateTime endTime, IDataSeries series, double y, Color outlineColor, Color areaColor, int areaOpacity)\nAddChartRegion(string name, DateTime startTime, DateTime endTime, IDataSeries series1, IDataSeries series2, Color outlineColor, Color areaColor, int areaOpacity)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_19",
            "text": "A drawing object of the type IRegion (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_19",
            "text": "name  A clearly identifiable name for the drawing object    barsBackStart  Sets the preceding bar at which the drawing should begin (0 = current bar)    startTime  Start time for the drawing    barsBackEnd  Sets the preceding bar at which the drawing should end (0 = current bar)    endTime  End time for the drawing    series1, series2  Every data series, for example an indicator, close, high, low and so on. The respective value of the data series for the current bar is used as a y-value.    y  Any double value    outlineColor  Color for the border    areaColor  Fill color for the area    areaOpacity  Transparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_19",
            "text": "// Fills the area between the upper and lower Bollinger Bands\nAddChartRegion(\"MyRegion-\" + ProcessingBarIndex, ProcessingBarIndex, 0, Bollinger(2, 14).Upper, Bollinger(2, 14).Lower, Color.Empty, Color.Lime, 100);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartregressionchannel",
            "text": "",
            "title": "AddChartRegressionChannel()"
        },
        {
            "location": "/drawing_objects/#description_20",
            "text": "AddChartRegressionChannel() draws a regression channel.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_20",
            "text": "AddChartRegressionChannel(string name, int barsBackStart, int barsBackEnd, Color color)\nAddChartRegressionChannel(string name, bool autoScale, int barsBackStart, int barsBackEnd, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)\nAddChartRegressionChannel(string name, bool autoScale, DateTime startTime, DateTime endTime, Color upperColor, DashStyle upperDashStyle, int upperWidth, Color middleColor, DashStyle middleDashStyle, int middleWidth, Color lowerColor, DashStyle lowerDashStyle, int lowerWidth)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_20",
            "text": "A drawing object of the type IRegressionChannel (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_20",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsBackStart  Sets the preceding bar at which the regression channel should start (0 = current bar)    startTime  Start time for the regression channel    barsBackEnd  Sets the preceding bar at which the regression channel should end (0 = current bar)    endTime  End time for the regression channel    color  Color of the drawing object    upperDashStyle, middleDashStyle, lowerDashStyle  LevelLine style:     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid         You may have to integrate: using System.Drawing.Drawing2D;    upperColor,  middleColor,    lowerColor  LevelLine color        upperWidth,   middleWidth,  lowerWidth  LevelLine strength",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_20",
            "text": "// Draws a regression channel from the low of the bar from 10 days ago to the high of the bar from 5 days ago.\nAddChartRegressionChannel(\"MyRegChannel-\" + ProcessingBarIndex, 10, 0, Color.Black);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartsquare",
            "text": "",
            "title": "AddChartSquare()"
        },
        {
            "location": "/drawing_objects/#description_21",
            "text": "AddChartSquare() draws a square:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartTriangleUp() ,  AddChartTriangleDown() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_21",
            "text": "DrawSqare(string name, bool autoScale, int barsAgo, double y, Color color)\nDrawSqare(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_21",
            "text": "A drawing object of the type ISquare (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_21",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets the preceding bar at which the square should be drawn (0 = current bar)    Time  Date/time of the bar at which the square should be drawn    Y  y-value for the square    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_21",
            "text": "// Draws a dark red square at the current bar 10 ticks above the high\nAddChartSquare(\"MySquare-\" + ProcessingBarIndex, true, 0, High[0] + 10*TickSize, Color.DarkRed);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharttext",
            "text": "",
            "title": "AddChartText()"
        },
        {
            "location": "/drawing_objects/#description_22",
            "text": "AddChartText() writes whatever text you want onto the chart using price and datetime coordinates.  See  AddChartTextFixed() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_22",
            "text": "AddChartText(string tag, string text, int barsAgo, double y, Color color);\nAddChartText(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, string text, int barsAgo, double y, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, DateTime x, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, DateTime x, double y, int pixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment hAlign, VerticalAlignment vAlign, Color outlineColor, Color areaColor);\nAddChartText(string tag, bool autoScale, string text, int barsAgo, double y, int yPixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment hAlign, VerticalAlignment vAlign, Color outlineColor, Color areaColor, int areaOpacity);\nAddChartText(string tag, bool autoScale, string text, DateTime x, double y, int pixelOffset, Color textColor, Font font, StringAlignment alignment, HorizontalAlignment hAlign, VerticalAlignment vAlign, Color outlineColor, Color areaColor);     Important note: \nWhen using signatures that contain horizontal alignment and vertical alignment, you need to add the following lines:  using System.Windows.Forms;\nusing System.Windows.Forms.VisualStyles;",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_22",
            "text": "A drawing object of the type IText (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_22",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    Text  Text to be displayed (may contain escape sequences)    barsAgo  Sets how many bars ago the text should be displayed    Time  Date/time of the bar at which the text should begin    Y  y-value at which the text should be written    yPixelOffset  Vertical offset of the text; positive numbers move it up, and negative numbers move it down    textColor  Text color    Font  Font    Alignment  Possible values are: StringAlignment.Center, StringAlignment.Far, StringAlignment.Near    HAlign  Possible values are: HorizontalAlign.Left, HorizontalAlign.Center, HorizontalAlign.Right    VAlign  Possible values are: VerticalAlign.Top, VerticalAlign.Center, VerticalAlign.Bottom    outlineColor  Border color around the text (for no border, select Color.Empty)    areaColor  Fill color for the text box    areaOpacity  Transparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_22",
            "text": "// writes text at y=3.0\nAddChartText(\"MyText-\" + ProcessingBarIndex, \"This is sample text.\", 10, 3, Color.Black);\n// writes red text in the font Arial 7\nAddChartText(\"MyText-\" + ProcessingBarIndex, false, \"This is sample text.\", Time[0], Close[0]+50*TickSize, 0,\nColor.Red, new Font(\"Arial\",7), StringAlignment.Center, Color.Blue, Color.DarkOliveGreen, 10);  This leads to the following result:   AddChartText(\"MyTag-\" + ProcessingBarIndex,true,\"Text\",1,\n// barsAgo\nHigh[1], // y\n10, // yPixelOffset\nColor.Blue, // Text color\nnew Font(\"Arial\", 10, FontStyle.Bold),\nStringAlignment.Center,\nHorizontalAlignment.Center,\nVerticalAlignment.Bottom,\nColor.Red, // Outline color\nColor.Yellow, // Fill color\n100); // Opacity",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharttextfixed",
            "text": "",
            "title": "AddChartTextFixed()"
        },
        {
            "location": "/drawing_objects/#description_23",
            "text": "AddChartTextFixed() writes text into one of 5 predetermined locations on the chart.  See  AddChartText() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_23",
            "text": "AddChartTextFixed(string tag, string text, TextPosition textPosition);\nAddChartTextFixed(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor);\nAddChartTextFixed(string tag, string text, TextPosition textPosition, Color textColor, Font font, Color outlineColor, Color areaColor, int areaOpacity);",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_23",
            "text": "A drawing object of the type ITextFixed (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_23",
            "text": "name  A clearly identifiable name for the drawing object    text  The text to be displayed    TextPosition  TextPosition.BottomLeft, TextPosition.BottomRight, TextPosition.Center, TextPosition.TopLeft, TextPosition.TopRight    textColor  Text color    font  Font    outlineColor  Color for the border around the text. For no border color, use Color.Empty    areaColor  Fill color of the text box. For no fill color, use Color.Empty    areaOpacity  Transparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_23",
            "text": "// Writes text into the middle of the chart\nAddChartTextFixed(\"MyText\", \"This is sample text.\", TextPosition.Center);\n// Writes red text with a blue border into the middle of the chart\nAddChartTextFixed(\"MyText\", \"This is sample text.\", TextPosition.Center, Color.Red, new Font(\"Arial\",35), Color.Blue, Color.Empty, 10);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharttrendchannel",
            "text": "",
            "title": "AddChartTrendChannel()"
        },
        {
            "location": "/drawing_objects/#description_24",
            "text": "AddChartTrendChannel() draws a trend channel.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_24",
            "text": "AddChartTrendChannel(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y)\nAddChartTrendChannel(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_24",
            "text": "A drawing object of the type ITrendChannel (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_24",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    start1BarsAgo  Number of bars ago for start point 1 (x-axis)    start1Time  Date/time for start point 1 (x-axis)    start1Y  y-value for start point 1    start2BarsAgo  Number of bars ago for start point 2 (x-axis)    start2Time  Date/time for start point 2 (x-axis)    start2Y  y-value for start point 2    start3BarsAgo  Number of bars ago for start point 3 (x-axis)    start3Time  Date/time for start point 3 (x-axis)    start3Y  y-value for start point 3",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_24",
            "text": "// Draws a trend channel\nAddChartTrendChannel(\"MyTrendChannel-\" + ProcessingBarIndex, true, 10, Low[10], 0, High[0], 10, High[10] + 5 * TickSize);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharttriangle",
            "text": "",
            "title": "AddChartTriangle()"
        },
        {
            "location": "/drawing_objects/#description_25",
            "text": "AddChartTriangle() draws a triangle.",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_25",
            "text": "AddChartTriangle(string name, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y, Color color)\nAddChartTriangle(string name, bool autoScale, int start1BarsAgo, double start1Y, int start2BarsAgo, double start2Y, int start3BarsAgo, double start3Y, Color color, Color areaColor, int areaOpacity)\nAddChartTriangle(string name, bool autoScale, DateTime start1Time, double start1Y, DateTime start2Time, double start2Y, DateTime start3Time, double start3Y, Color color, Color areaColor, int areaOpacity)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_25",
            "text": "A drawing object of the type ITriangle (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_25",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    start1BarsAgo  Number of bars ago for start point 1 (x-axis)    start1Time  Date/time for start point 1 (x-axis)    start1Y  y-value for start point 1    start2BarsAgo  Number of bars ago for start point 2 (x-axis)    start2Time  Date/time for start point 2 (x-axis)    start2Y  y-value for start point 2    start3BarsAgo  Number of bars ago for start point 3 (x-axis)    start3Time  Date/time for start point 3 (x-axis)    start3Y  y-value for start point 3    color  Color of the drawing object    areaColor  Fill color of the drawing object    areaOpacity  Transparency of the fill color. Value between 0 and 255 (0 = completely transparent, 255 = completely opaque)",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_25",
            "text": "// Draws a green triangle\nAddChartTriangle(\"tag1-\" + ProcessingBarIndex, 4, Low[4], 3, High[3], 1, Low[1], Color.Green);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharttriangledown",
            "text": "",
            "title": "AddChartTriangleDown()"
        },
        {
            "location": "/drawing_objects/#description_26",
            "text": "AddChartTriangleDown() draws a small downwards-pointing triangle:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartSquare() ,  AddChartTriangleUp() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_26",
            "text": "AddChartTriangleDown(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartTriangleDown(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_26",
            "text": "A drawing object of the type ITriangleDown (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_26",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets how many bars ago the triangle should be drawn    time  Date/time for the bar at which the triangle should be drawn    Y  y-value at which the triangle should be drawn    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_26",
            "text": "// Draws a small red triangle at the current bar 10 ticks above the high\nAddChartTriangleDown(\"MyTriangleDown-\" + ProcessingBarIndex, true, 0, High[0] + 10*TickSize, Color.Red);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addcharttriangleup",
            "text": "",
            "title": "AddChartTriangleUp()"
        },
        {
            "location": "/drawing_objects/#description_27",
            "text": "AddChartTriangleUp() draws a small upwards-pointing triangle:   See  AddChartArrowUp() ,  AddChartArrowDown() ,  AddChartDiamond() ,  AddChartDot() ,  AddChartSquare() ,  AddChartTriangleDown() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_27",
            "text": "AddChartTriangleUp(string name, bool autoScale, int barsAgo, double y, Color color)\nAddChartTriangleUp(string name, bool autoScale, DateTime time, double y, Color color)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_27",
            "text": "A drawing object of the type ITriangleUp (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_27",
            "text": "name  A clearly identifiable name for the drawing object    autoScale  Adjusts the scale of the y-axis so that drawing objects can be viewed in their entirety    barsAgo  Sets how many bars ago the triangle should be drawn    time  Date/time for the bar at which the triangle should be drawn    y  y-value at which the triangle should be drawn    color  Color of the drawing object",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_27",
            "text": "// Draws a small light green triangle at the current bar 10 ticks below the low\nAddChartTriangleUp(\"MyTriangleUp-\" + ProcessingBarIndex, true, 0, Low[0] - 10*TickSize, Color.LightGreen);",
            "title": "Example"
        },
        {
            "location": "/drawing_objects/#addchartverticalline",
            "text": "",
            "title": "AddChartVerticalLine()"
        },
        {
            "location": "/drawing_objects/#description_28",
            "text": "AddChartVerticalLine() draws a vertical line in the chart.  See  AddChartLine() ,  AddChartHorizontalLine() ,  AddChartExtendedLine() ,  AddChartRay() .",
            "title": "Description"
        },
        {
            "location": "/drawing_objects/#usage_28",
            "text": "AddChartVerticalLine(string name, int barsAgo, Color color)\nAddChartVerticalLine(string name, int barsAgo, Color color, DashStyle dashStyle, int width)\nAddChartVerticalLine(string name, DateTime time, Color color, DashStyle dashStyle, int width)",
            "title": "Usage"
        },
        {
            "location": "/drawing_objects/#return-value_28",
            "text": "A drawing object of the type IVerticalLine (interface)",
            "title": "Return Value"
        },
        {
            "location": "/drawing_objects/#parameter_28",
            "text": "name  A clearly identifiable name for the drawing object    barsAgo  Sets how many bars ago the vertical line should be drawn (0 = current bar)    time  Date/time of the bar at which the vertical line should be drawn    color  LevelLine color    dashStyle  LevelLine style     DashStyle.Dash     DashStyle.DashDot     DashStyle.DashDotDot     DashStyle.Dot     DashStyle.Solid    width  LevelLine strength",
            "title": "Parameter"
        },
        {
            "location": "/drawing_objects/#example_28",
            "text": "// Draws a vertical line at the bar from 10 periods ago\nAddChartVerticalLine(\"MyVerticalLine-\" + ProcessingBarIndex, 10, Color.Black);",
            "title": "Example"
        },
        {
            "location": "/hints_and_advice/",
            "text": "Hints & Advice\n\n\nNote:\n\nCode changes made in self-scripted indicators are automatically applied to conditions in which this indicators are used if the changes were made in the \"body\" of e.g. \"OnCalculate/OnBarUpdate. Changes of parameters, outputs series, etc. require a manual edit of the conditions.\n\n\nBar Numbering Within the Chart\n\n\nThe following example demonstrates the usage of the plot method and the properties of the \nChart\n object.\n\n\n\n\nNote:\n\nFor demonstration purposes, each time Paint is called up within the \"Bar Numbering\" section, \"New\" and \"Dispose\" will also be called up multiple times.\nFrom a performance point of view, this solution can be better implemented by using constant variable declarations and calling up \"Dispose\" within the OnDispose statement.\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"PlotSample\")]\npublic class PlotSample : UserIndicator\n{\nPen pen = new Pen(Color.Blue);\nStringFormat sf = new StringFormat();\nSolidBrush brush = new SolidBrush(Color.Black);\nFont font = new Font(\"Arial\", 10, FontStyle.Bold);\nprotected override void OnInit()\n{\nIsOverlay = true;\n}\nprotected override void OnDispose()\n{\nif (pen!=null) pen.Dispose();\nif (sf!=null) sf.Dispose();\nif (brush!=null) brush.Dispose();\nif (font!=null) font.Dispose();\n}\nprotected override void OnCalculate()\n{}\npublic override void OnPaint(Graphics g, Rectangle r, double min, double max)\n{\nif (Bars == null || Chart == null) return;\n// Properties of Chart\nstring s;\ns = \"bounds: \"+r.X.ToString()+\" \"+r.Y.ToString()+\" \"+r.Height.ToString()+\" \"+r.Width.ToString();\ng.DrawString(s, font, brush, 10, 50, sf);\ns = \"min: \"+Instrument.Round2TickSize(min).ToString()+\" max: \"+Instrument.Round2TickSize(max).ToString();\ng.DrawString(s, font, brush, 10, 70, sf);\ns = \"BarSpace: \"+Chart.BarSpace.ToString()+\" BarWidth: \"+Chart.BarWidth.ToString();\ng.DrawString(s, font, brush, 10, 90, sf);\ns = \"Bars.Count: \"+Bars.Count.ToString();\ng.DrawString(s, font, brush, 10, 110, sf);\ns = \"BarsPainted: \"+Chart.BarsPainted.ToString() + \" FirstBarPainted: \"+Chart.FirstBarPainted.ToString() + \" LastBarPainted: \"+Chart.LastBarPainted.ToString();\ng.DrawString(s, font, brush, 10, 130, sf);\ns = \"BarsVisible: \"+Chart.BarsVisible.ToString() + \" FirstBarVisible: \"+Chart.FirstBarVisible.ToString() + \" LastBarVisible: \"+Chart.LastBarVisible.ToString();\ng.DrawString(s, font, brush, 10, 150, sf);\n// Bar numbering\nStringFormat _sf = new StringFormat();\nSolidBrush _brush = new SolidBrush(Color.Blue);\nFont _font = new Font(\"Arial\", 8);\nSizeF _stringSize = new SizeF();\n_sf.Alignment = StringAlignment.Center;\nfor (int i=Chart.FirstBarVisible; i<=Chart.LastBarVisible; i++)\n{\nstring text = i.ToString();\n_stringSize = g.MeasureString(text, _font);\nint x = Chart.GetXByBarIdx(Bars, i);\nint y = Chart.GetYByValue(this, High[Abs2Ago(i)] + 3*TickSize) - (int) _stringSize.Height;\ng.DrawString(text, _font, _brush, x, y, _sf);\n}\n_sf.Dispose();\n_brush.Dispose();\n_font.Dispose();\n}\nprivate int Abs2Ago(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnClosedBar?1:0));\n}\n}\n}\n\n\n\n\nCustom Chart Background Image\n\n\nThe plot method allows you to add a background image to the chart.\nThe following example uses an image with the JPG format located in the main directory on the hard drive (C:).\n\n\nusing System;\nusing System.Drawing;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\npublic class BackgroundPicture : UserIndicator\n{\nImage img;\nprotected override void OnStart()\n{\ntry { img = Image.FromFile(\"C:\\\\\\\\MyCar.jpg\"); } catch {}\n}\npublic override void OnPaint(Graphics g, Rectangle r, double min, double max)\n{\nif (Chart == null || img == null) return;\ng.DrawImage(img,r);\n}\n}\n}\n\n\n\n\n\n\nFile Selection in the Properties\n\n\nTo enable file selection within the properties dialog of an indicator, you will need a type converter.\nThe following example displays how a selection of WAV files can be programmed for an alert:\n\n\nusing System;\nusing System.IO;\nusing System.Collections;\nusing System.ComponentModel;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"File Picker Example.\")]\npublic class FilePicker : UserIndicator\n{\nprivate string _soundFile = \"Alert4.wav\";\nprivate static string _dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @\"\\\\AgenaTrader\\\\Sounds\\\\\";\ninternal class MyConverter : TypeConverter\n{\npublic override bool GetStandardValuesSupported(ITypeDescriptorContext context)\n{\nreturn true;\n}\npublic override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n{\nif (context == null) return null;\nArrayList list = new ArrayList();\nDirectoryInfo dir = new DirectoryInfo(_dir);\nFileInfo[] files = dir.GetFiles(\"*.wav\");\nforeach (FileInfo file in files) list.Add(file.Name);\nreturn new TypeConverter.StandardValuesCollection(list);\n}\n}\nprotected override void OnStart()\n{\nPlaySound(_soundFile);\n}\n[Description(\"Choose file to play.\")]\n[Category (\"Sound\")]\n[TypeConverter(typeof(MyConverter))]\npublic string SoundFile\n{\nget { return _soundFile; }\nset { _soundFile = value; }\n}\n}\n}\n\n\n\n\nFormatting of Numbers\n\n\nFormatting of Numbers\n\n\nGeneral information on formatting in C#\n\n\ndouble d = 123.4567890;\nPrint(\"Without formatting : \" + d.ToString()); // 123.456789\nPrint(\"As a currency : \" + d.ToString(\"C\")); // 123.46 \u20ac\nPrint(\"Exponential : \" + d.ToString(\"E\")); // 1.234568E+002\nPrint(\"As a fixed point : \" + d.ToString(\"F2\")); // 123.46\nPrint(\"General : \" + d.ToString(\"G\")); // 123.456789\nPrint(\"As a percentage : \" + d.ToString(\"P0\")); // 12.346%\nPrint(\"To 2 decimal places : \" + d.ToString(\"N2\")); // 123.45\nPrint(\"To 3 decimal places : \" + d.ToString(\"N3\")); // 123.457\nPrint(\"To 4 decimal places : \" + d.ToString(\"N4\")); // 123.4568\n\n\n\n\nUseful Functions\n\n\nReturns the currency symbol for the current instrument:\n\n\npublic string getWaehrungssymbol() {\nstring s = \"\";\nswitch (Instrument.Currency) {\ncase Currencies.USD : s = \"$\"; break;\ncase Currencies.EUR : s = \"\u20ac\"; break;\ncase Currencies.CHF : s = \"CHF\"; break;\ncase Currencies.GBP : s = ((char)163).ToString(); break;\ncase Currencies.JPY : s = ((char)165).ToString(); break;\n}\nreturn s;\n}\n\n\n\n\nConverts a number into a currency with a thousands separator and 2 decimal places.\nThe block separation per 1000 units can be set in \"Culture\".\n\n\npublic string getWaehrungOhneSymbol(double d) {\n// Separate 1000s and two decimal points\nreturn d.ToString(\"\\#,\\#\\#0.00\");\n}\n\n\n\n\nConverts a number into a currency with a thousands separator and 2 decimal places and a currency symbol:\n\n\npublic string getWaehrungMitSymbol(double d) {\n// Dollar is prefixed, everything else is added afterwards\nstring s=getWaehrungOhneSymbol(d);\nstring w=getWaehrungssymbol();\nif (w==\"$\") s=w+\" \"+s; else s+=\" \"+w;\nreturn s;\n}\n\n\n\n\nConverts a number into a currency with a thousands separator and 2 decimal places as well as a currency symbol, and fills up to a fixed length with empty spaces.\nThe function is great for outputting values into a table.\n\n\npublic string getWaehrungMitSymbol(double d, int Laenge) {\n// Leading spaces until a fixed length has been reached\nstring s=getWaehrungMitSymbol(d);\nfor (int i=s.Length; i<Laenge; i++) s=\" \"+s;\nreturn s;\n}\n\n\n\n\nConverts a number into a percentage. Nothing is calculated, only formatted.\nLeading plus sign, a decimal place and a percent sign.\n\n\npublic string getPercent(double d) {\nd=Math.Round(d, 1);\nstring s=(d>0)?\"+\":\"\"; // Leading plus sign\nreturn s+d.ToString(\"0.0\")+\"%\";\n}\n\n\n\n\nFormats the market price depending on the number of decimal places to which the currency is notated.\nThis includes a thousands separator and fixed length, meaning that zeros are filled on the right hand side.\nBecause Culture Info is being used, you must integrate the NameSpace \nSystem.Globalization\n.\n\n\npublic string format(double d)\n{\nint tickLength = 0;\n// ticksize.ToString() is for example 6J = \"1E-06\" and length is then 5\n// and not 8 as it should be with \"0.000001\")\nif (TickSize < 1) tickLength = TickSize.ToString(\"0.\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\").Length - 2;\nstring f = \"{0:n\"+tickLength.ToString()+\"}\";\nreturn string.Format(CultureInfo.CurrentCulture, f, d);\n}\n\n\n\n\nExample\n\n\ndouble profit = 1234.567890;\nPrint(\"getCurrencyWithoutSymbol \": + getWaehrungOhneSymbol(Gewinn)); // 1234.57\nPrint(\"getCurrencyWithSymbol :\" + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\nPrint(\"getCurrencyWithSymbol :\" + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\ndouble percentage profit = 12.3456789;\nPrint(\"getPercent :\" + getPercent(ProzGewinn)); // +12.3%\ndouble price = 123.4567;\nPrint(\"getPrice :\" + getKurs(Kurs)); // 123.46\n\n\n\n\nIndex Conversion\n\n\nThere are two types of indexing in AgenaTrader.\n\n\n\n\n\n\nThe bars are numbered from youngest to oldest.\nThis type is used in the OnCalculate() method.\nThe last bar has an index of 0, while the oldest bar has the index Bars.Count-1.\n\n\n\n\n\n\nThe bars are numbered from oldest to youngest.\nThis type is most commonly used in the OnPaint() method in \"for\" loops.\nThe oldest Bbar receives an index of 0, while the youngest bar has the index Bars.Count-1.\nThe following function can be used to recalculate the index types:\n\n\n\n\n\n\nprivate int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnClosedBar?1:0));\n}\n\n\n\n\nOverwriting Indicator Names\n\n\nThe name of an indicator (or a strategy) is displayed within the properties dialog and at the top edge of the chart. Use the ToString() method and DisplayName property to overwrite it.\n\n\npublic override string ToString()\n{\nreturn \"My Name\";\n}\n\n\n\n\npublic override string DisplayName\n     {\n         get\n         {\n            return \"My Name\";\n         }\n     }\n\n\n\n\nImportant tip:\n\nAlways use both override methods in your scripts to assure that your special name is used on all AgenaTrader forms.\n\n\nRectangle with Rounded Corners\n\n\nBy using the graphics methods, you can create interesting forms and place them onto the chart.\nOne example of this is the RoundedRectangle class, which is a rectangle with rounded corners.\n\n\n\n\nExample Code:\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"Demo of RoundedRectangles\")]\npublic class DemoRoundedRectangle : UserIndicator\n{\nprotected override void OnInit()\n{\nIsOverlay = true;\n}\nprotected override void OnCalculate() {}\npublic override void OnPaint(Graphics g, Rectangle r, double min, double max)\n{\nGraphicsPath path;\n// draws a rectangle with rounded corners\npath = RoundedRectangle.Create(30, 50, 100, 100,8);\ng.DrawPath(Pens.Black, path);\n// draws a filled rectangle with a radius of 20\n// only round the upper left and lower right corner\npath = RoundedRectangle.Create(160, 50, 100, 100, 20,\nRoundedRectangle.RectangleCorners.TopLeft|RoundedRectangle.RectangleCorners.BottomRight);\ng.FillPath(Brushes.Orange, path);\n}\n}\npublic abstract class RoundedRectangle\n{\npublic enum RectangleCorners\n{\nNone = 0, TopLeft = 1, TopRight = 2, BottomLeft = 4, BottomRight = 8,\nAll = TopLeft | TopRight | BottomLeft | BottomRight\n}\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius, RectangleCorners corners)\n{\nRectangle r = new Rectangle(x,y,width, height);\nRectangle tlc = new Rectangle(r.Left, r.Top,Math.Min(2 * radius, r.Width),Math.Min(2 * radius, r.Height));\nRectangle trc = tlc;\ntrc.X = r.Right - 2 * radius;\nRectangle blc = tlc;\nblc.Y = r.Bottom - 2 * radius;\nRectangle brc = blc;\nbrc.X = r.Right - 2 * radius;\nPoint[] n = new Point[]\n{\nnew Point(tlc.Left, tlc.Bottom), tlc.Location,\nnew Point(tlc.Right, tlc.Top), trc.Location,\nnew Point(trc.Right, trc.Top),\nnew Point(trc.Right, trc.Bottom),\nnew Point(brc.Right, brc.Top),\nnew Point(brc.Right, brc.Bottom),\nnew Point(brc.Left, brc.Bottom),\nnew Point(blc.Right, blc.Bottom),\nnew Point(blc.Left, blc.Bottom), blc.Location\n};\nGraphicsPath p = new GraphicsPath();\np.StartFigure();\n//Top left corner\nif ((RectangleCorners.TopLeft & corners) == RectangleCorners.TopLeft)\np.AddArc(tlc, 180, 90);\nelse\np.AddLines(new Point[] { n[0], n[1], n[2] });\n//Top edge\np.AddLine(n[2], n[3]);\n//Top right corner\nif ((RectangleCorners.TopRight & corners) == RectangleCorners.TopRight)\np.AddArc(trc, 270, 90);\nelse\np.AddLines(new Point[] { n[3], n[4], n[5] });\n//Right edge\np.AddLine(n[5], n[6]);\n//Bottom right corner\nif ((RectangleCorners.BottomRight & corners) == RectangleCorners.BottomRight)\np.AddArc(brc, 0, 90);\nelse\np.AddLines(new Point[] { n[6], n[7], n[8] });\n//Bottom edge\np.AddLine(n[8], n[9]);\n//Bottom left corner\nif ((RectangleCorners.BottomLeft & corners) == RectangleCorners.BottomLeft)\np.AddArc(blc, 90, 90);\nelse\np.AddLines(new Point[] { n[9], n[10], n[11] });\n//Left edge\np.AddLine(n[11], n[0]);\np.CloseFigure();\nreturn p;\n}\npublic static GraphicsPath Create(Rectangle rect, int radius, RectangleCorners c)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius), c); }\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius)\n{ return Create(x, y, width, height, Math.Max(1,radius), RectangleCorners.All); }\npublic static GraphicsPath Create(Rectangle rect, int radius)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius)); }\npublic static GraphicsPath Create(int x, int y, int width, int height)\n{ return Create(x, y, width, height, 8); }\npublic static GraphicsPath Create(Rectangle rect)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height); }\n}\n}",
            "title": "Hints and advice"
        },
        {
            "location": "/hints_and_advice/#hints-advice",
            "text": "Note: \nCode changes made in self-scripted indicators are automatically applied to conditions in which this indicators are used if the changes were made in the \"body\" of e.g. \"OnCalculate/OnBarUpdate. Changes of parameters, outputs series, etc. require a manual edit of the conditions.",
            "title": "Hints &amp; Advice"
        },
        {
            "location": "/hints_and_advice/#bar-numbering-within-the-chart",
            "text": "The following example demonstrates the usage of the plot method and the properties of the  Chart  object.   Note: \nFor demonstration purposes, each time Paint is called up within the \"Bar Numbering\" section, \"New\" and \"Dispose\" will also be called up multiple times.\nFrom a performance point of view, this solution can be better implemented by using constant variable declarations and calling up \"Dispose\" within the OnDispose statement.  using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nusing AgenaTrader.Helper;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"PlotSample\")]\npublic class PlotSample : UserIndicator\n{\nPen pen = new Pen(Color.Blue);\nStringFormat sf = new StringFormat();\nSolidBrush brush = new SolidBrush(Color.Black);\nFont font = new Font(\"Arial\", 10, FontStyle.Bold);\nprotected override void OnInit()\n{\nIsOverlay = true;\n}\nprotected override void OnDispose()\n{\nif (pen!=null) pen.Dispose();\nif (sf!=null) sf.Dispose();\nif (brush!=null) brush.Dispose();\nif (font!=null) font.Dispose();\n}\nprotected override void OnCalculate()\n{}\npublic override void OnPaint(Graphics g, Rectangle r, double min, double max)\n{\nif (Bars == null || Chart == null) return;\n// Properties of Chart\nstring s;\ns = \"bounds: \"+r.X.ToString()+\" \"+r.Y.ToString()+\" \"+r.Height.ToString()+\" \"+r.Width.ToString();\ng.DrawString(s, font, brush, 10, 50, sf);\ns = \"min: \"+Instrument.Round2TickSize(min).ToString()+\" max: \"+Instrument.Round2TickSize(max).ToString();\ng.DrawString(s, font, brush, 10, 70, sf);\ns = \"BarSpace: \"+Chart.BarSpace.ToString()+\" BarWidth: \"+Chart.BarWidth.ToString();\ng.DrawString(s, font, brush, 10, 90, sf);\ns = \"Bars.Count: \"+Bars.Count.ToString();\ng.DrawString(s, font, brush, 10, 110, sf);\ns = \"BarsPainted: \"+Chart.BarsPainted.ToString() + \" FirstBarPainted: \"+Chart.FirstBarPainted.ToString() + \" LastBarPainted: \"+Chart.LastBarPainted.ToString();\ng.DrawString(s, font, brush, 10, 130, sf);\ns = \"BarsVisible: \"+Chart.BarsVisible.ToString() + \" FirstBarVisible: \"+Chart.FirstBarVisible.ToString() + \" LastBarVisible: \"+Chart.LastBarVisible.ToString();\ng.DrawString(s, font, brush, 10, 150, sf);\n// Bar numbering\nStringFormat _sf = new StringFormat();\nSolidBrush _brush = new SolidBrush(Color.Blue);\nFont _font = new Font(\"Arial\", 8);\nSizeF _stringSize = new SizeF();\n_sf.Alignment = StringAlignment.Center;\nfor (int i=Chart.FirstBarVisible; i<=Chart.LastBarVisible; i++)\n{\nstring text = i.ToString();\n_stringSize = g.MeasureString(text, _font);\nint x = Chart.GetXByBarIdx(Bars, i);\nint y = Chart.GetYByValue(this, High[Abs2Ago(i)] + 3*TickSize) - (int) _stringSize.Height;\ng.DrawString(text, _font, _brush, x, y, _sf);\n}\n_sf.Dispose();\n_brush.Dispose();\n_font.Dispose();\n}\nprivate int Abs2Ago(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnClosedBar?1:0));\n}\n}\n}",
            "title": "Bar Numbering Within the Chart"
        },
        {
            "location": "/hints_and_advice/#custom-chart-background-image",
            "text": "The plot method allows you to add a background image to the chart.\nThe following example uses an image with the JPG format located in the main directory on the hard drive (C:).  using System;\nusing System.Drawing;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\npublic class BackgroundPicture : UserIndicator\n{\nImage img;\nprotected override void OnStart()\n{\ntry { img = Image.FromFile(\"C:\\\\\\\\MyCar.jpg\"); } catch {}\n}\npublic override void OnPaint(Graphics g, Rectangle r, double min, double max)\n{\nif (Chart == null || img == null) return;\ng.DrawImage(img,r);\n}\n}\n}",
            "title": "Custom Chart Background Image"
        },
        {
            "location": "/hints_and_advice/#file-selection-in-the-properties",
            "text": "To enable file selection within the properties dialog of an indicator, you will need a type converter.\nThe following example displays how a selection of WAV files can be programmed for an alert:  using System;\nusing System.IO;\nusing System.Collections;\nusing System.ComponentModel;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"File Picker Example.\")]\npublic class FilePicker : UserIndicator\n{\nprivate string _soundFile = \"Alert4.wav\";\nprivate static string _dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @\"\\\\AgenaTrader\\\\Sounds\\\\\";\ninternal class MyConverter : TypeConverter\n{\npublic override bool GetStandardValuesSupported(ITypeDescriptorContext context)\n{\nreturn true;\n}\npublic override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n{\nif (context == null) return null;\nArrayList list = new ArrayList();\nDirectoryInfo dir = new DirectoryInfo(_dir);\nFileInfo[] files = dir.GetFiles(\"*.wav\");\nforeach (FileInfo file in files) list.Add(file.Name);\nreturn new TypeConverter.StandardValuesCollection(list);\n}\n}\nprotected override void OnStart()\n{\nPlaySound(_soundFile);\n}\n[Description(\"Choose file to play.\")]\n[Category (\"Sound\")]\n[TypeConverter(typeof(MyConverter))]\npublic string SoundFile\n{\nget { return _soundFile; }\nset { _soundFile = value; }\n}\n}\n}",
            "title": "File Selection in the Properties"
        },
        {
            "location": "/hints_and_advice/#formatting-of-numbers",
            "text": "",
            "title": "Formatting of Numbers"
        },
        {
            "location": "/hints_and_advice/#formatting-of-numbers_1",
            "text": "General information on formatting in C#  double d = 123.4567890;\nPrint(\"Without formatting : \" + d.ToString()); // 123.456789\nPrint(\"As a currency : \" + d.ToString(\"C\")); // 123.46 \u20ac\nPrint(\"Exponential : \" + d.ToString(\"E\")); // 1.234568E+002\nPrint(\"As a fixed point : \" + d.ToString(\"F2\")); // 123.46\nPrint(\"General : \" + d.ToString(\"G\")); // 123.456789\nPrint(\"As a percentage : \" + d.ToString(\"P0\")); // 12.346%\nPrint(\"To 2 decimal places : \" + d.ToString(\"N2\")); // 123.45\nPrint(\"To 3 decimal places : \" + d.ToString(\"N3\")); // 123.457\nPrint(\"To 4 decimal places : \" + d.ToString(\"N4\")); // 123.4568",
            "title": "Formatting of Numbers"
        },
        {
            "location": "/hints_and_advice/#useful-functions",
            "text": "Returns the currency symbol for the current instrument:  public string getWaehrungssymbol() {\nstring s = \"\";\nswitch (Instrument.Currency) {\ncase Currencies.USD : s = \"$\"; break;\ncase Currencies.EUR : s = \"\u20ac\"; break;\ncase Currencies.CHF : s = \"CHF\"; break;\ncase Currencies.GBP : s = ((char)163).ToString(); break;\ncase Currencies.JPY : s = ((char)165).ToString(); break;\n}\nreturn s;\n}  Converts a number into a currency with a thousands separator and 2 decimal places.\nThe block separation per 1000 units can be set in \"Culture\".  public string getWaehrungOhneSymbol(double d) {\n// Separate 1000s and two decimal points\nreturn d.ToString(\"\\#,\\#\\#0.00\");\n}  Converts a number into a currency with a thousands separator and 2 decimal places and a currency symbol:  public string getWaehrungMitSymbol(double d) {\n// Dollar is prefixed, everything else is added afterwards\nstring s=getWaehrungOhneSymbol(d);\nstring w=getWaehrungssymbol();\nif (w==\"$\") s=w+\" \"+s; else s+=\" \"+w;\nreturn s;\n}  Converts a number into a currency with a thousands separator and 2 decimal places as well as a currency symbol, and fills up to a fixed length with empty spaces.\nThe function is great for outputting values into a table.  public string getWaehrungMitSymbol(double d, int Laenge) {\n// Leading spaces until a fixed length has been reached\nstring s=getWaehrungMitSymbol(d);\nfor (int i=s.Length; i<Laenge; i++) s=\" \"+s;\nreturn s;\n}  Converts a number into a percentage. Nothing is calculated, only formatted.\nLeading plus sign, a decimal place and a percent sign.  public string getPercent(double d) {\nd=Math.Round(d, 1);\nstring s=(d>0)?\"+\":\"\"; // Leading plus sign\nreturn s+d.ToString(\"0.0\")+\"%\";\n}  Formats the market price depending on the number of decimal places to which the currency is notated.\nThis includes a thousands separator and fixed length, meaning that zeros are filled on the right hand side.\nBecause Culture Info is being used, you must integrate the NameSpace  System.Globalization .  public string format(double d)\n{\nint tickLength = 0;\n// ticksize.ToString() is for example 6J = \"1E-06\" and length is then 5\n// and not 8 as it should be with \"0.000001\")\nif (TickSize < 1) tickLength = TickSize.ToString(\"0.\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\").Length - 2;\nstring f = \"{0:n\"+tickLength.ToString()+\"}\";\nreturn string.Format(CultureInfo.CurrentCulture, f, d);\n}",
            "title": "Useful Functions"
        },
        {
            "location": "/hints_and_advice/#example",
            "text": "double profit = 1234.567890;\nPrint(\"getCurrencyWithoutSymbol \": + getWaehrungOhneSymbol(Gewinn)); // 1234.57\nPrint(\"getCurrencyWithSymbol :\" + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\nPrint(\"getCurrencyWithSymbol :\" + getWaehrungMitSymbol(Gewinn)); // $ 1,234.57\ndouble percentage profit = 12.3456789;\nPrint(\"getPercent :\" + getPercent(ProzGewinn)); // +12.3%\ndouble price = 123.4567;\nPrint(\"getPrice :\" + getKurs(Kurs)); // 123.46",
            "title": "Example"
        },
        {
            "location": "/hints_and_advice/#index-conversion",
            "text": "There are two types of indexing in AgenaTrader.    The bars are numbered from youngest to oldest.\nThis type is used in the OnCalculate() method.\nThe last bar has an index of 0, while the oldest bar has the index Bars.Count-1.    The bars are numbered from oldest to youngest.\nThis type is most commonly used in the OnPaint() method in \"for\" loops.\nThe oldest Bbar receives an index of 0, while the youngest bar has the index Bars.Count-1.\nThe following function can be used to recalculate the index types:    private int Convert(int idx)\n{\nreturn Math.Max(0,Bars.Count-idx-1-(CalculateOnClosedBar?1:0));\n}",
            "title": "Index Conversion"
        },
        {
            "location": "/hints_and_advice/#overwriting-indicator-names",
            "text": "The name of an indicator (or a strategy) is displayed within the properties dialog and at the top edge of the chart. Use the ToString() method and DisplayName property to overwrite it.  public override string ToString()\n{\nreturn \"My Name\";\n}  public override string DisplayName\n     {\n         get\n         {\n            return \"My Name\";\n         }\n     }  Important tip: \nAlways use both override methods in your scripts to assure that your special name is used on all AgenaTrader forms.",
            "title": "Overwriting Indicator Names"
        },
        {
            "location": "/hints_and_advice/#rectangle-with-rounded-corners",
            "text": "By using the graphics methods, you can create interesting forms and place them onto the chart.\nOne example of this is the RoundedRectangle class, which is a rectangle with rounded corners.   Example Code:\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Linq;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Drawing.Drawing2D;\nusing AgenaTrader.API;\nusing AgenaTrader.Custom;\nusing AgenaTrader.Plugins;\nnamespace AgenaTrader.UserCode\n{\n[Description(\"Demo of RoundedRectangles\")]\npublic class DemoRoundedRectangle : UserIndicator\n{\nprotected override void OnInit()\n{\nIsOverlay = true;\n}\nprotected override void OnCalculate() {}\npublic override void OnPaint(Graphics g, Rectangle r, double min, double max)\n{\nGraphicsPath path;\n// draws a rectangle with rounded corners\npath = RoundedRectangle.Create(30, 50, 100, 100,8);\ng.DrawPath(Pens.Black, path);\n// draws a filled rectangle with a radius of 20\n// only round the upper left and lower right corner\npath = RoundedRectangle.Create(160, 50, 100, 100, 20,\nRoundedRectangle.RectangleCorners.TopLeft|RoundedRectangle.RectangleCorners.BottomRight);\ng.FillPath(Brushes.Orange, path);\n}\n}\npublic abstract class RoundedRectangle\n{\npublic enum RectangleCorners\n{\nNone = 0, TopLeft = 1, TopRight = 2, BottomLeft = 4, BottomRight = 8,\nAll = TopLeft | TopRight | BottomLeft | BottomRight\n}\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius, RectangleCorners corners)\n{\nRectangle r = new Rectangle(x,y,width, height);\nRectangle tlc = new Rectangle(r.Left, r.Top,Math.Min(2 * radius, r.Width),Math.Min(2 * radius, r.Height));\nRectangle trc = tlc;\ntrc.X = r.Right - 2 * radius;\nRectangle blc = tlc;\nblc.Y = r.Bottom - 2 * radius;\nRectangle brc = blc;\nbrc.X = r.Right - 2 * radius;\nPoint[] n = new Point[]\n{\nnew Point(tlc.Left, tlc.Bottom), tlc.Location,\nnew Point(tlc.Right, tlc.Top), trc.Location,\nnew Point(trc.Right, trc.Top),\nnew Point(trc.Right, trc.Bottom),\nnew Point(brc.Right, brc.Top),\nnew Point(brc.Right, brc.Bottom),\nnew Point(brc.Left, brc.Bottom),\nnew Point(blc.Right, blc.Bottom),\nnew Point(blc.Left, blc.Bottom), blc.Location\n};\nGraphicsPath p = new GraphicsPath();\np.StartFigure();\n//Top left corner\nif ((RectangleCorners.TopLeft & corners) == RectangleCorners.TopLeft)\np.AddArc(tlc, 180, 90);\nelse\np.AddLines(new Point[] { n[0], n[1], n[2] });\n//Top edge\np.AddLine(n[2], n[3]);\n//Top right corner\nif ((RectangleCorners.TopRight & corners) == RectangleCorners.TopRight)\np.AddArc(trc, 270, 90);\nelse\np.AddLines(new Point[] { n[3], n[4], n[5] });\n//Right edge\np.AddLine(n[5], n[6]);\n//Bottom right corner\nif ((RectangleCorners.BottomRight & corners) == RectangleCorners.BottomRight)\np.AddArc(brc, 0, 90);\nelse\np.AddLines(new Point[] { n[6], n[7], n[8] });\n//Bottom edge\np.AddLine(n[8], n[9]);\n//Bottom left corner\nif ((RectangleCorners.BottomLeft & corners) == RectangleCorners.BottomLeft)\np.AddArc(blc, 90, 90);\nelse\np.AddLines(new Point[] { n[9], n[10], n[11] });\n//Left edge\np.AddLine(n[11], n[0]);\np.CloseFigure();\nreturn p;\n}\npublic static GraphicsPath Create(Rectangle rect, int radius, RectangleCorners c)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius), c); }\npublic static GraphicsPath Create(int x, int y, int width, int height, int radius)\n{ return Create(x, y, width, height, Math.Max(1,radius), RectangleCorners.All); }\npublic static GraphicsPath Create(Rectangle rect, int radius)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height, Math.Max(1,radius)); }\npublic static GraphicsPath Create(int x, int y, int width, int height)\n{ return Create(x, y, width, height, 8); }\npublic static GraphicsPath Create(Rectangle rect)\n{ return Create(rect.X, rect.Y, rect.Width, rect.Height); }\n}\n}",
            "title": "Rectangle with Rounded Corners"
        }
    ]
}